{"version":3,"file":"158.3d85cd2111ce629f.js","mappings":"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","names":["i0","data_r3","decoded","ManualAnalysisComponent_ng_container_18_pre_1_Template","ManualAnalysisComponent_ng_container_18_ng_container_2_Template","undefined","data_r7","ManualAnalysisComponent_ng_container_33_pre_1_Template","ManualAnalysisComponent_ng_container_33_ng_container_2_Template","data_r11","ManualAnalysisComponent_ng_container_48_pre_1_Template","ManualAnalysisComponent_ng_container_48_ng_container_2_Template","ManualAnalysisComponent","constructor","this","activatedRoute","inject","ActivatedRoute","onDestroy$","Subject","attestationObjectData$","ReplaySubject","authenticatorData$","attestedCredentialData$","ngOnInit","queryParams","pipe","takeUntil","subscribe","params","raw","read","decodeAttestationObjectData","next","decodeAuthenticatorDataData","input","decodeAuthenticatorData","error","console","decodeAttestedCredentialDataData","readAttestationObject","data","target","value","replaceAll","readAuthenticatorData","readAttestedCredentialData","getMetadata","Error","ngOnDestroy","complete","static","t","core","Xpm","selectors","standalone","features","decls","vars","consts","template","rf","ctx","$event","ManualAnalysisComponent_ng_container_18_Template","ManualAnalysisComponent_ng_container_33_Template","ManualAnalysisComponent_ng_container_48_Template","CommonModule","i1","FormsModule","MatExpansionModule","i2","MatInputModule","i3","i4","MatCardModule","i5","styles","isHex","test","decodeHex","Uint8Array","match","map","byte","parseInt","decodeBase64Url","decodeAttestationObject","reader","BufferReader","decodeAttestedCredentialData"],"sourceRoot":"webpack:///","sources":["./src/app/pages/analysis/manual-analysis/manual-analysis.component.html","./src/app/pages/analysis/manual-analysis/manual-analysis.component.ts","./src/app/pages/analysis/manual-analysis/example.data.ts"],"sourcesContent":["<div class=\"page-container container-md\">\n  <h1>Manual analysis</h1>\n  <p class=\"lead\">\n    This page can be used to manually decode parts of a WebAuthn response. This\n    is useful for when the response has been collected through some other means\n    than the data-collection tool available on this site.\n  </p>\n\n  <mat-card>\n    <mat-card-header>\n      <h3>Attestation Object</h3>\n    </mat-card-header>\n    <mat-card-content>\n      <mat-expansion-panel [expanded]=\"true\">\n        <mat-expansion-panel-header>\n          <mat-panel-title>Data input</mat-panel-title>\n        </mat-expansion-panel-header>\n\n        <p>Paste data here to begin analysis (Base64Url and Hex supported)</p>\n        <mat-form-field>\n          <textarea matInput (input)=\"readAttestationObject($event)\"></textarea>\n        </mat-form-field>\n      </mat-expansion-panel>\n\n      <ng-container *ngIf=\"attestationObjectData$ | async as data\">\n        <pre *ngIf=\"data.decoded\"><code>{{ data.decoded | json }}</code></pre>\n        <ng-container *ngIf=\"data.decoded == undefined\">\n          Unable to decode input\n        </ng-container>\n      </ng-container>\n    </mat-card-content>\n  </mat-card>\n\n  <mat-card>\n    <mat-card-header>\n      <h3>Authenticator Data</h3>\n    </mat-card-header>\n    <mat-card-content>\n      <mat-expansion-panel [expanded]=\"true\">\n        <mat-expansion-panel-header>\n          <mat-panel-title>Data input</mat-panel-title>\n        </mat-expansion-panel-header>\n\n        <p>Paste data here to begin analysis (Base64Url and Hex supported)</p>\n        <mat-form-field>\n          <textarea matInput (input)=\"readAuthenticatorData($event)\"></textarea>\n        </mat-form-field>\n      </mat-expansion-panel>\n\n      <ng-container *ngIf=\"authenticatorData$ | async as data\">\n        <pre *ngIf=\"data.decoded\"><code>{{ data.decoded | json }}</code></pre>\n        <ng-container *ngIf=\"data.decoded == undefined\">\n          Unable to decode input\n        </ng-container>\n      </ng-container>\n    </mat-card-content>\n  </mat-card>\n\n  <mat-card>\n    <mat-card-header>\n      <h3>Attested Credential Data</h3>\n    </mat-card-header>\n    <mat-card-content>\n      <mat-expansion-panel [expanded]=\"true\">\n        <mat-expansion-panel-header>\n          <mat-panel-title>Data input</mat-panel-title>\n        </mat-expansion-panel-header>\n\n        <p>Paste data here to begin analysis (Base64Url and Hex supported)</p>\n        <mat-form-field>\n          <textarea\n            matInput\n            (input)=\"readAttestedCredentialData($event)\"\n          ></textarea>\n        </mat-form-field>\n      </mat-expansion-panel>\n\n      <ng-container *ngIf=\"attestedCredentialData$ | async as data\">\n        <pre *ngIf=\"data.decoded\"><code>{{ data.decoded | json }}</code></pre>\n        <ng-container *ngIf=\"data.decoded == undefined\">\n          Unable to decode input\n        </ng-container>\n      </ng-container>\n    </mat-card-content>\n  </mat-card>\n</div>\n","import { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { ActivatedRoute } from '@angular/router';\nimport { Component, OnDestroy, OnInit, inject } from '@angular/core';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatCardModule } from '@angular/material/card';\n\nimport { ReplaySubject, Subject, takeUntil } from 'rxjs';\nimport {\n  DecodedAttestationObject,\n  DecodedAttestedCredentialData,\n  DecodedAuthenticatorData,\n  DecodedWebAuthnChallengeResponse,\n  WebAuthnChallengeResponse,\n} from '../../../types/webauthn-challenge-response';\nimport { OptionsComponent } from '../../../options/options.component';\nimport { PrettyJsonComponent } from '../../../pretty-json/pretty-json.component';\nimport { JsonMetadata } from '../../../pretty-json/json-metadata';\nimport {\n  attestationObjectExample,\n  attestedCredentialDataExample,\n  authenticatorDataExample,\n} from './example.data';\nimport { decodeAttestationObject } from '../analyze/decode-create';\nimport {\n  BufferReader,\n  decodeAttestedCredentialData,\n  decodeAuthenticatorData,\n  decodeBase64Url,\n} from '../analyze/decode-common';\n\n@Component({\n  templateUrl: './manual-analysis.component.html',\n  styleUrls: ['./manual-analysis.component.scss'],\n  imports: [\n    CommonModule,\n    FormsModule,\n    MatExpansionModule,\n    MatInputModule,\n    MatCardModule,\n    OptionsComponent,\n    PrettyJsonComponent,\n  ],\n  standalone: true,\n})\nexport class ManualAnalysisComponent implements OnInit, OnDestroy {\n  private activatedRoute = inject(ActivatedRoute);\n  private onDestroy$ = new Subject<void>();\n\n  protected attestationObjectData$ = new ReplaySubject<{\n    raw: Uint8Array;\n    decoded: DecodedAttestationObject | undefined;\n  }>(1);\n\n  protected authenticatorData$ = new ReplaySubject<{\n    raw: Uint8Array;\n    decoded: DecodedAuthenticatorData | undefined;\n  }>(1);\n\n  protected attestedCredentialData$ = new ReplaySubject<{\n    raw: Uint8Array;\n    decoded: DecodedAttestedCredentialData | undefined;\n  }>(1);\n\n  ngOnInit(): void {\n    // this.attestationObjectData$\n    //   .pipe(takeUntil(this.onDestroy$))\n    //   .subscribe(() => {\n    //     // this.panelExpanded = false;\n    //   });\n\n    this.activatedRoute.queryParams\n      .pipe(takeUntil(this.onDestroy$))\n      .subscribe((params) => {\n        if ('example' in params) {\n          {\n            // Attestation object\n            const raw = read(attestationObjectExample);\n            const decoded = decodeAttestationObjectData(raw);\n            this.attestationObjectData$.next({ raw, decoded });\n          }\n\n          {\n            // Authenticator data\n            const raw = read(authenticatorDataExample);\n            const decoded = decodeAuthenticatorDataData(raw);\n            this.authenticatorData$.next({ raw, decoded });\n          }\n\n          {\n            // Attested credential data\n            const raw = read(attestedCredentialDataExample);\n            const decoded = decodeAttestedCredentialDataData(raw);\n            this.attestedCredentialData$.next({ raw, decoded });\n          }\n        }\n      });\n  }\n\n  readAttestationObject(data: Event) {\n    if (\n      !data.target ||\n      !('value' in data.target) ||\n      typeof data.target.value !== 'string'\n    ) {\n      return;\n    }\n    try {\n      const raw = read(data.target.value.replaceAll(' ', ''));\n      const decoded = decodeAttestationObjectData(raw);\n      this.attestationObjectData$.next({ raw, decoded });\n    } catch {}\n  }\n\n  readAuthenticatorData(data: Event) {\n    if (\n      !data.target ||\n      !('value' in data.target) ||\n      typeof data.target.value !== 'string'\n    ) {\n      return;\n    }\n    try {\n      const raw = read(data.target.value.replaceAll(' ', ''));\n      const decoded = decodeAuthenticatorData(raw);\n      this.authenticatorData$.next({ raw, decoded });\n    } catch {}\n  }\n\n  readAttestedCredentialData(data: Event) {\n    if (\n      !data.target ||\n      !('value' in data.target) ||\n      typeof data.target.value !== 'string'\n    ) {\n      return;\n    }\n    try {\n      const raw = read(data.target.value.replaceAll(' ', ''));\n      const decoded = decodeAttestedCredentialDataData(raw);\n      this.attestedCredentialData$.next({ raw, decoded });\n    } catch {}\n  }\n\n  getMetadata(\n    data: DecodedWebAuthnChallengeResponse\n  ): JsonMetadata<DecodedWebAuthnChallengeResponse> {\n    throw new Error('Method not implemented.');\n    // if (data.method === 'navigator.credentials.create') {\n    //   return WebAuthnCreateMetadata;\n    // }\n    // if (data.method === 'navigator.credentials.get') {\n    //   return {\n    //     method: {\n    //       genericDescription: 'This is a method used to authenticate',\n    //       fields: undefined,\n    //     },\n    //     options: {\n    //       fields: {\n    //         publicKey: {\n    //           genericDescription: 'WebAuthn options object',\n    //           fields: {} as any,\n    //         },\n    //       },\n    //     },\n    //   } as any; // not implemented yet\n    // } else {\n    //   return {} as any;\n    // }\n  }\n\n  ngOnDestroy(): void {\n    this.onDestroy$.next();\n    this.onDestroy$.complete();\n  }\n}\n\nfunction read(input: string): Uint8Array {\n  if (isHex(input)) {\n    return decodeHex(input);\n  }\n\n  return decodeBase64Url(input);\n}\n\nfunction isHex(input: string): boolean {\n  return /^[0-9a-fA-F]*$/.test(input);\n}\n\nfunction decodeHex(input: string): Uint8Array {\n  return new Uint8Array(\n    input.match(/.{1,2}/g)!.map((byte) => parseInt(byte, 16))\n  );\n}\n\nfunction decodeAttestationObjectData(\n  input: Uint8Array\n): DecodedAttestationObject | undefined {\n  try {\n    return decodeAttestationObject(input);\n  } catch (error) {\n    console.error(error);\n    return undefined;\n  }\n}\n\nfunction decodeAuthenticatorDataData(\n  input: Uint8Array\n): DecodedAuthenticatorData | undefined {\n  try {\n    return decodeAuthenticatorData(input);\n  } catch (error) {\n    console.error(error);\n    return undefined;\n  }\n}\n\nfunction decodeAttestedCredentialDataData(\n  input: Uint8Array\n): DecodedAttestedCredentialData | undefined {\n  try {\n    const reader = new BufferReader(input);\n    return decodeAttestedCredentialData(reader);\n  } catch (error) {\n    console.error(error);\n    return undefined;\n  }\n}\n","export const attestationObjectExample =\n  'o2NmbXRmcGFja2VkZ2F0dFN0bXSjY2FsZyZjc2lnWEYwRAIgIrIIJY3sOkNT5K-xcoHGe3Ytx7uQ-msNrsK_5q-59Y4CIFdM1EHQn2s-6d3LYgNFbnAvCzKBRZs7VsnhFw2Pcpn5Y3g1Y4FZAt0wggLZMIIBwaADAgECAgkA35LZxOLtZgowDQYJKoZIhvcNAQELBQAwLjEsMCoGA1UEAxMjWXViaWNvIFUyRiBSb290IENBIFNlcmlhbCA0NTcyMDA2MzEwIBcNMTQwODAxMDAwMDAwWhgPMjA1MDA5MDQwMDAwMDBaMG8xCzAJBgNVBAYTAlNFMRIwEAYDVQQKDAlZdWJpY28gQUIxIjAgBgNVBAsMGUF1dGhlbnRpY2F0b3IgQXR0ZXN0YXRpb24xKDAmBgNVBAMMH1l1YmljbyBVMkYgRUUgU2VyaWFsIDExNTUxMDk1OTkwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAQKGGxuTQpqUopEkJp6JCNocCjUxX7Mtxe6EoC4XC_B5OBhZow8IK7zM1DRlkUjiiw5C_Xf-jT_JVAvRw89QLiIo4GBMH8wEwYKKwYBBAGCxAoNAQQFBAMFBAMwIgYJKwYBBAGCxAoCBBUxLjMuNi4xLjQuMS40MTQ4Mi4xLjcwEwYLKwYBBAGC5RwCAQEEBAMCBDAwIQYLKwYBBAGC5RwBAQQEEgQQL8BXn4ETR-qxFrtajbkgKjAMBgNVHRMBAf8EAjAAMA0GCSqGSIb3DQEBCwUAA4IBAQCCrK8RMKmb0UMn0vj5sEGioEpmhSckIuV7FLC4-DtvFUVmS79VaB6vAVhyKr_O0uSsYzzsCVlWRSSw8uUX3ZcQmLmJFRfs0MVTouRzn53hPa_Q1de4rEo39PLMMO8lywBlLRnbadfaV70anB2O2H1G2A0rO9_R2e-dK2gy1K1bzXQhTOamFB0Wsuk6yyyI9go-ttX2FHGXWQk3O8Z3kCMkVxpXP2Dwe77Re5LItZ-ighC_qMYBIpMAGznv5Xv5yx46yopBMPg6-GaPc97ycRsg3JnoqATuo_dCcZe2tFGzc1wjvJsb4nTCbTv5GW-MSktxX0uVxNt7l-dZTrRlZIwcaGF1dGhEYXRhWMTEbO-CrRtUZHdZHQCLCHWew-bS7LTzlHS_6mlpkl0Dt0UAAAABL8BXn4ETR-qxFrtajbkgKgBAvC9SDu0Sv5vbq_CPEwFpxZT-aFckE32DXFSbuAHIVlHG2s3tZe_dxQBvs3dg0-5zffoWYPIJ8bwVeI80rjtnE6UBAgMmIAEhWCByDYO4ccb1xpqcU_FdyFHjkvIEWlOvKP8eUTWURTR2nCJYINJCvcCq11etE0056hlnFDdoh8Cm4ZTUz666rIu6LAW7';\n\nexport const authenticatorDataExample =\n  'xGzvgq0bVGR3WR0Aiwh1nsPm0uy085R0v-ppaZJdA7dFAAAAAS_AV5-BE0fqsRa7Wo25ICoAQLwvUg7tEr-b26vwjxMBacWU_mhXJBN9g1xUm7gByFZRxtrN7WXv3cUAb7N3YNPuc336FmDyCfG8FXiPNK47ZxOlAQIDJiABIVggcg2DuHHG9caanFPxXchR45LyBFpTryj_HlE1lEU0dpwiWCDSQr3AqtdXrRNNOeoZZxQ3aIfApuGU1M-uuqyLuiwFuw';\n\nexport const attestedCredentialDataExample =\n  'd548826e79b4db40a3d811116f7e83490010c9b0a46cbd8a9c533de3a78e10cfb4a8a5010203262001215820cc987492357460d539cea4622b24b6cca94b4a4de96ee4db4d846e8b14cc25c4225820f1a8233492da4ecb549c4ec76cfc032dc2affa884662f15c2defad50f16ae847';\n"],"x_google_ignoreList":[]}