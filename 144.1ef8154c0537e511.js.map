{"version":3,"file":"144.1ef8154c0537e511.js","mappings":"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","names":["HttpHandler","HttpBackend","HttpHeaders","constructor","headers","this","normalizedNames","Map","lazyUpdate","lazyInit","split","forEach","line","index","indexOf","name","slice","key","toLowerCase","value","trim","maybeSetNormalizedName","has","get","push","set","Headers","values","setHeaderEntries","Object","entries","init","length","keys","Array","from","getAll","append","clone","op","delete","lcName","copyFrom","update","applyUpdate","other","concat","base","undefined","toDelete","existing","filter","headerValues","isArray","map","toString","fn","HttpUrlEncodingCodec","encodeKey","standardEncoding","encodeValue","decodeKey","decodeURIComponent","decodeValue","STANDARD_ENCODING_REGEX","STANDARD_ENCODING_REPLACEMENTS","v","encodeURIComponent","replace","s","t","valueToString","HttpParams","options","updates","cloneFrom","encoder","fromString","fromObject","Error","paramParser","rawParams","codec","param","eqIdx","val","list","res","appendAll","params","_value","eKey","join","idx","splice","HttpContext","token","defaultValue","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","HttpRequest","method","url","third","fourth","body","reportProgress","withCredentials","responseType","toUpperCase","mightHaveBody","context","urlWithParams","qIdx","serializeBody","isUrlSearchParams","URLSearchParams","JSON","stringify","detectContentTypeHeader","type","setHeaders","reduce","setParams","HttpEventType","Sent","UploadProgress","ResponseHeader","DownloadProgress","Response","User","HttpResponseBase","defaultStatus","defaultStatusText","status","statusText","ok","HttpHeaderResponse","super","HttpResponse","HttpErrorResponse","message","error","addBody","observe","HttpClient","handler","request","first","req","events$","of","pipe","concatMap","handle","res$","event","head","jsonp","callbackParam","patch","post","put","static","ɵfac","i0","ɵprov","factory","interceptorChainEndFn","finalHandlerFn","adaptLegacyInterceptorToChain","chainTailFn","interceptor","initialRequest","intercept","downstreamRequest","HTTP_INTERCEPTORS","InjectionToken","HTTP_INTERCEPTOR_FNS","HTTP_ROOT_INTERCEPTOR_FNS","legacyInterceptorFnFactory","chain","inject","optional","reduceRight","pendingTasks","ɵInitialRenderPendingTasks","taskId","add","finalize","remove","HttpInterceptorHandler","backend","injector","dedupedInterceptorFns","Set","nextSequencedFn","interceptorFn","chainedInterceptorFn","runInContext","XSSI_PREFIX","HttpXhrBackend","xhrFactory","ɵRuntimeError","ngDevMode","ɵloadImpl","switchMap","Observable","observer","xhr","build","open","setRequestHeader","detectedType","reqBody","headerResponse","partialFromXhr","getAllResponseHeaders","getResponseUrl","responseURL","test","getResponseHeader","onLoad","response","responseText","originalBody","parse","text","next","complete","onError","sentHeaders","onDownProgress","progressEvent","loaded","lengthComputable","total","partialText","onUpProgress","progress","addEventListener","upload","send","removeEventListener","readyState","DONE","abort","i1","XSRF_ENABLED","XSRF_COOKIE_NAME","providedIn","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","getToken","cookieString","cookie","ɵparseCookieValue","DOCUMENT","PLATFORM_ID","xsrfInterceptorFn","lcUrl","startsWith","headerName","HttpFeatureKind","Interceptors","LegacyInterceptors","CustomXsrfConfiguration","NoXsrfProtection","JsonpSupport","RequestsMadeViaParent","Fetch","provideHttpClient","features","providers","provide","useExisting","useValue","multi","useClass","feature","ɵproviders","makeEnvironmentProviders","LEGACY_INTERCEPTOR_FN","withInterceptorsFromDi","makeHttpFeature","kind","ɵkind","useFactory","HttpClientModule","ɵmod","ɵinj","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","done","Promise","then","_asyncToGenerator","self","args","arguments","apply","err"],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/common/fesm2022/http.mjs","./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["/**\n * @license Angular v16.2.10\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i0 from '@angular/core';\nimport { Injectable, inject, NgZone, InjectionToken, ɵInitialRenderPendingTasks, Inject, ɵRuntimeError, PLATFORM_ID, makeEnvironmentProviders, NgModule, TransferState, makeStateKey, ɵENABLED_SSR_FEATURES, APP_BOOTSTRAP_LISTENER, ApplicationRef } from '@angular/core';\nimport { of, Observable, from } from 'rxjs';\nimport { concatMap, filter, map, finalize, switchMap, tap, first } from 'rxjs/operators';\nimport * as i1 from '@angular/common';\nimport { DOCUMENT, ɵparseCookieValue } from '@angular/common';\n\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nclass HttpHandler {\n}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nclass HttpBackend {\n}\n\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nclass HttpHeaders {\n    /**  Constructs a new HTTP header object with the given values.*/\n    constructor(headers) {\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                headers.split('\\n').forEach(line => {\n                    const index = line.indexOf(':');\n                    if (index > 0) {\n                        const name = line.slice(0, index);\n                        const key = name.toLowerCase();\n                        const value = line.slice(index + 1).trim();\n                        this.maybeSetNormalizedName(name, key);\n                        if (this.headers.has(key)) {\n                            this.headers.get(key).push(value);\n                        }\n                        else {\n                            this.headers.set(key, [value]);\n                        }\n                    }\n                });\n            };\n        }\n        else if (typeof Headers !== 'undefined' && headers instanceof Headers) {\n            this.headers = new Map();\n            headers.forEach((values, name) => {\n                this.setHeaderEntries(name, values);\n            });\n        }\n        else {\n            this.lazyInit = () => {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    assertValidHeaders(headers);\n                }\n                this.headers = new Map();\n                Object.entries(headers).forEach(([name, values]) => {\n                    this.setHeaderEntries(name, values);\n                });\n            };\n        }\n    }\n    /**\n     * Checks for existence of a given header.\n     *\n     * @param name The header name to check for existence.\n     *\n     * @returns True if the header exists, false otherwise.\n     */\n    has(name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param name The header name.\n     *\n     * @returns The value string if the header exists, null otherwise\n     */\n    get(name) {\n        this.init();\n        const values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @returns A list of header names.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param name The header name from which to retrieve values.\n     *\n     * @returns A string of values if the header exists, null otherwise.\n     */\n    getAll(name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param name The header name for which to append the values.\n     * @param value The value to append.\n     *\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\n     */\n    append(name, value) {\n        return this.clone({ name, value, op: 'a' });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param name The header name.\n     * @param value The value or values to set or override for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the newly set header value.\n     */\n    set(name, value) {\n        return this.clone({ name, value, op: 's' });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param name The header name.\n     * @param value The value or values to delete for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the given value deleted.\n     */\n    delete(name, value) {\n        return this.clone({ name, value, op: 'd' });\n    }\n    maybeSetNormalizedName(name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    }\n    init() {\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach(update => this.applyUpdate(update));\n                this.lazyUpdate = null;\n            }\n        }\n    }\n    copyFrom(other) {\n        other.init();\n        Array.from(other.headers.keys()).forEach(key => {\n            this.headers.set(key, other.headers.get(key));\n            this.normalizedNames.set(key, other.normalizedNames.get(key));\n        });\n    }\n    clone(update) {\n        const clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    }\n    applyUpdate(update) {\n        const key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                let value = update.value;\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push(...value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                const toDelete = update.value;\n                if (!toDelete) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    let existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter(value => toDelete.indexOf(value) === -1);\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    }\n    setHeaderEntries(name, values) {\n        const headerValues = (Array.isArray(values) ? values : [values]).map((value) => value.toString());\n        const key = name.toLowerCase();\n        this.headers.set(key, headerValues);\n        this.maybeSetNormalizedName(name, key);\n    }\n    /**\n     * @internal\n     */\n    forEach(fn) {\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));\n    }\n}\n/**\n * Verifies that the headers object has the right shape: the values\n * must be either strings, numbers or arrays. Throws an error if an invalid\n * header value is present.\n */\nfunction assertValidHeaders(headers) {\n    for (const [key, value] of Object.entries(headers)) {\n        if (!(typeof value === 'string' || typeof value === 'number') && !Array.isArray(value)) {\n            throw new Error(`Unexpected value of the \\`${key}\\` header provided. ` +\n                `Expecting either a string, a number or an array, but got: \\`${value}\\`.`);\n        }\n    }\n}\n\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nclass HttpUrlEncodingCodec {\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param key The key name.\n     * @returns The encoded key name.\n     */\n    encodeKey(key) {\n        return standardEncoding(key);\n    }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param value The value.\n     * @returns The encoded value.\n     */\n    encodeValue(value) {\n        return standardEncoding(value);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param key The encoded key name.\n     * @returns The decoded key name.\n     */\n    decodeKey(key) {\n        return decodeURIComponent(key);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param value The encoded value.\n     * @returns The decoded value.\n     */\n    decodeValue(value) {\n        return decodeURIComponent(value);\n    }\n}\nfunction paramParser(rawParams, codec) {\n    const map = new Map();\n    if (rawParams.length > 0) {\n        // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n        // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n        // may start with the `?` char, so we strip it if it's present.\n        const params = rawParams.replace(/^\\?/, '').split('&');\n        params.forEach((param) => {\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n            const list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\n/**\n * Encode input string with standard encodeURIComponent and then un-encode specific characters.\n */\nconst STANDARD_ENCODING_REGEX = /%(\\d[a-f0-9])/gi;\nconst STANDARD_ENCODING_REPLACEMENTS = {\n    '40': '@',\n    '3A': ':',\n    '24': '$',\n    '2C': ',',\n    '3B': ';',\n    '3D': '=',\n    '3F': '?',\n    '2F': '/',\n};\nfunction standardEncoding(v) {\n    return encodeURIComponent(v).replace(STANDARD_ENCODING_REGEX, (s, t) => STANDARD_ENCODING_REPLACEMENTS[t] ?? s);\n}\nfunction valueToString(value) {\n    return `${value}`;\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nclass HttpParams {\n    constructor(options = {}) {\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(`Cannot specify both fromString and fromObject.`);\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach(key => {\n                const value = options.fromObject[key];\n                // convert the values to strings\n                const values = Array.isArray(value) ? value.map(valueToString) : [valueToString(value)];\n                this.map.set(key, values);\n            });\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Reports whether the body includes one or more values for a given parameter.\n     * @param param The parameter name.\n     * @returns True if the parameter has one or more values,\n     * false if it has no value or is not present.\n     */\n    has(param) {\n        this.init();\n        return this.map.has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param param The parameter name.\n     * @returns The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n    get(param) {\n        this.init();\n        const res = this.map.get(param);\n        return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param param The parameter name.\n     * @returns All values in a string array,\n     * or `null` if the parameter not present.\n     */\n    getAll(param) {\n        this.init();\n        return this.map.get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @returns The parameter names in a string array.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.map.keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param param The parameter name.\n     * @param value The new value to add.\n     * @return A new body with the appended value.\n     */\n    append(param, value) {\n        return this.clone({ param, value, op: 'a' });\n    }\n    /**\n     * Constructs a new body with appended values for the given parameter name.\n     * @param params parameters and values\n     * @return A new body with the new value.\n     */\n    appendAll(params) {\n        const updates = [];\n        Object.keys(params).forEach(param => {\n            const value = params[param];\n            if (Array.isArray(value)) {\n                value.forEach(_value => {\n                    updates.push({ param, value: _value, op: 'a' });\n                });\n            }\n            else {\n                updates.push({ param, value: value, op: 'a' });\n            }\n        });\n        return this.clone(updates);\n    }\n    /**\n     * Replaces the value for a parameter.\n     * @param param The parameter name.\n     * @param value The new value.\n     * @return A new body with the new value.\n     */\n    set(param, value) {\n        return this.clone({ param, value, op: 's' });\n    }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param param The parameter name.\n     * @param value The value to remove, if provided.\n     * @return A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n    delete(param, value) {\n        return this.clone({ param, value, op: 'd' });\n    }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n    toString() {\n        this.init();\n        return this.keys()\n            .map(key => {\n            const eKey = this.encoder.encodeKey(key);\n            // `a: ['1']` produces `'a=1'`\n            // `b: []` produces `''`\n            // `c: ['1', '2']` produces `'c=1&c=2'`\n            return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value))\n                .join('&');\n        })\n            // filter out empty values because `b: []` produces `''`\n            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n            .filter(param => param !== '')\n            .join('&');\n    }\n    clone(update) {\n        const clone = new HttpParams({ encoder: this.encoder });\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat(update);\n        return clone;\n    }\n    init() {\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));\n            this.updates.forEach(update => {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\n                        base.push(valueToString(update.value));\n                        this.map.set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            let base = this.map.get(update.param) || [];\n                            const idx = base.indexOf(valueToString(update.value));\n                            if (idx !== -1) {\n                                base.splice(idx, 1);\n                            }\n                            if (base.length > 0) {\n                                this.map.set(update.param, base);\n                            }\n                            else {\n                                this.map.delete(update.param);\n                            }\n                        }\n                        else {\n                            this.map.delete(update.param);\n                            break;\n                        }\n                }\n            });\n            this.cloneFrom = this.updates = null;\n        }\n    }\n}\n\n/**\n * A token used to manipulate and access values stored in `HttpContext`.\n *\n * @publicApi\n */\nclass HttpContextToken {\n    constructor(defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n}\n/**\n * Http context stores arbitrary user defined values and ensures type safety without\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\n *\n * This context is mutable and is shared between cloned requests unless explicitly specified.\n *\n * @usageNotes\n *\n * ### Usage Example\n *\n * ```typescript\n * // inside cache.interceptors.ts\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\n *\n * export class CacheInterceptor implements HttpInterceptor {\n *\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\n *       return ...;\n *     }\n *     return delegate.handle(req);\n *   }\n * }\n *\n * // inside a service\n *\n * this.httpClient.get('/api/weather', {\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\n * }).subscribe(...);\n * ```\n *\n * @publicApi\n */\nclass HttpContext {\n    constructor() {\n        this.map = new Map();\n    }\n    /**\n     * Store a value in the context. If a value is already present it will be overwritten.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     * @param value The value to store.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    set(token, value) {\n        this.map.set(token, value);\n        return this;\n    }\n    /**\n     * Retrieve the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns The stored value or default if one is defined.\n     */\n    get(token) {\n        if (!this.map.has(token)) {\n            this.map.set(token, token.defaultValue());\n        }\n        return this.map.get(token);\n    }\n    /**\n     * Delete the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    delete(token) {\n        this.map.delete(token);\n        return this;\n    }\n    /**\n     * Checks for existence of a given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns True if the token exists, false otherwise.\n     */\n    has(token) {\n        return this.map.has(token);\n    }\n    /**\n     * @returns a list of tokens currently stored in the context.\n     */\n    keys() {\n        return this.map.keys();\n    }\n}\n\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * Safely assert whether the given value is a URLSearchParams instance.\n *\n * In some execution environments URLSearchParams is not defined.\n */\nfunction isUrlSearchParams(value) {\n    return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nclass HttpRequest {\n    constructor(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         *\n         * Note: The `FetchBackend` doesn't support progress report on uploads.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        let options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? third : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = third;\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.context) {\n                this.context = options.context;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no context have been passed in, construct a new HttpContext instance.\n        if (!this.context) {\n            this.context = new HttpContext();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            const params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                const qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     */\n    serializeBody() {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            isUrlSearchParams(this.body) || typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return this.body.toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n    detectContentTypeHeader() {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, boolean and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            typeof this.body === 'boolean') {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    }\n    clone(update = {}) {\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        const method = update.method || this.method;\n        const url = update.url || this.url;\n        const responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        const body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        let headers = update.headers || this.headers;\n        let params = update.params || this.params;\n        // Pass on context if needed\n        const context = update.context ?? this.context;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce((params, param) => params.set(param, update.setParams[param]), params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params,\n            headers,\n            context,\n            reportProgress,\n            responseType,\n            withCredentials,\n        });\n    }\n}\n\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nvar HttpEventType;\n(function (HttpEventType) {\n    /**\n     * The request was sent out over the wire.\n     */\n    HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n    /**\n     * An upload progress event was received.\n     *\n     * Note: The `FetchBackend` doesn't support progress report on uploads.\n     */\n    HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n    /**\n     * The response status code and headers were received.\n     */\n    HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n    /**\n     * A download progress event was received.\n     */\n    HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n    /**\n     * The full response including the body was received.\n     */\n    HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(HttpEventType || (HttpEventType = {}));\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nclass HttpResponseBase {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     */\n    constructor(init, defaultStatus = 200 /* HttpStatusCode.Ok */, defaultStatusText = 'OK') {\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.ResponseHeader;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     */\n    clone(update = {}) {\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nclass HttpResponse extends HttpResponseBase {\n    /**\n     * Construct a new `HttpResponse`.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.Response;\n        this.body = init.body !== undefined ? init.body : null;\n    }\n    clone(update = {}) {\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nclass HttpErrorResponse extends HttpResponseBase {\n    constructor(init) {\n        // Initialize with a default status of 0 / Unknown Error.\n        super(init, 0, 'Unknown Error');\n        this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (this.status >= 200 && this.status < 300) {\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n        }\n        else {\n            this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n        }\n        this.error = init.error || null;\n    }\n}\n\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody(options, body) {\n    return {\n        body,\n        headers: options.headers,\n        context: options.context,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/tour-of-heroes/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/understanding-communicating-with-http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\nclass HttpClient {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     */\n    request(first, url, options = {}) {\n        let req;\n        // First, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = first;\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\n            // provided.\n            // Figure out the headers.\n            let headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            let params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams({ fromObject: options.params });\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, url, (options.body !== undefined ? options.body : null), {\n                headers,\n                context: options.context,\n                params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        const events$ = of(req).pipe(concatMap((req) => this.handler.handle(req)));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        const res$ = events$.pipe(filter((event) => event instanceof HttpResponse));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        }));\n                    case 'blob':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        }));\n                    case 'text':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        }));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(map((res) => res.body));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n        }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     */\n    delete(url, options = {}) {\n        return this.request('DELETE', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    get(url, options = {}) {\n        return this.request('GET', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     */\n    head(url, options = {}) {\n        return this.request('HEAD', url, options);\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @param url The resource URL.\n     * @param callbackParam The callback function name.\n     *\n     */\n    jsonp(url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilities of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     */\n    options(url, options = {}) {\n        return this.request('OPTIONS', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    patch(url, body, options = {}) {\n        return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     */\n    post(url, body, options = {}) {\n        return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     */\n    put(url, body, options = {}) {\n        return this.request('PUT', url, addBody(options, body));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: HttpClient, deps: [{ token: HttpHandler }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: HttpClient }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: HttpClient, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: HttpHandler }]; } });\n\nconst XSSI_PREFIX$1 = /^\\)\\]\\}',?\\n/;\nconst REQUEST_URL_HEADER = `X-Request-URL`;\n/**\n * Determine an appropriate URL for the response, by checking either\n * response url or the X-Request-URL header.\n */\nfunction getResponseUrl$1(response) {\n    if (response.url) {\n        return response.url;\n    }\n    // stored as lowercase in the map\n    const xRequestUrl = REQUEST_URL_HEADER.toLocaleLowerCase();\n    return response.headers.get(xRequestUrl);\n}\n/**\n * Uses `fetch` to send requests to a backend server.\n *\n * This `FetchBackend` requires the support of the\n * [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) which is available on all\n * supported browsers and on Node.js v18 or later.\n *\n * @see {@link HttpHandler}\n *\n * @publicApi\n * @developerPreview\n */\nclass FetchBackend {\n    constructor() {\n        // We need to bind the native fetch to its context or it will throw an \"illegal invocation\"\n        this.fetchImpl = inject(FetchFactory, { optional: true })?.fetch ?? fetch.bind(globalThis);\n        this.ngZone = inject(NgZone);\n    }\n    handle(request) {\n        return new Observable(observer => {\n            const aborter = new AbortController();\n            this.doRequest(request, aborter.signal, observer)\n                .then(noop, error => observer.error(new HttpErrorResponse({ error })));\n            return () => aborter.abort();\n        });\n    }\n    async doRequest(request, signal, observer) {\n        const init = this.createRequestInit(request);\n        let response;\n        try {\n            const fetchPromise = this.fetchImpl(request.urlWithParams, { signal, ...init });\n            // Make sure Zone.js doesn't trigger false-positive unhandled promise\n            // error in case the Promise is rejected synchronously. See function\n            // description for additional information.\n            silenceSuperfluousUnhandledPromiseRejection(fetchPromise);\n            // Send the `Sent` event before awaiting the response.\n            observer.next({ type: HttpEventType.Sent });\n            response = await fetchPromise;\n        }\n        catch (error) {\n            observer.error(new HttpErrorResponse({\n                error,\n                status: error.status ?? 0,\n                statusText: error.statusText,\n                url: request.urlWithParams,\n                headers: error.headers,\n            }));\n            return;\n        }\n        const headers = new HttpHeaders(response.headers);\n        const statusText = response.statusText;\n        const url = getResponseUrl$1(response) ?? request.urlWithParams;\n        let status = response.status;\n        let body = null;\n        if (request.reportProgress) {\n            observer.next(new HttpHeaderResponse({ headers, status, statusText, url }));\n        }\n        if (response.body) {\n            // Read Progress\n            const contentLength = response.headers.get('content-length');\n            const chunks = [];\n            const reader = response.body.getReader();\n            let receivedLength = 0;\n            let decoder;\n            let partialText;\n            // We have to check whether the Zone is defined in the global scope because this may be called\n            // when the zone is nooped.\n            const reqZone = typeof Zone !== 'undefined' && Zone.current;\n            // Perform response processing outside of Angular zone to\n            // ensure no excessive change detection runs are executed\n            // Here calling the async ReadableStreamDefaultReader.read() is responsible for triggering CD\n            await this.ngZone.runOutsideAngular(async () => {\n                while (true) {\n                    const { done, value } = await reader.read();\n                    if (done) {\n                        break;\n                    }\n                    chunks.push(value);\n                    receivedLength += value.length;\n                    if (request.reportProgress) {\n                        partialText = request.responseType === 'text' ?\n                            (partialText ?? '') + (decoder ??= new TextDecoder).decode(value, { stream: true }) :\n                            undefined;\n                        const reportProgress = () => observer.next({\n                            type: HttpEventType.DownloadProgress,\n                            total: contentLength ? +contentLength : undefined,\n                            loaded: receivedLength,\n                            partialText,\n                        });\n                        reqZone ? reqZone.run(reportProgress) : reportProgress();\n                    }\n                }\n            });\n            // Combine all chunks.\n            const chunksAll = this.concatChunks(chunks, receivedLength);\n            try {\n                body = this.parseBody(request, chunksAll);\n            }\n            catch (error) {\n                // Body loading or parsing failed\n                observer.error(new HttpErrorResponse({\n                    error,\n                    headers: new HttpHeaders(response.headers),\n                    status: response.status,\n                    statusText: response.statusText,\n                    url: getResponseUrl$1(response) ?? request.urlWithParams,\n                }));\n                return;\n            }\n        }\n        // Same behavior as the XhrBackend\n        if (status === 0) {\n            status = body ? 200 /* HttpStatusCode.Ok */ : 0;\n        }\n        // ok determines whether the response will be transmitted on the event or\n        // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n        // but a successful status code can still result in an error if the user\n        // asked for JSON data and the body cannot be parsed as such.\n        const ok = status >= 200 && status < 300;\n        if (ok) {\n            observer.next(new HttpResponse({\n                body,\n                headers,\n                status,\n                statusText,\n                url,\n            }));\n            // The full body has been received and delivered, no further events\n            // are possible. This request is complete.\n            observer.complete();\n        }\n        else {\n            observer.error(new HttpErrorResponse({\n                error: body,\n                headers,\n                status,\n                statusText,\n                url,\n            }));\n        }\n    }\n    parseBody(request, binContent) {\n        switch (request.responseType) {\n            case 'json':\n                // stripping the XSSI when present\n                const text = new TextDecoder().decode(binContent).replace(XSSI_PREFIX$1, '');\n                return text === '' ? null : JSON.parse(text);\n            case 'text':\n                return new TextDecoder().decode(binContent);\n            case 'blob':\n                return new Blob([binContent]);\n            case 'arraybuffer':\n                return binContent.buffer;\n        }\n    }\n    createRequestInit(req) {\n        // We could share some of this logic with the XhrBackend\n        const headers = {};\n        const credentials = req.withCredentials ? 'include' : undefined;\n        // Setting all the requested headers.\n        req.headers.forEach((name, values) => (headers[name] = values.join(',')));\n        // Add an Accept header if one isn't present already.\n        headers['Accept'] ??= 'application/json, text/plain, */*';\n        // Auto-detect the Content-Type header if one isn't present already.\n        if (!headers['Content-Type']) {\n            const detectedType = req.detectContentTypeHeader();\n            // Sometimes Content-Type detection fails.\n            if (detectedType !== null) {\n                headers['Content-Type'] = detectedType;\n            }\n        }\n        return {\n            body: req.serializeBody(),\n            method: req.method,\n            headers,\n            credentials,\n        };\n    }\n    concatChunks(chunks, totalLength) {\n        const chunksAll = new Uint8Array(totalLength);\n        let position = 0;\n        for (const chunk of chunks) {\n            chunksAll.set(chunk, position);\n            position += chunk.length;\n        }\n        return chunksAll;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: FetchBackend, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: FetchBackend }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: FetchBackend, decorators: [{\n            type: Injectable\n        }] });\n/**\n * Abstract class to provide a mocked implementation of `fetch()`\n */\nclass FetchFactory {\n}\nfunction noop() { }\n/**\n * Zone.js treats a rejected promise that has not yet been awaited\n * as an unhandled error. This function adds a noop `.then` to make\n * sure that Zone.js doesn't throw an error if the Promise is rejected\n * synchronously.\n */\nfunction silenceSuperfluousUnhandledPromiseRejection(promise) {\n    promise.then(noop, noop);\n}\n\nfunction interceptorChainEndFn(req, finalHandlerFn) {\n    return finalHandlerFn(req);\n}\n/**\n * Constructs a `ChainedInterceptorFn` which adapts a legacy `HttpInterceptor` to the\n * `ChainedInterceptorFn` interface.\n */\nfunction adaptLegacyInterceptorToChain(chainTailFn, interceptor) {\n    return (initialRequest, finalHandlerFn) => interceptor.intercept(initialRequest, {\n        handle: (downstreamRequest) => chainTailFn(downstreamRequest, finalHandlerFn),\n    });\n}\n/**\n * Constructs a `ChainedInterceptorFn` which wraps and invokes a functional interceptor in the given\n * injector.\n */\nfunction chainedInterceptorFn(chainTailFn, interceptorFn, injector) {\n    // clang-format off\n    return (initialRequest, finalHandlerFn) => injector.runInContext(() => interceptorFn(initialRequest, downstreamRequest => chainTailFn(downstreamRequest, finalHandlerFn)));\n    // clang-format on\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nconst HTTP_INTERCEPTORS = new InjectionToken(ngDevMode ? 'HTTP_INTERCEPTORS' : '');\n/**\n * A multi-provided token of `HttpInterceptorFn`s.\n */\nconst HTTP_INTERCEPTOR_FNS = new InjectionToken(ngDevMode ? 'HTTP_INTERCEPTOR_FNS' : '');\n/**\n * A multi-provided token of `HttpInterceptorFn`s that are only set in root.\n */\nconst HTTP_ROOT_INTERCEPTOR_FNS = new InjectionToken(ngDevMode ? 'HTTP_ROOT_INTERCEPTOR_FNS' : '');\n/**\n * Creates an `HttpInterceptorFn` which lazily initializes an interceptor chain from the legacy\n * class-based interceptors and runs the request through it.\n */\nfunction legacyInterceptorFnFactory() {\n    let chain = null;\n    return (req, handler) => {\n        if (chain === null) {\n            const interceptors = inject(HTTP_INTERCEPTORS, { optional: true }) ?? [];\n            // Note: interceptors are wrapped right-to-left so that final execution order is\n            // left-to-right. That is, if `interceptors` is the array `[a, b, c]`, we want to\n            // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n            // out.\n            chain = interceptors.reduceRight(adaptLegacyInterceptorToChain, interceptorChainEndFn);\n        }\n        const pendingTasks = inject(ɵInitialRenderPendingTasks);\n        const taskId = pendingTasks.add();\n        return chain(req, handler).pipe(finalize(() => pendingTasks.remove(taskId)));\n    };\n}\nclass HttpInterceptorHandler extends HttpHandler {\n    constructor(backend, injector) {\n        super();\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n        this.pendingTasks = inject(ɵInitialRenderPendingTasks);\n    }\n    handle(initialRequest) {\n        if (this.chain === null) {\n            const dedupedInterceptorFns = Array.from(new Set([\n                ...this.injector.get(HTTP_INTERCEPTOR_FNS),\n                ...this.injector.get(HTTP_ROOT_INTERCEPTOR_FNS, []),\n            ]));\n            // Note: interceptors are wrapped right-to-left so that final execution order is\n            // left-to-right. That is, if `dedupedInterceptorFns` is the array `[a, b, c]`, we want to\n            // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n            // out.\n            this.chain = dedupedInterceptorFns.reduceRight((nextSequencedFn, interceptorFn) => chainedInterceptorFn(nextSequencedFn, interceptorFn, this.injector), interceptorChainEndFn);\n        }\n        const taskId = this.pendingTasks.add();\n        return this.chain(initialRequest, downstreamRequest => this.backend.handle(downstreamRequest))\n            .pipe(finalize(() => this.pendingTasks.remove(taskId)));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: HttpInterceptorHandler, deps: [{ token: HttpBackend }, { token: i0.EnvironmentInjector }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: HttpInterceptorHandler }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: HttpInterceptorHandler, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: HttpBackend }, { type: i0.EnvironmentInjector }]; } });\n\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId = 0;\n/**\n * When a pending <script> is unsubscribed we'll move it to this document, so it won't be\n * executed.\n */\nlet foreignDocument;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n// Error text given when a request is passed to the JsonpClientBackend that has\n// headers set\nconst JSONP_ERR_HEADERS_NOT_SUPPORTED = 'JSONP requests do not support headers.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nclass JsonpCallbackContext {\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see {@link HttpHandler}\n * @see {@link HttpXhrBackend}\n *\n * @publicApi\n */\nclass JsonpClientBackend {\n    constructor(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n        /**\n         * A resolved promise that can be used to schedule microtasks in the event handlers.\n         */\n        this.resolvedPromise = Promise.resolve();\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     */\n    nextCallback() {\n        return `ng_jsonp_callback_${nextRequestId++}`;\n    }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     *\n     */\n    handle(req) {\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Check the request headers. JSONP doesn't support headers and\n        // cannot set any that were supplied.\n        if (req.headers.keys().length > 0) {\n            throw new Error(JSONP_ERR_HEADERS_NOT_SUPPORTED);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable((observer) => {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            const callback = this.nextCallback();\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n            // Construct the <script> tag and point it at the URL.\n            const node = this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            let body = null;\n            // Whether the response callback has been called.\n            let finished = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            this.callbackMap[callback] = (data) => {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete this.callbackMap[callback];\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            };\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            const cleanup = () => {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete this.callbackMap[callback];\n            };\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            const onLoad = (event) => {\n                // We wrap it in an extra Promise, to ensure the microtask\n                // is scheduled after the loaded endpoint has executed any potential microtask itself,\n                // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n                this.resolvedPromise.then(() => {\n                    // Cleanup the page.\n                    cleanup();\n                    // Check whether the response callback has run.\n                    if (!finished) {\n                        // It hasn't, something went wrong with the request. Return an error via\n                        // the Observable error path. All JSONP errors have status 0.\n                        observer.error(new HttpErrorResponse({\n                            url,\n                            status: 0,\n                            statusText: 'JSONP Error',\n                            error: new Error(JSONP_ERR_NO_CALLBACK),\n                        }));\n                        return;\n                    }\n                    // Success. body either contains the response body or null if none was\n                    // returned.\n                    observer.next(new HttpResponse({\n                        body,\n                        status: 200 /* HttpStatusCode.Ok */,\n                        statusText: 'OK',\n                        url,\n                    }));\n                    // Complete the stream, the response is over.\n                    observer.complete();\n                });\n            };\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            const onError = (error) => {\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error,\n                    status: 0,\n                    statusText: 'JSONP Error',\n                    url,\n                }));\n            };\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return () => {\n                if (!finished) {\n                    this.removeListeners(node);\n                }\n                // And finally, clean up the page.\n                cleanup();\n            };\n        });\n    }\n    removeListeners(script) {\n        // Issue #34818\n        // Changing <script>'s ownerDocument will prevent it from execution.\n        // https://html.spec.whatwg.org/multipage/scripting.html#execute-the-script-block\n        if (!foreignDocument) {\n            foreignDocument = this.document.implementation.createHTMLDocument();\n        }\n        foreignDocument.adoptNode(script);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: JsonpClientBackend, deps: [{ token: JsonpCallbackContext }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: JsonpClientBackend }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: JsonpClientBackend, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: JsonpCallbackContext }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n/**\n * Identifies requests with the method JSONP and shifts them to the `JsonpClientBackend`.\n */\nfunction jsonpInterceptorFn(req, next) {\n    if (req.method === 'JSONP') {\n        return inject(JsonpClientBackend).handle(req);\n    }\n    // Fall through for normal HTTP requests.\n    return next(req);\n}\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see {@link HttpInterceptor}\n *\n * @publicApi\n */\nclass JsonpInterceptor {\n    constructor(injector) {\n        this.injector = injector;\n    }\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param initialRequest The outgoing request object to handle.\n     * @param next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @returns An observable of the event stream.\n     */\n    intercept(initialRequest, next) {\n        return this.injector.runInContext(() => jsonpInterceptorFn(initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: JsonpInterceptor, deps: [{ token: i0.EnvironmentInjector }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: JsonpInterceptor }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: JsonpInterceptor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.EnvironmentInjector }]; } });\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see {@link HttpHandler}\n * @see {@link JsonpClientBackend}\n *\n * @publicApi\n */\nclass HttpXhrBackend {\n    constructor(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     */\n    handle(req) {\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the HttpClientJsonpModule\n        if (req.method === 'JSONP') {\n            throw new ɵRuntimeError(-2800 /* RuntimeErrorCode.MISSING_JSONP_MODULE */, (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                `Cannot make a JSONP request without JSONP support. To fix the problem, either add the \\`withJsonpSupport()\\` call (if \\`provideHttpClient()\\` is used) or import the \\`HttpClientJsonpModule\\` in the root NgModule.`);\n        }\n        // Check whether this factory has a special function to load an XHR implementation\n        // for various non-browser environments. We currently limit it to only `ServerXhr`\n        // class, which needs to load an XHR implementation.\n        const xhrFactory = this.xhrFactory;\n        const source = xhrFactory.ɵloadImpl ? from(xhrFactory.ɵloadImpl()) : of(null);\n        return source.pipe(switchMap(() => {\n            // Everything happens on Observable subscription.\n            return new Observable((observer) => {\n                // Start by setting up the XHR object with request method, URL, and withCredentials\n                // flag.\n                const xhr = xhrFactory.build();\n                xhr.open(req.method, req.urlWithParams);\n                if (req.withCredentials) {\n                    xhr.withCredentials = true;\n                }\n                // Add all the requested headers.\n                req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n                // Add an Accept header if one isn't present already.\n                if (!req.headers.has('Accept')) {\n                    xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n                }\n                // Auto-detect the Content-Type header if one isn't present already.\n                if (!req.headers.has('Content-Type')) {\n                    const detectedType = req.detectContentTypeHeader();\n                    // Sometimes Content-Type detection fails.\n                    if (detectedType !== null) {\n                        xhr.setRequestHeader('Content-Type', detectedType);\n                    }\n                }\n                // Set the responseType if one was requested.\n                if (req.responseType) {\n                    const responseType = req.responseType.toLowerCase();\n                    // JSON responses need to be processed as text. This is because if the server\n                    // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                    // xhr.response will be null, and xhr.responseText cannot be accessed to\n                    // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                    // is parsed by first requesting text and then applying JSON.parse.\n                    xhr.responseType = ((responseType !== 'json') ? responseType : 'text');\n                }\n                // Serialize the request body if one is present. If not, this will be set to null.\n                const reqBody = req.serializeBody();\n                // If progress events are enabled, response headers will be delivered\n                // in two events - the HttpHeaderResponse event and the full HttpResponse\n                // event. However, since response headers don't change in between these\n                // two events, it doesn't make sense to parse them twice. So headerResponse\n                // caches the data extracted from the response whenever it's first parsed,\n                // to ensure parsing isn't duplicated.\n                let headerResponse = null;\n                // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n                // state, and memoizes it into headerResponse.\n                const partialFromXhr = () => {\n                    if (headerResponse !== null) {\n                        return headerResponse;\n                    }\n                    const statusText = xhr.statusText || 'OK';\n                    // Parse headers from XMLHttpRequest - this step is lazy.\n                    const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                    // Read the response URL from the XMLHttpResponse instance and fall back on the\n                    // request URL.\n                    const url = getResponseUrl(xhr) || req.url;\n                    // Construct the HttpHeaderResponse and memoize it.\n                    headerResponse =\n                        new HttpHeaderResponse({ headers, status: xhr.status, statusText, url });\n                    return headerResponse;\n                };\n                // Next, a few closures are defined for the various events which XMLHttpRequest can\n                // emit. This allows them to be unregistered as event listeners later.\n                // First up is the load event, which represents a response being fully available.\n                const onLoad = () => {\n                    // Read response state from the memoized partial data.\n                    let { headers, status, statusText, url } = partialFromXhr();\n                    // The body will be read out if present.\n                    let body = null;\n                    if (status !== 204 /* HttpStatusCode.NoContent */) {\n                        // Use XMLHttpRequest.response if set, responseText otherwise.\n                        body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                    }\n                    // Normalize another potential bug (this one comes from CORS).\n                    if (status === 0) {\n                        status = !!body ? 200 /* HttpStatusCode.Ok */ : 0;\n                    }\n                    // ok determines whether the response will be transmitted on the event or\n                    // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                    // but a successful status code can still result in an error if the user\n                    // asked for JSON data and the body cannot be parsed as such.\n                    let ok = status >= 200 && status < 300;\n                    // Check whether the body needs to be parsed as JSON (in many cases the browser\n                    // will have done that already).\n                    if (req.responseType === 'json' && typeof body === 'string') {\n                        // Save the original body, before attempting XSSI prefix stripping.\n                        const originalBody = body;\n                        body = body.replace(XSSI_PREFIX, '');\n                        try {\n                            // Attempt the parse. If it fails, a parse error should be delivered to the\n                            // user.\n                            body = body !== '' ? JSON.parse(body) : null;\n                        }\n                        catch (error) {\n                            // Since the JSON.parse failed, it's reasonable to assume this might not have\n                            // been a JSON response. Restore the original body (including any XSSI prefix)\n                            // to deliver a better error response.\n                            body = originalBody;\n                            // If this was an error request to begin with, leave it as a string, it\n                            // probably just isn't JSON. Otherwise, deliver the parsing error to the user.\n                            if (ok) {\n                                // Even though the response status was 2xx, this is still an error.\n                                ok = false;\n                                // The parse error contains the text of the body that failed to parse.\n                                body = { error, text: body };\n                            }\n                        }\n                    }\n                    if (ok) {\n                        // A successful response is delivered on the event stream.\n                        observer.next(new HttpResponse({\n                            body,\n                            headers,\n                            status,\n                            statusText,\n                            url: url || undefined,\n                        }));\n                        // The full body has been received and delivered, no further events\n                        // are possible. This request is complete.\n                        observer.complete();\n                    }\n                    else {\n                        // An unsuccessful request is delivered on the error channel.\n                        observer.error(new HttpErrorResponse({\n                            // The error in this case is the response body (error from the server).\n                            error: body,\n                            headers,\n                            status,\n                            statusText,\n                            url: url || undefined,\n                        }));\n                    }\n                };\n                // The onError callback is called when something goes wrong at the network level.\n                // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n                // transmitted on the error channel.\n                const onError = (error) => {\n                    const { url } = partialFromXhr();\n                    const res = new HttpErrorResponse({\n                        error,\n                        status: xhr.status || 0,\n                        statusText: xhr.statusText || 'Unknown Error',\n                        url: url || undefined,\n                    });\n                    observer.error(res);\n                };\n                // The sentHeaders flag tracks whether the HttpResponseHeaders event\n                // has been sent on the stream. This is necessary to track if progress\n                // is enabled since the event will be sent on only the first download\n                // progress event.\n                let sentHeaders = false;\n                // The download progress event handler, which is only registered if\n                // progress events are enabled.\n                const onDownProgress = (event) => {\n                    // Send the HttpResponseHeaders event if it hasn't been sent already.\n                    if (!sentHeaders) {\n                        observer.next(partialFromXhr());\n                        sentHeaders = true;\n                    }\n                    // Start building the download progress event to deliver on the response\n                    // event stream.\n                    let progressEvent = {\n                        type: HttpEventType.DownloadProgress,\n                        loaded: event.loaded,\n                    };\n                    // Set the total number of bytes in the event if it's available.\n                    if (event.lengthComputable) {\n                        progressEvent.total = event.total;\n                    }\n                    // If the request was for text content and a partial response is\n                    // available on XMLHttpRequest, include it in the progress event\n                    // to allow for streaming reads.\n                    if (req.responseType === 'text' && !!xhr.responseText) {\n                        progressEvent.partialText = xhr.responseText;\n                    }\n                    // Finally, fire the event.\n                    observer.next(progressEvent);\n                };\n                // The upload progress event handler, which is only registered if\n                // progress events are enabled.\n                const onUpProgress = (event) => {\n                    // Upload progress events are simpler. Begin building the progress\n                    // event.\n                    let progress = {\n                        type: HttpEventType.UploadProgress,\n                        loaded: event.loaded,\n                    };\n                    // If the total number of bytes being uploaded is available, include\n                    // it.\n                    if (event.lengthComputable) {\n                        progress.total = event.total;\n                    }\n                    // Send the event.\n                    observer.next(progress);\n                };\n                // By default, register for load and error events.\n                xhr.addEventListener('load', onLoad);\n                xhr.addEventListener('error', onError);\n                xhr.addEventListener('timeout', onError);\n                xhr.addEventListener('abort', onError);\n                // Progress events are only enabled if requested.\n                if (req.reportProgress) {\n                    // Download progress is always enabled if requested.\n                    xhr.addEventListener('progress', onDownProgress);\n                    // Upload progress depends on whether there is a body to upload.\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.addEventListener('progress', onUpProgress);\n                    }\n                }\n                // Fire the request, and notify the event stream that it was fired.\n                xhr.send(reqBody);\n                observer.next({ type: HttpEventType.Sent });\n                // This is the return from the Observable function, which is the\n                // request cancellation handler.\n                return () => {\n                    // On a cancellation, remove all registered event listeners.\n                    xhr.removeEventListener('error', onError);\n                    xhr.removeEventListener('abort', onError);\n                    xhr.removeEventListener('load', onLoad);\n                    xhr.removeEventListener('timeout', onError);\n                    if (req.reportProgress) {\n                        xhr.removeEventListener('progress', onDownProgress);\n                        if (reqBody !== null && xhr.upload) {\n                            xhr.upload.removeEventListener('progress', onUpProgress);\n                        }\n                    }\n                    // Finally, abort the in-flight request.\n                    if (xhr.readyState !== xhr.DONE) {\n                        xhr.abort();\n                    }\n                };\n            });\n        }));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: HttpXhrBackend, deps: [{ token: i1.XhrFactory }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: HttpXhrBackend }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: HttpXhrBackend, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.XhrFactory }]; } });\n\nconst XSRF_ENABLED = new InjectionToken('XSRF_ENABLED');\nconst XSRF_DEFAULT_COOKIE_NAME = 'XSRF-TOKEN';\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME', {\n    providedIn: 'root',\n    factory: () => XSRF_DEFAULT_COOKIE_NAME,\n});\nconst XSRF_DEFAULT_HEADER_NAME = 'X-XSRF-TOKEN';\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME', {\n    providedIn: 'root',\n    factory: () => XSRF_DEFAULT_HEADER_NAME,\n});\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nclass HttpXsrfTokenExtractor {\n}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nclass HttpXsrfCookieExtractor {\n    constructor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * @internal for testing\n         */\n        this.parseCount = 0;\n    }\n    getToken() {\n        if (this.platform === 'server') {\n            return null;\n        }\n        const cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: HttpXsrfCookieExtractor, deps: [{ token: DOCUMENT }, { token: PLATFORM_ID }, { token: XSRF_COOKIE_NAME }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: HttpXsrfCookieExtractor }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: HttpXsrfCookieExtractor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [XSRF_COOKIE_NAME]\n                }] }]; } });\nfunction xsrfInterceptorFn(req, next) {\n    const lcUrl = req.url.toLowerCase();\n    // Skip both non-mutating requests and absolute URLs.\n    // Non-mutating requests don't require a token, and absolute URLs require special handling\n    // anyway as the cookie set\n    // on our origin is not the same as the token expected by another origin.\n    if (!inject(XSRF_ENABLED) || req.method === 'GET' || req.method === 'HEAD' ||\n        lcUrl.startsWith('http://') || lcUrl.startsWith('https://')) {\n        return next(req);\n    }\n    const token = inject(HttpXsrfTokenExtractor).getToken();\n    const headerName = inject(XSRF_HEADER_NAME);\n    // Be careful not to overwrite an existing header of the same name.\n    if (token != null && !req.headers.has(headerName)) {\n        req = req.clone({ headers: req.headers.set(headerName, token) });\n    }\n    return next(req);\n}\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nclass HttpXsrfInterceptor {\n    constructor(injector) {\n        this.injector = injector;\n    }\n    intercept(initialRequest, next) {\n        return this.injector.runInContext(() => xsrfInterceptorFn(initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: HttpXsrfInterceptor, deps: [{ token: i0.EnvironmentInjector }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: HttpXsrfInterceptor }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: HttpXsrfInterceptor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.EnvironmentInjector }]; } });\n\n/**\n * Identifies a particular kind of `HttpFeature`.\n *\n * @publicApi\n */\nvar HttpFeatureKind;\n(function (HttpFeatureKind) {\n    HttpFeatureKind[HttpFeatureKind[\"Interceptors\"] = 0] = \"Interceptors\";\n    HttpFeatureKind[HttpFeatureKind[\"LegacyInterceptors\"] = 1] = \"LegacyInterceptors\";\n    HttpFeatureKind[HttpFeatureKind[\"CustomXsrfConfiguration\"] = 2] = \"CustomXsrfConfiguration\";\n    HttpFeatureKind[HttpFeatureKind[\"NoXsrfProtection\"] = 3] = \"NoXsrfProtection\";\n    HttpFeatureKind[HttpFeatureKind[\"JsonpSupport\"] = 4] = \"JsonpSupport\";\n    HttpFeatureKind[HttpFeatureKind[\"RequestsMadeViaParent\"] = 5] = \"RequestsMadeViaParent\";\n    HttpFeatureKind[HttpFeatureKind[\"Fetch\"] = 6] = \"Fetch\";\n})(HttpFeatureKind || (HttpFeatureKind = {}));\nfunction makeHttpFeature(kind, providers) {\n    return {\n        ɵkind: kind,\n        ɵproviders: providers,\n    };\n}\n/**\n * Configures Angular's `HttpClient` service to be available for injection.\n *\n * By default, `HttpClient` will be configured for injection with its default options for XSRF\n * protection of outgoing requests. Additional configuration options can be provided by passing\n * feature functions to `provideHttpClient`. For example, HTTP interceptors can be added using the\n * `withInterceptors(...)` feature.\n *\n * @see {@link withInterceptors}\n * @see {@link withInterceptorsFromDi}\n * @see {@link withXsrfConfiguration}\n * @see {@link withNoXsrfProtection}\n * @see {@link withJsonpSupport}\n * @see {@link withRequestsMadeViaParent}\n * @see {@link withFetch}\n */\nfunction provideHttpClient(...features) {\n    if (ngDevMode) {\n        const featureKinds = new Set(features.map(f => f.ɵkind));\n        if (featureKinds.has(HttpFeatureKind.NoXsrfProtection) &&\n            featureKinds.has(HttpFeatureKind.CustomXsrfConfiguration)) {\n            throw new Error(ngDevMode ?\n                `Configuration error: found both withXsrfConfiguration() and withNoXsrfProtection() in the same call to provideHttpClient(), which is a contradiction.` :\n                '');\n        }\n    }\n    const providers = [\n        HttpClient,\n        HttpXhrBackend,\n        HttpInterceptorHandler,\n        { provide: HttpHandler, useExisting: HttpInterceptorHandler },\n        { provide: HttpBackend, useExisting: HttpXhrBackend },\n        {\n            provide: HTTP_INTERCEPTOR_FNS,\n            useValue: xsrfInterceptorFn,\n            multi: true,\n        },\n        { provide: XSRF_ENABLED, useValue: true },\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n    ];\n    for (const feature of features) {\n        providers.push(...feature.ɵproviders);\n    }\n    return makeEnvironmentProviders(providers);\n}\n/**\n * Adds one or more functional-style HTTP interceptors to the configuration of the `HttpClient`\n * instance.\n *\n * @see {@link HttpInterceptorFn}\n * @see {@link provideHttpClient}\n * @publicApi\n */\nfunction withInterceptors(interceptorFns) {\n    return makeHttpFeature(HttpFeatureKind.Interceptors, interceptorFns.map(interceptorFn => {\n        return {\n            provide: HTTP_INTERCEPTOR_FNS,\n            useValue: interceptorFn,\n            multi: true,\n        };\n    }));\n}\nconst LEGACY_INTERCEPTOR_FN = new InjectionToken('LEGACY_INTERCEPTOR_FN');\n/**\n * Includes class-based interceptors configured using a multi-provider in the current injector into\n * the configured `HttpClient` instance.\n *\n * Prefer `withInterceptors` and functional interceptors instead, as support for DI-provided\n * interceptors may be phased out in a later release.\n *\n * @see {@link HttpInterceptor}\n * @see {@link HTTP_INTERCEPTORS}\n * @see {@link provideHttpClient}\n */\nfunction withInterceptorsFromDi() {\n    // Note: the legacy interceptor function is provided here via an intermediate token\n    // (`LEGACY_INTERCEPTOR_FN`), using a pattern which guarantees that if these providers are\n    // included multiple times, all of the multi-provider entries will have the same instance of the\n    // interceptor function. That way, the `HttpINterceptorHandler` will dedup them and legacy\n    // interceptors will not run multiple times.\n    return makeHttpFeature(HttpFeatureKind.LegacyInterceptors, [\n        {\n            provide: LEGACY_INTERCEPTOR_FN,\n            useFactory: legacyInterceptorFnFactory,\n        },\n        {\n            provide: HTTP_INTERCEPTOR_FNS,\n            useExisting: LEGACY_INTERCEPTOR_FN,\n            multi: true,\n        }\n    ]);\n}\n/**\n * Customizes the XSRF protection for the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withNoXsrfProtection` feature.\n *\n * @see {@link provideHttpClient}\n */\nfunction withXsrfConfiguration({ cookieName, headerName }) {\n    const providers = [];\n    if (cookieName !== undefined) {\n        providers.push({ provide: XSRF_COOKIE_NAME, useValue: cookieName });\n    }\n    if (headerName !== undefined) {\n        providers.push({ provide: XSRF_HEADER_NAME, useValue: headerName });\n    }\n    return makeHttpFeature(HttpFeatureKind.CustomXsrfConfiguration, providers);\n}\n/**\n * Disables XSRF protection in the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withXsrfConfiguration` feature.\n *\n * @see {@link provideHttpClient}\n */\nfunction withNoXsrfProtection() {\n    return makeHttpFeature(HttpFeatureKind.NoXsrfProtection, [\n        {\n            provide: XSRF_ENABLED,\n            useValue: false,\n        },\n    ]);\n}\n/**\n * Add JSONP support to the configuration of the current `HttpClient` instance.\n *\n * @see {@link provideHttpClient}\n */\nfunction withJsonpSupport() {\n    return makeHttpFeature(HttpFeatureKind.JsonpSupport, [\n        JsonpClientBackend,\n        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n        { provide: HTTP_INTERCEPTOR_FNS, useValue: jsonpInterceptorFn, multi: true },\n    ]);\n}\n/**\n * Configures the current `HttpClient` instance to make requests via the parent injector's\n * `HttpClient` instead of directly.\n *\n * By default, `provideHttpClient` configures `HttpClient` in its injector to be an independent\n * instance. For example, even if `HttpClient` is configured in the parent injector with\n * one or more interceptors, they will not intercept requests made via this instance.\n *\n * With this option enabled, once the request has passed through the current injector's\n * interceptors, it will be delegated to the parent injector's `HttpClient` chain instead of\n * dispatched directly, and interceptors in the parent configuration will be applied to the request.\n *\n * If there are several `HttpClient` instances in the injector hierarchy, it's possible for\n * `withRequestsMadeViaParent` to be used at multiple levels, which will cause the request to\n * \"bubble up\" until either reaching the root level or an `HttpClient` which was not configured with\n * this option.\n *\n * @see {@link provideHttpClient}\n * @developerPreview\n */\nfunction withRequestsMadeViaParent() {\n    return makeHttpFeature(HttpFeatureKind.RequestsMadeViaParent, [\n        {\n            provide: HttpBackend,\n            useFactory: () => {\n                const handlerFromParent = inject(HttpHandler, { skipSelf: true, optional: true });\n                if (ngDevMode && handlerFromParent === null) {\n                    throw new Error('withRequestsMadeViaParent() can only be used when the parent injector also configures HttpClient');\n                }\n                return handlerFromParent;\n            },\n        },\n    ]);\n}\n/**\n * Configures the current `HttpClient` instance to make requests using the fetch API.\n *\n * This `FetchBackend` requires the support of the Fetch API which is available on all evergreen\n * browsers and on NodeJS from v18 onward.\n *\n * Note: The Fetch API doesn't support progress report on uploads.\n *\n * @publicApi\n * @developerPreview\n */\nfunction withFetch() {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && typeof fetch !== 'function') {\n        // TODO: Create a runtime error\n        // TODO: Use ENVIRONMENT_INITIALIZER to contextualize the error message (browser or server)\n        throw new Error('The `withFetch` feature of HttpClient requires the `fetch` API to be available. ' +\n            'If you run the code in a Node environment, make sure you use Node v18.10 or later.');\n    }\n    return makeHttpFeature(HttpFeatureKind.Fetch, [\n        FetchBackend,\n        { provide: HttpBackend, useExisting: FetchBackend },\n    ]);\n}\n\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\nclass HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     */\n    static disable() {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                withNoXsrfProtection().ɵproviders,\n            ],\n        };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     */\n    static withOptions(options = {}) {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: withXsrfConfiguration(options).ɵproviders,\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: HttpClientXsrfModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.2.10\", ngImport: i0, type: HttpClientXsrfModule }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: HttpClientXsrfModule, providers: [\n            HttpXsrfInterceptor,\n            { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n            { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n            withXsrfConfiguration({\n                cookieName: XSRF_DEFAULT_COOKIE_NAME,\n                headerName: XSRF_DEFAULT_HEADER_NAME,\n            }).ɵproviders,\n            { provide: XSRF_ENABLED, useValue: true },\n        ] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: HttpClientXsrfModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        HttpXsrfInterceptor,\n                        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                        withXsrfConfiguration({\n                            cookieName: XSRF_DEFAULT_COOKIE_NAME,\n                            headerName: XSRF_DEFAULT_HEADER_NAME,\n                        }).ɵproviders,\n                        { provide: XSRF_ENABLED, useValue: true },\n                    ],\n                }]\n        }] });\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nclass HttpClientModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: HttpClientModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.2.10\", ngImport: i0, type: HttpClientModule }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: HttpClientModule, providers: [\n            provideHttpClient(withInterceptorsFromDi()),\n        ] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: HttpClientModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    /**\n                     * Configures the [dependency injector](guide/glossary#injector) where it is imported\n                     * with supporting services for HTTP communications.\n                     */\n                    providers: [\n                        provideHttpClient(withInterceptorsFromDi()),\n                    ],\n                }]\n        }] });\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * @publicApi\n */\nclass HttpClientJsonpModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: HttpClientJsonpModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.2.10\", ngImport: i0, type: HttpClientJsonpModule }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: HttpClientJsonpModule, providers: [\n            withJsonpSupport().ɵproviders,\n        ] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: HttpClientJsonpModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        withJsonpSupport().ɵproviders,\n                    ],\n                }]\n        }] });\n\nconst CACHE_STATE = new InjectionToken(ngDevMode ? 'HTTP_TRANSFER_STATE_CACHE_STATE' : '');\n/**\n * A list of allowed HTTP methods to cache.\n */\nconst ALLOWED_METHODS = ['GET', 'HEAD'];\nfunction transferCacheInterceptorFn(req, next) {\n    const { isCacheActive } = inject(CACHE_STATE);\n    // Stop using the cache if the application has stabilized, indicating initial rendering\n    // is complete.\n    if (!isCacheActive || !ALLOWED_METHODS.includes(req.method)) {\n        // Cache is no longer active or method is not HEAD or GET.\n        // Pass the request through.\n        return next(req);\n    }\n    const transferState = inject(TransferState);\n    const storeKey = makeCacheKey(req);\n    const response = transferState.get(storeKey, null);\n    if (response) {\n        // Request found in cache. Respond using it.\n        let body = response.body;\n        switch (response.responseType) {\n            case 'arraybuffer':\n                body = new TextEncoder().encode(response.body).buffer;\n                break;\n            case 'blob':\n                body = new Blob([response.body]);\n                break;\n        }\n        return of(new HttpResponse({\n            body,\n            headers: new HttpHeaders(response.headers),\n            status: response.status,\n            statusText: response.statusText,\n            url: response.url,\n        }));\n    }\n    // Request not found in cache. Make the request and cache it.\n    return next(req).pipe(tap((event) => {\n        if (event instanceof HttpResponse) {\n            transferState.set(storeKey, {\n                body: event.body,\n                headers: getHeadersMap(event.headers),\n                status: event.status,\n                statusText: event.statusText,\n                url: event.url || '',\n                responseType: req.responseType,\n            });\n        }\n    }));\n}\nfunction getHeadersMap(headers) {\n    const headersMap = {};\n    for (const key of headers.keys()) {\n        const values = headers.getAll(key);\n        if (values !== null) {\n            headersMap[key] = values;\n        }\n    }\n    return headersMap;\n}\nfunction makeCacheKey(request) {\n    // make the params encoded same as a url so it's easy to identify\n    const { params, method, responseType, url } = request;\n    const encodedParams = params.keys().sort().map((k) => `${k}=${params.getAll(k)}`).join('&');\n    const key = method + '.' + responseType + '.' + url + '?' + encodedParams;\n    const hash = generateHash(key);\n    return makeStateKey(hash);\n}\n/**\n * A method that returns a hash representation of a string using a variant of DJB2 hash\n * algorithm.\n *\n * This is the same hashing logic that is used to generate component ids.\n */\nfunction generateHash(value) {\n    let hash = 0;\n    for (const char of value) {\n        hash = Math.imul(31, hash) + char.charCodeAt(0) << 0;\n    }\n    // Force positive number hash.\n    // 2147483647 = equivalent of Integer.MAX_VALUE.\n    hash += 2147483647 + 1;\n    return hash.toString();\n}\n/**\n * Returns the DI providers needed to enable HTTP transfer cache.\n *\n * By default, when using server rendering, requests are performed twice: once on the server and\n * other one on the browser.\n *\n * When these providers are added, requests performed on the server are cached and reused during the\n * bootstrapping of the application in the browser thus avoiding duplicate requests and reducing\n * load time.\n *\n */\nfunction withHttpTransferCache() {\n    return [\n        {\n            provide: CACHE_STATE,\n            useFactory: () => {\n                inject(ɵENABLED_SSR_FEATURES).add('httpcache');\n                return { isCacheActive: true };\n            }\n        },\n        {\n            provide: HTTP_ROOT_INTERCEPTOR_FNS,\n            useValue: transferCacheInterceptorFn,\n            multi: true,\n            deps: [TransferState, CACHE_STATE]\n        },\n        {\n            provide: APP_BOOTSTRAP_LISTENER,\n            multi: true,\n            useFactory: () => {\n                const appRef = inject(ApplicationRef);\n                const cacheState = inject(CACHE_STATE);\n                return () => {\n                    appRef.isStable.pipe(first((isStable) => isStable)).toPromise().then(() => {\n                        cacheState.isCacheActive = false;\n                    });\n                };\n            }\n        }\n    ];\n}\n\n// This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FetchBackend, HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpErrorResponse, HttpEventType, HttpFeatureKind, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, provideHttpClient, withFetch, withInterceptors, withInterceptorsFromDi, withJsonpSupport, withNoXsrfProtection, withRequestsMadeViaParent, withXsrfConfiguration, HttpInterceptorHandler as ɵHttpInterceptingHandler, HttpInterceptorHandler as ɵHttpInterceptorHandler, withHttpTransferCache as ɵwithHttpTransferCache };\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}"],"x_google_ignoreList":[0,1]}