{"version":3,"file":"57.434cb88ede9b6f93.js","mappings":"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","names":["getCoroiu","window","coroiu","i0","ExistenceCheckerComponent","constructor","this","passkeyProviderDetected","credentialDetected","ngOnInit","checkPasskeyProvider","checkCredentials","_this","_asyncToGenerator","nativeCalled","webauthn","interceptors","get","_ref","options","native","bind","credentialsContainer","_x","apply","arguments","abortController","AbortController","navigator","credentials","publicKey","challenge","Uint8Array","signal","setTimeout","abort","undefined","createCredential","create","rp","name","user","id","displayName","authenticatorSelection","residentKey","pubKeyCredParams","type","alg","timeout","injectors","static","t","core","Xpm","selectors","standalone","features","decls","vars","consts","template","rf","ctx","ExistenceCheckerComponent_div_15_Template","ExistenceCheckerComponent_div_16_Template","ExistenceCheckerComponent_div_35_Template","ExistenceCheckerComponent_div_36_Template","ExistenceCheckerComponent_ng_container_37_Template","CommonModule","i1","MatCardModule","i2","MatButtonModule","i3","styles"],"sourceRoot":"webpack:///","sources":["./src/app/types/window-coroiu.ts","./src/app/pages/security/existence-checker/existence-checker.component.html","./src/app/pages/security/existence-checker/existence-checker.component.ts"],"sourcesContent":["declare global {\n  interface Window {\n    coroiu: WindowCoroiu;\n  }\n}\n\nexport interface WindowCoroiu {\n  webauthn: {\n    interceptors: {\n      get?: Window['navigator']['credentials']['get'];\n      create?: Window['navigator']['credentials']['get'];\n    };\n    injectors: {\n      get?: Window['navigator']['credentials']['get'];\n      create?: Window['navigator']['credentials']['get'];\n    };\n    native: {\n      readonly get: Window['navigator']['credentials']['get'];\n      readonly create: Window['navigator']['credentials']['get'];\n      readonly credentialsContainer: Window['navigator']['credentials'];\n    };\n  };\n}\n\nexport function getCoroiu(): WindowCoroiu {\n  return window.coroiu;\n}\n","<div class=\"page-container container-md\">\n  <h1>Credential existence checker</h1>\n  <p class=\"lead\">Passive and active techniques to scrape information</p>\n  Uses methods available to the page script to check if the user has a passkey\n  provider installed, and if that provider has a passkey for this site.\n\n  <div class=\"row align-items-stretch\">\n    <div class=\"col-md\">\n      <mat-card>\n        <mat-card-header>\n          <mat-card-title>Passkey provider</mat-card-title>\n          <mat-card-subtitle\n            >Does your browser have a passkey provider\n            installed?</mat-card-subtitle\n          >\n        </mat-card-header>\n        <mat-card-content>\n          <div\n            *ngIf=\"passkeyProviderDetected\"\n            class=\"detection-result text-success\"\n          >\n            Yes\n          </div>\n          <div\n            *ngIf=\"!passkeyProviderDetected\"\n            class=\"detection-result text-danger\"\n          >\n            No\n          </div>\n        </mat-card-content>\n      </mat-card>\n    </div>\n\n    <div class=\"col-md\">\n      <mat-card>\n        <mat-card-header>\n          <mat-card-title>Create credential</mat-card-title>\n          <mat-card-subtitle\n            >Use this to create credentials for testing</mat-card-subtitle\n          >\n        </mat-card-header>\n        <mat-card-actions>\n          <button mat-raised-button (click)=\"createCredential()\">\n            Create credential\n          </button>\n        </mat-card-actions>\n      </mat-card>\n    </div>\n\n    <div class=\"col-md\">\n      <mat-card>\n        <mat-card-header>\n          <mat-card-title>Existence</mat-card-title>\n          <mat-card-subtitle\n            >Does your passkey provider contain any\n            credentials?</mat-card-subtitle\n          >\n        </mat-card-header>\n        <mat-card-content>\n          <div\n            *ngIf=\"!passkeyProviderDetected\"\n            class=\"detection-result text-danger\"\n          >\n            Unknown\n          </div>\n\n          <div\n            *ngIf=\"passkeyProviderDetected && !credentialDetected\"\n            class=\"detection-result text-danger\"\n          >\n            No\n          </div>\n\n          <ng-container *ngIf=\"passkeyProviderDetected && credentialDetected\">\n            <div class=\"detection-result text-success\">Possibly</div>\n            Either your passkey provider contains a credential or your vault was\n            locked.\n          </ng-container>\n        </mat-card-content>\n        <mat-card-actions>\n          <button\n            mat-raised-button\n            [disabled]=\"!passkeyProviderDetected\"\n            (click)=\"checkCredentials()\"\n          >\n            Re-check credentials\n          </button>\n        </mat-card-actions>\n      </mat-card>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\n\nimport { getCoroiu } from '../../../types/window-coroiu';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  templateUrl: './existence-checker.component.html',\n  styleUrls: ['./existence-checker.component.scss'],\n  imports: [CommonModule, MatCardModule, MatButtonModule],\n  standalone: true,\n})\nexport class ExistenceCheckerComponent implements OnInit {\n  protected passkeyProviderDetected = false;\n  protected credentialDetected: boolean | null = null;\n\n  ngOnInit(): void {\n    this.passkeyProviderDetected = this.checkPasskeyProvider();\n    this.checkCredentials();\n  }\n\n  protected async checkCredentials(): Promise<void> {\n    if (!this.passkeyProviderDetected) {\n      return;\n    }\n\n    let nativeCalled = false;\n\n    (getCoroiu().webauthn.interceptors.get as any) = async (\n      options: CredentialRequestOptions\n    ) => {\n      nativeCalled = true;\n      // TypeScript doesn't know about abortController, because it's wrongly implemented in Bitwarden\n      const get = (getCoroiu().webauthn.native.get as any).bind(\n        getCoroiu().webauthn.native.credentialsContainer\n      );\n      return await get(options);\n    };\n\n    const abortController = new AbortController();\n    try {\n      (window.navigator.credentials.get as any)(\n        {\n          publicKey: {\n            challenge: new Uint8Array([1, 2, 3, 4, 5]),\n          },\n          signal: abortController.signal,\n        },\n        abortController\n      );\n    } catch {}\n\n    setTimeout(() => {\n      try {\n        this.credentialDetected = !nativeCalled;\n        abortController.abort();\n      } finally {\n        (getCoroiu().webauthn.interceptors.get as any) = undefined;\n      }\n    }, 500);\n  }\n\n  protected createCredential() {\n    window.navigator.credentials.create({\n      publicKey: {\n        rp: {\n          name: 'Coroiu',\n        },\n        user: {\n          id: new Uint8Array([1, 2, 3, 4, 5]),\n          name: 'Existence checker user',\n          displayName: 'Existence checker user',\n        },\n        authenticatorSelection: {\n          residentKey: 'required',\n        },\n        challenge: new Uint8Array([1, 2, 3, 4, 5]),\n        pubKeyCredParams: [\n          {\n            type: 'public-key',\n            alg: -7,\n          },\n        ],\n        timeout: 60000,\n      },\n    });\n  }\n\n  private checkPasskeyProvider(): boolean {\n    return (\n      window.navigator.credentials.get !== getCoroiu().webauthn.native.get &&\n      window.navigator.credentials.get !== getCoroiu().webauthn.injectors.get\n    );\n  }\n}\n"],"x_google_ignoreList":[]}