{"version":3,"file":"419.5a173c5b95c126b4.js","mappings":"gXAMA,MAAMA,GAA0B,CAAC,cAAe,kBAC1CC,GAAqB,CAAC,mBAAoB,uBAC1CC,GAAgB,CAAC,KAAM,OACtB,SAASC,EAAUC,EAAQC,EAAWC,EAASC,GAKlD,MAJIC,KAAWF,KACXC,EAAiBD,EACjBA,OAAUG,GAEVF,EACA,OAAOJ,EAAUC,EAAQC,EAAWC,GAASI,QAAKC,MAAiBJ,IAEvE,MAAOK,EAAKC,GA+BhB,SAASC,GAAcV,GACnB,SAAOI,KAAWJ,EAAOW,oBAAgB,EAAKP,KAAWJ,EAAOY,oBACpE,CAjC0BF,CAAcV,GAC9BH,GAAmBgB,IAAKC,GAAgBC,GAAYf,EAAOc,GAAYb,EAAWc,EAASb,IAwBrG,SAASc,GAAwBhB,GAC7B,SAAOI,KAAWJ,EAAOiB,eAAW,EAAKb,KAAWJ,EAAOkB,eAC/D,CAxBYF,CAAwBhB,GAClBJ,GAAwBiB,IAAIM,EAAwBnB,EAAQC,IAwB9E,SAASmB,GAA0BpB,GAC/B,SAAOI,KAAWJ,EAAOqB,MAAE,EAAKjB,KAAWJ,EAAOsB,IACtD,CAzBkBF,CAA0BpB,GACtBF,GAAce,IAAIM,EAAwBnB,EAAQC,IAClD,GAClB,IAAKO,MACGe,MAAYvB,GACZ,SAAOwB,MAAUC,GAAc1B,EAAU0B,EAAWxB,EAAWC,GAA/D,EAAuE,EAAEwB,MAAU1B,IAG3F,IAAKQ,EACD,MAAM,IAAImB,UAAU,wBAExB,OAAO,IAAIC,IAAYC,IACnB,MAAMd,EAAUA,IAAIe,IAASD,EAAWE,KAAK,EAAID,EAAKE,OAASF,EAAOA,EAAK,IAC3EtB,SAAIO,GACG,IAAMN,EAAOM,EAAO,EAEnC,CACA,SAASI,EAAwBnB,EAAQC,GACrC,OAAQa,GAAgBC,GAAYf,EAAOc,GAAYb,EAAWc,EACtE,wBCxCO,MAAMkB,EAAyB,CAClCC,SAASC,GACL,IAAIC,EAAUC,sBACVC,EAASC,qBACb,MAAQC,YAAaP,EACjBO,IACAJ,EAAUI,EAASH,sBACnBC,EAASE,EAASD,sBAEtB,MAAME,EAASL,EAASM,IACpBJ,OAASjC,EACT8B,EAASO,EAAS,GAEtB,OAAO,IAAIC,KAAa,IAAsDL,IAAOG,GACzF,EACAJ,yBAAyBP,GACrB,MAAQU,YAAaP,EACrB,OAA6DO,GAASH,uBAA0BA,0BAA0BP,EAC9H,EACAS,wBAAwBT,GACpB,MAAQU,YAAaP,EACrB,OAA6DO,GAASD,sBAAyBA,yBAAyBT,EAC5H,EACAU,cAAUnC,iBCtByB,ICDhC,MAAMuC,WAAgCC,IACzCC,MAAMC,GACFC,KAAKC,SAAU,EACf,MAAMC,EAAUF,KAAKG,WACrBH,KAAKG,gBAAa9C,EAClB,MAAQ+C,WAAYJ,KACpB,IAAIK,EACJN,EAASA,GAAUK,EAAQE,QAC3B,MACSD,EAAQN,EAAOQ,QAAQR,EAAOS,MAAOT,EAAOU,OAC7C,aAEEV,EAASK,EAAQ,KAAOL,EAAOW,KAAOR,GAAWE,EAAQE,SAEnE,GADAN,KAAKC,SAAU,EACXI,EAAO,CACP,MAAQN,EAASK,EAAQ,KAAOL,EAAOW,KAAOR,GAAWE,EAAQE,SAC7DP,EAAOY,cAEX,MAAMN,CACV,CACJ,GCnBG,MAAMO,WAA6BC,IACtCC,YAAYC,EAAWC,GACnBC,MAAMF,EAAWC,GACjBhB,KAAKe,UAAYA,EACjBf,KAAKgB,KAAOA,CAChB,CACAE,eAAeH,EAAWL,EAAID,EAAQ,GAClC,OAAc,OAAVA,GAAkBA,EAAQ,EACnBQ,MAAMC,eAAeH,EAAWL,EAAID,IAE/CM,EAAUX,QAAQe,KAAKnB,MAChBe,EAAUZ,aAAeY,EAAUZ,WAAalB,EAAuBI,sBAAsB,IAAM0B,EAAUjB,WAAMzC,KAC9H,CACA+D,eAAeL,EAAWL,EAAID,EAAQ,GAClC,IAAIY,EACJ,GAAa,MAATZ,EAAgBA,EAAQ,EAAIT,KAAKS,MAAQ,EACzC,OAAOQ,MAAMG,eAAeL,EAAWL,EAAID,GAE/C,MAAQL,WAAYW,EACV,MAANL,IAAsD,QAAtCW,EAAKjB,EAAQA,EAAQpB,OAAS,UAAuB,IAAPqC,OAAgB,EAASA,EAAGX,MAAQA,IAClGzB,EAAuBM,qBAAqBmB,GAC5CK,EAAUZ,gBAAa9C,EAG/B,IC1BJ,IACIiE,EADAC,GAAa,EAEjB,MAAMC,EAAgB,CAAC,EACvB,SAASC,EAAmBhC,GACxB,OAAIA,KAAU+B,WACHA,EAAc/B,IACd,EAGf,CACO,MAAMiC,GAAY,CACrBC,aAAaC,GACT,MAAMnC,EAAS8B,KACfC,SAAc/B,IAAU,EACnB6B,IACDA,EAAWO,QAAQC,WAEvBR,EAASS,KAAK,IAAMN,EAAmBhC,IAAWmC,KAC3CnC,CACX,EACAuC,eAAevC,GACXgC,EAAmBhC,EACvB,ICrBIkC,gBAAcK,mBAAmBN,GAC5BO,EAAoB,CAC7BN,gBAAgB7C,GACZ,MAAQU,YAAayC,EACrB,OAA6DzC,GAASmC,cAAiBA,OAAiB7C,EAC5G,EACAkD,eAAevC,GACX,MAAQD,YAAayC,EACrB,OAA6DzC,GAASwC,gBAAmBA,IAAgBvC,EAC7G,EACAD,cAAUnC,GCTe,ICDtB,MAAM6E,WAAsBrC,IAC/BC,MAAMC,GACFC,KAAKC,SAAU,EACf,MAAMC,EAAUF,KAAKG,WACrBH,KAAKG,gBAAa9C,EAClB,MAAQ+C,WAAYJ,KACpB,IAAIK,EACJN,EAASA,GAAUK,EAAQE,QAC3B,MACSD,EAAQN,EAAOQ,QAAQR,EAAOS,MAAOT,EAAOU,OAC7C,aAEEV,EAASK,EAAQ,KAAOL,EAAOW,KAAOR,GAAWE,EAAQE,SAEnE,GADAN,KAAKC,SAAU,EACXI,EAAO,CACP,MAAQN,EAASK,EAAQ,KAAOL,EAAOW,KAAOR,GAAWE,EAAQE,SAC7DP,EAAOY,cAEX,MAAMN,CACV,CACJ,GCnBG,MAAM8B,WAAmBtB,IAC5BC,YAAYC,EAAWC,GACnBC,MAAMF,EAAWC,GACjBhB,KAAKe,UAAYA,EACjBf,KAAKgB,KAAOA,CAChB,CACAE,eAAeH,EAAWL,EAAID,EAAQ,GAClC,OAAc,OAAVA,GAAkBA,EAAQ,EACnBQ,MAAMC,eAAeH,EAAWL,EAAID,IAE/CM,EAAUX,QAAQe,KAAKnB,MAChBe,EAAUZ,aAAeY,EAAUZ,WAAa8B,EAAkBN,aAAaZ,EAAUjB,MAAMsC,KAAKrB,OAAW1D,KAC1H,CACA+D,eAAeL,EAAWL,EAAID,EAAQ,GAClC,IAAIY,EACJ,GAAa,MAATZ,EAAgBA,EAAQ,EAAIT,KAAKS,MAAQ,EACzC,OAAOQ,MAAMG,eAAeL,EAAWL,EAAID,GAE/C,MAAQL,WAAYW,EACV,MAANL,IAAsD,QAAtCW,EAAKjB,EAAQA,EAAQpB,OAAS,UAAuB,IAAPqC,OAAgB,EAASA,EAAGX,MAAQA,IAClGuB,EAAkBD,eAAetB,GAC7BK,EAAUZ,aAAeO,IACzBK,EAAUZ,gBAAa9C,GAInC,oDCzBG,SAASgF,GAAUC,EAAUvB,EAAYwB,MAC5C,OCDG,SAASC,GAAMC,GAClB,SAAOC,MAAQ,CAACC,EAAQ9D,KACpB,IAAI+D,GAAW,EACXC,EAAY,KACZC,EAAqB,KACrBC,GAAa,EACjB,MAAMC,EAAcA,KAGhB,GAFwEF,GAAmBnC,cAC3FmC,EAAqB,KACjBF,EAAU,CACVA,GAAW,EACX,MAAMK,EAAQJ,EACdA,EAAY,KACZhE,EAAWE,KAAKkE,EACpB,CACAF,GAAclE,EAAWqE,UAAS,EAEhCC,EAAkBA,KACpBL,EAAqB,KACrBC,GAAclE,EAAWqE,UAAS,EAEtCP,EAAOS,aAAUC,MAAyBxE,EAAaoE,IACnDL,GAAW,EACXC,EAAYI,EACPH,MACDpE,MAAU+D,EAAiBQ,IAAQG,UAAWN,KAAqBO,MAAyBxE,EAAYmE,EAAaG,GAAiB,EAE3I,KACCJ,GAAa,IACXH,IAAaE,GAAsBA,EAAmBQ,SAAWzE,EAAWqE,UAAS,GACzF,EAEV,CD/BWV,CAAM,IEAV,SAASe,GAAMC,EAAU,EAAGC,EAAqB1C,EAAYwB,MAChE,IAAImB,GAAmB,EACvB,OAA2B,MAAvBD,KAAuB,EACnBE,MAAYF,GACZ1C,EAAY0C,EAGZC,EAAmBD,GAGpB,IAAI7E,IAAYC,IACnB,IAAI+E,ECfL,SAASC,GAAYZ,GACxB,OAAOA,aAAiBa,OAASC,MAAMd,EAC3C,CDakBY,CAAYL,IAAYA,EAAUzC,EAAUiD,MAAQR,EAC1DI,EAAM,IACNA,EAAM,GAEV,IAAIK,EAAI,EACR,OAAOlD,EAAU7B,SAAS,WACjBL,EAAWyE,SACZzE,EAAWE,KAAKkF,KACZ,GAAKP,EACL1D,KAAKd,cAAS7B,EAAWqG,GAGzB7E,EAAWqE,WAGvB,EAAGU,EAAG,EAEd,CF5BuBL,CAAMjB,EAAUvB,GACvC,gBI0NA,IAIMmD,GAAgB,MAAtB,MAAMA,EACFpD,YAAYqD,EAASC,EAAWC,GAC5BrE,KAAKmE,QAAUA,EACfnE,KAAKoE,UAAYA,EAEjBpE,KAAKsE,UAAY,IAAIC,IAErBvE,KAAKwE,oBAAsB,KAE3BxE,KAAKyE,eAAiB,EAKtBzE,KAAK0E,iBAAmB,IAAIC,IAC5B3E,KAAK4E,UAAYP,CACrB,CAMAQ,SAASC,GACA9E,KAAK0E,iBAAiBK,IAAID,IAC3B9E,KAAK0E,iBAAiBM,IAAIF,EAAYA,EAAWG,kBAAkB7B,UAAU,IAAMpD,KAAKsE,UAAUvF,KAAK+F,IAE/G,CAKAI,WAAWJ,GACP,MAAMK,EAAsBnF,KAAK0E,iBAAiBU,IAAIN,GAClDK,IACAA,EAAoBxE,cACpBX,KAAK0E,iBAAiBW,OAAOP,GAErC,CAWAQ,SAASC,EArDe,IAsDpB,OAAKvF,KAAKoE,UAAUoB,UAGb,IAAI5G,IAAY6G,IACdzF,KAAKwE,qBACNxE,KAAK0F,qBAIT,MAAMC,EAAeJ,EAAgB,EAC/BvF,KAAKsE,UAAUhH,KAAK+E,GAAUkD,IAAgBnC,UAAUqC,GACxDzF,KAAKsE,UAAUlB,UAAUqC,GAC/B,OAAAzF,KAAKyE,iBACE,KACHkB,EAAahF,cACbX,KAAKyE,iBACAzE,KAAKyE,gBACNzE,KAAK4F,uBAAsB,CAEnC,IACH,EAnBUC,QAoBf,CACAC,cACI9F,KAAK4F,wBACL5F,KAAK0E,iBAAiBqB,QAAQ,CAACC,EAAGC,IAAcjG,KAAKkF,WAAWe,IAChEjG,KAAKsE,UAAUpB,UACnB,CAOAgD,iBAAiBC,EAAqBZ,GAClC,MAAMa,EAAYpG,KAAKqG,4BAA4BF,GACnD,OAAOnG,KAAKsF,SAASC,GAAejI,QAAKgJ,MAAOtJ,IACpCA,GAAUoJ,EAAUG,QAAQvJ,IAAU,GAEtD,CAEAqJ,4BAA4BF,GACxB,MAAMK,EAAsB,GAC5B,OAAAxG,KAAK0E,iBAAiBqB,QAAQ,CAACU,EAAe3B,KACtC9E,KAAK0G,2BAA2B5B,EAAYqB,IAC5CK,EAAoBrF,KAAK2D,EAAU,GAGpC0B,CACX,CAEAG,aACI,OAAO3G,KAAK4E,UAAUgC,aAAeC,MACzC,CAEAH,2BAA2B5B,EAAYqB,GACnC,IAAIW,KAAUC,MAAcZ,GACxBa,EAAoBlC,EAAWmC,gBAAgBC,cAGnD,MACQJ,GAAWE,EACX,OAAO,QAELF,EAAUA,EAAQK,eAC5B,OAAO,CACX,CAEAzB,qBACI1F,KAAKwE,oBAAsBxE,KAAKmE,QAAQiD,kBAAkB,IAE/CrK,EADQiD,KAAK2G,aACItC,SAAU,UAAUjB,UAAU,IAAMpD,KAAKsE,UAAUvF,QAEnF,CAEA6G,wBACQ5F,KAAKwE,sBACLxE,KAAKwE,oBAAoB7D,cACzBX,KAAKwE,oBAAsB,KAEnC,CAAC6C,SACQrH,KAAKsH,UAAI,SAAAC,GAAA,WAAAA,GAAwFrD,GArKVsD,MAqK4CA,OArK5CA,MAqKkEC,MArKlED,MAqK0FE,KAAQ,KAA6DL,SACtPrH,KAAK2H,WAtKkFH,MAAE,CAAAI,MAsKY1D,EAAgB2D,QAAhB3D,EAAgBoD,UAAAQ,WAAc,SAC/I,OAnIK5D,CAAgB,KAqThB6D,GAAa,MAAnB,MAAMA,EACFjH,YAAYsD,EAAW4D,EAAQ3D,GAC3BrE,KAAKoE,UAAYA,EAEjBpE,KAAKiI,QAAU,IAAI1D,IAEnBvE,KAAKkI,gBAAmBC,IACpBnI,KAAKiI,QAAQlJ,KAAKoJ,EAAK,EAE3BnI,KAAK4E,UAAYP,EACjB2D,EAAOZ,kBAAkB,KACrB,GAAIhD,EAAUoB,UAAW,CACrB,MAAMqB,EAAS7G,KAAK2G,aAGpBE,EAAOlJ,iBAAiB,SAAUqC,KAAKkI,iBACvCrB,EAAOlJ,iBAAiB,oBAAqBqC,KAAKkI,gBACtD,CAGAlI,KAAKoI,SAAShF,UAAU,IAAOpD,KAAKqI,cAAgB,KAAK,EAEjE,CACAvC,cACI,GAAI9F,KAAKoE,UAAUoB,UAAW,CAC1B,MAAMqB,EAAS7G,KAAK2G,aACpBE,EAAOjJ,oBAAoB,SAAUoC,KAAKkI,iBAC1CrB,EAAOjJ,oBAAoB,oBAAqBoC,KAAKkI,gBACzD,CACAlI,KAAKiI,QAAQ/E,UACjB,CAEAoF,kBACStI,KAAKqI,eACNrI,KAAKuI,sBAET,MAAMC,EAAS,CAAEC,MAAOzI,KAAKqI,cAAcI,MAAOC,OAAQ1I,KAAKqI,cAAcK,QAE7E,OAAK1I,KAAKoE,UAAUoB,YAChBxF,KAAKqI,cAAgB,MAElBG,CACX,CAEAG,kBAUI,MAAMC,EAAiB5I,KAAK6I,6BACpBJ,QAAOC,UAAW1I,KAAKsI,kBAC/B,MAAO,CACHQ,IAAKF,EAAeE,IACpBC,KAAMH,EAAeG,KACrBC,OAAQJ,EAAeE,IAAMJ,EAC7BO,MAAOL,EAAeG,KAAON,EAC7BC,SACAD,QAER,CAEAI,4BAGI,IAAK7I,KAAKoE,UAAUoB,UAChB,MAAO,CAAEsD,IAAK,EAAGC,KAAM,GAQ3B,MAAM1E,EAAWrE,KAAK4E,UAChBiC,EAAS7G,KAAK2G,aACduC,EAAkB7E,EAAS6E,gBAC3BC,EAAeD,EAAgBE,wBAWrC,MAAO,CAAEN,KAVIK,EAAaL,KACtBzE,EAASgF,KAAKC,WACdzC,EAAO0C,SACPL,EAAgBI,WAChB,EAMUP,MALAI,EAAaJ,MACvB1E,EAASgF,KAAKG,YACd3C,EAAO4C,SACPP,EAAgBM,YAChB,EAER,CAMApB,OAAOsB,EAxGiB,IAyGpB,OAAOA,EAAe,EAAI1J,KAAKiI,QAAQ3K,KAAK+E,GAAUqH,IAAiB1J,KAAKiI,OAChF,CAEAtB,aACI,OAAO3G,KAAK4E,UAAUgC,aAAeC,MACzC,CAEA0B,sBACI,MAAM1B,EAAS7G,KAAK2G,aACpB3G,KAAKqI,cAAgBrI,KAAKoE,UAAUoB,UAC9B,CAAEiD,MAAO5B,EAAO8C,WAAYjB,OAAQ7B,EAAO+C,aAC3C,CAAEnB,MAAO,EAAGC,OAAQ,EAC9B,CAACrB,SACQrH,KAAKsH,UAAI,SAAAC,GAAA,WAAAA,GAAwFQ,GA1cVP,MA0cyCC,MA1czCD,MA0ciEA,OA1cjEA,MA0cuFE,KAAQ,KAA6DL,SACnPrH,KAAK2H,WA3ckFH,MAAE,CAAAI,MA2cYG,EAAaF,QAAbE,EAAaT,UAAAQ,WAAc,SAC5I,OAnHKC,CAAa,KA04Bb8B,EAAmB,MAAzB,MAAMA,EAAoBxC,SACbrH,KAAKsH,UAAI,SAAAC,GAAA,WAAAA,GAAwFsC,EAAmB,EAAkDxC,SACtKrH,KAAK8J,UAruCkFtC,MAAE,CAAAuC,KAquCSF,IAA0ExC,SAC5KrH,KAAKgK,UAtuCkFxC,MAAE,IAuuCrG,OAJKqC,CAAmB,KAenBI,GAAe,MAArB,MAAMA,EAAgB5C,SACTrH,KAAKsH,UAAI,SAAAC,GAAA,WAAAA,GAAwF0C,EAAe,EAAkD5C,SAClKrH,KAAK8J,UApvCkFtC,MAAE,CAAAuC,KAovCSE,IAQpE5C,SAC9BrH,KAAKgK,UA7vCkFxC,MAAE,CAAA0C,QAAA,CA6vCoCC,KAC9HN,EAAqBM,KAAYN,KAC5C,OAbKI,CAAe,8BCh6CrB,MAAMG,IAA0BC,UAIhC,MAAMC,GACFxJ,YAAYyJ,EAAgBlG,GACxBrE,KAAKuK,eAAiBA,EACtBvK,KAAKwK,oBAAsB,CAAE1B,IAAK,GAAIC,KAAM,IAC5C/I,KAAKyK,YAAa,EAClBzK,KAAK4E,UAAYP,CACrB,CAEAqG,SAAW,CAEXC,SACI,GAAI3K,KAAK4K,gBAAiB,CACtB,MAAMC,EAAO7K,KAAK4E,UAAUsE,gBAC5BlJ,KAAK8K,wBAA0B9K,KAAKuK,eAAe1B,4BAEnD7I,KAAKwK,oBAAoBzB,KAAO8B,EAAKE,MAAMhC,MAAQ,GACnD/I,KAAKwK,oBAAoB1B,IAAM+B,EAAKE,MAAMjC,KAAO,GAGjD+B,EAAKE,MAAMhC,QAAOiC,OAAqBhL,KAAK8K,wBAAwB/B,MACpE8B,EAAKE,MAAMjC,OAAMkC,OAAqBhL,KAAK8K,wBAAwBhC,KACnE+B,EAAKI,UAAUzN,IAAI,0BACnBwC,KAAKyK,YAAa,CACtB,CACJ,CAEAS,UACI,GAAIlL,KAAKyK,WAAY,CACjB,MAAMU,EAAOnL,KAAK4E,UAAUsE,gBAEtBkC,EAAYD,EAAKJ,MACjBM,EAFOrL,KAAK4E,UAAUyE,KAEL0B,MACjBO,EAA6BF,EAAUG,gBAAkB,GACzDC,EAA6BH,EAAUE,gBAAkB,GAC/DvL,KAAKyK,YAAa,EAClBW,EAAUrC,KAAO/I,KAAKwK,oBAAoBzB,KAC1CqC,EAAUtC,IAAM9I,KAAKwK,oBAAoB1B,IACzCqC,EAAKF,UAAUxN,OAAO,0BAMlB2M,KACAgB,EAAUG,eAAiBF,EAAUE,eAAiB,QAE1D1E,OAAO4E,OAAOzL,KAAK8K,wBAAwB/B,KAAM/I,KAAK8K,wBAAwBhC,KAC1EsB,KACAgB,EAAUG,eAAiBD,EAC3BD,EAAUE,eAAiBC,EAEnC,CACJ,CACAZ,gBAKI,GADa5K,KAAK4E,UAAUsE,gBACnB+B,UAAUS,SAAS,2BAA6B1L,KAAKyK,WAC1D,OAAO,EAEX,MAAMpB,EAAOrJ,KAAK4E,UAAUyE,KACtBsC,EAAW3L,KAAKuK,eAAejC,kBACrC,OAAOe,EAAKuC,aAAeD,EAASjD,QAAUW,EAAKwC,YAAcF,EAASlD,KAC9E,EAaJ,MAAMqD,GACFhL,YAAYiL,EAAmB5H,EAASoG,EAAgByB,GACpDhM,KAAK+L,kBAAoBA,EACzB/L,KAAKmE,QAAUA,EACfnE,KAAKuK,eAAiBA,EACtBvK,KAAKgM,QAAUA,EACfhM,KAAKiM,oBAAsB,KAE3BjM,KAAKkM,QAAU,KACXlM,KAAKkL,UACDlL,KAAKmM,YAAYC,eACjBpM,KAAKmE,QAAQkI,IAAI,IAAMrM,KAAKmM,YAAYG,SAAQ,CAG5D,CAEA5B,OAAO6B,GAIHvM,KAAKmM,YAAcI,CACvB,CAEA5B,SACI,GAAI3K,KAAKiM,oBACL,OAEJ,MAAMO,EAASxM,KAAK+L,kBAAkBzG,SAAS,GAAGhI,QAAKgJ,MAAOxB,IACjDA,IACJ9E,KAAKmM,YAAYM,eAAef,SAAS5G,EAAWmC,gBAAgBC,iBAEzElH,KAAKgM,SAAWhM,KAAKgM,QAAQU,WAAa1M,KAAKgM,QAAQU,UAAY,GACnE1M,KAAK2M,uBAAyB3M,KAAKuK,eAAe1B,4BAA4BC,IAC9E9I,KAAKiM,oBAAsBO,EAAOpJ,UAAU,KACxC,MAAMwF,EAAiB5I,KAAKuK,eAAe1B,4BAA4BC,IACnE8D,KAAKC,IAAIjE,EAAiB5I,KAAK2M,wBAA0B3M,KAAKgM,QAAQU,UACtE1M,KAAKkM,UAGLlM,KAAKmM,YAAYW,gBAAe,IAKxC9M,KAAKiM,oBAAsBO,EAAOpJ,UAAUpD,KAAKkM,QAEzD,CAEAhB,UACQlL,KAAKiM,sBACLjM,KAAKiM,oBAAoBtL,cACzBX,KAAKiM,oBAAsB,KAEnC,CACAK,SACItM,KAAKkL,UACLlL,KAAKmM,YAAc,IACvB,EAIJ,MAAMY,GAEFpC,SAAW,CAEXO,UAAY,CAEZR,SAAW,EAUf,SAASsC,EAA6BlG,EAASpC,GAC3C,OAAOA,EAAiBuI,KAAKC,GACJpG,EAAQkC,OAASkE,EAAgBpE,KACjChC,EAAQgC,IAAMoE,EAAgBlE,QAC/BlC,EAAQmC,MAAQiE,EAAgBnE,MAC/BjC,EAAQiC,KAAOmE,EAAgBjE,MAG5D,CAQA,SAASkE,GAA4BrG,EAASpC,GAC1C,OAAOA,EAAiBuI,KAAKG,GACJtG,EAAQgC,IAAMsE,EAAoBtE,KAClChC,EAAQkC,OAASoE,EAAoBpE,QACtClC,EAAQiC,KAAOqE,EAAoBrE,MAClCjC,EAAQmC,MAAQmE,EAAoBnE,MAGjE,CAKA,MAAMoE,GACFvM,YAAYiL,EAAmBxB,EAAgBpG,EAAS6H,GACpDhM,KAAK+L,kBAAoBA,EACzB/L,KAAKuK,eAAiBA,EACtBvK,KAAKmE,QAAUA,EACfnE,KAAKgM,QAAUA,EACfhM,KAAKiM,oBAAsB,IAC/B,CAEAvB,OAAO6B,GAIHvM,KAAKmM,YAAcI,CACvB,CAEA5B,SACS3K,KAAKiM,sBAENjM,KAAKiM,oBAAsBjM,KAAK+L,kBAAkBzG,SADjCtF,KAAKgM,QAAUhM,KAAKgM,QAAQsB,eAAiB,GACOlK,UAAU,KAG3E,GAFApD,KAAKmM,YAAYW,iBAEb9M,KAAKgM,SAAWhM,KAAKgM,QAAQuB,UAAW,CACxC,MAAMC,EAAcxN,KAAKmM,YAAYM,eAAerD,yBAC5CX,QAAOC,UAAW1I,KAAKuK,eAAejC,kBAI1C0E,EAA6BQ,EADb,CAAC,CAAE/E,QAAOC,SAAQM,OAAQN,EAAQO,MAAOR,EAAOK,IAAK,EAAGC,KAAM,OAE9E/I,KAAKkL,UACLlL,KAAKmE,QAAQkI,IAAI,IAAMrM,KAAKmM,YAAYG,UAEhD,IAGZ,CAEApB,UACQlL,KAAKiM,sBACLjM,KAAKiM,oBAAoBtL,cACzBX,KAAKiM,oBAAsB,KAEnC,CACAK,SACItM,KAAKkL,UACLlL,KAAKmM,YAAc,IACvB,EAGJ,IAMMsB,GAAqB,MAA3B,MAAMA,EACF3M,YAAYiL,EAAmBxB,EAAgBpG,EAASE,GACpDrE,KAAK+L,kBAAoBA,EACzB/L,KAAKuK,eAAiBA,EACtBvK,KAAKmE,QAAUA,EAEfnE,KAAK0N,KAAO,IAAM,IAAIX,GAKtB/M,KAAK2N,MAASC,GAAW,IAAI9B,GAAoB9L,KAAK+L,kBAAmB/L,KAAKmE,QAASnE,KAAKuK,eAAgBqD,GAE5G5N,KAAK6N,MAAQ,IAAM,IAAIvD,GAAoBtK,KAAKuK,eAAgBvK,KAAK4E,WAMrE5E,KAAK8N,WAAcF,GAAW,IAAIP,GAAyBrN,KAAK+L,kBAAmB/L,KAAKuK,eAAgBvK,KAAKmE,QAASyJ,GACtH5N,KAAK4E,UAAYP,CACrB,CAACgD,SACQrH,KAAKsH,UAAI,SAAAC,GAAA,WAAAA,GAAwFkG,GAAVjG,MAAiDC,IAAjDD,MAAiFC,IAAjFD,MAA8GA,OAA9GA,MAAoIE,MAAQ,EAA6CL,SAChRrH,KAAK2H,WADkFH,MAAE,CAAAI,MACY6F,EAAqB5F,QAArB4F,EAAqBnG,UAAAQ,WAAc,SACpJ,OAxBK2F,CAAqB,KAkC3B,MAAMM,GACFjN,YAAY8M,GAeR,GAbA5N,KAAKgO,eAAiB,IAAIjB,GAE1B/M,KAAKiO,WAAa,GAElBjO,KAAKkO,aAAc,EAEnBlO,KAAKmO,cAAgB,4BAMrBnO,KAAKoO,qBAAsB,EACvBR,EAAQ,CAIR,MAAMS,EAAaC,OAAOC,KAAKX,GAC/B,UAAWY,KAAOH,OACMhR,IAAhBuQ,EAAOY,KAOPxO,KAAKwO,GAAOZ,EAAOY,GAG/B,CACJ,EAiDJ,MAAMC,GACF3N,YAEA4N,EAEAC,GACI3O,KAAK0O,eAAiBA,EACtB1O,KAAK2O,yBAA2BA,CACpC,EA2BJ,IAKMC,GAAqB,MAA3B,MAAMA,EACF9N,YAAYuD,GAERrE,KAAK6O,kBAAoB,GACzB7O,KAAK4E,UAAYP,CACrB,CACAyB,cACI9F,KAAKsM,QACT,CAEA9O,IAAI+O,GAEAvM,KAAKvC,OAAO8O,GACZvM,KAAK6O,kBAAkB1N,KAAKoL,EAChC,CAEA9O,OAAO8O,GACH,MAAMuC,EAAQ9O,KAAK6O,kBAAkBtI,QAAQgG,GACzCuC,GAAQ,GACR9O,KAAK6O,kBAAkBE,OAAOD,EAAO,GAGH,IAAlC9O,KAAK6O,kBAAkB7P,QACvBgB,KAAKsM,QAEb,CAACjF,SACQrH,KAAKsH,UAAI,SAAAC,GAAA,WAAAA,GAAwFqH,GAhKVpH,MAgKiDE,MAAQ,EAA6CL,SAC7LrH,KAAK2H,WAjKkFH,MAAE,CAAAI,MAiKYgH,EAAqB/G,QAArB+G,EAAqBtH,UAAAQ,WAAc,SACpJ,OA5BK8G,CAAqB,KA0CrBI,GAAyB,MAA/B,MAAMA,UAAkCJ,GACpC9N,YAAYuD,EAEZF,GACIlD,MAAMoD,GACNrE,KAAKmE,QAAUA,EAEfnE,KAAKiP,iBAAoB9G,IACrB,MAAM+G,EAAWlP,KAAK6O,kBACtB,QAASM,EAAID,EAASlQ,OAAS,EAAGmQ,GAAI,EAAIA,IAOtC,GAAID,EAASC,GAAGC,eAAeC,UAAUrQ,OAAS,EAAG,CACjD,MAAMsQ,EAAgBJ,EAASC,GAAGC,eAE9BpP,KAAKmE,QACLnE,KAAKmE,QAAQkI,IAAI,IAAMiD,EAAcvQ,KAAKoJ,IAG1CmH,EAAcvQ,KAAKoJ,GAEvB,KACJ,EAGZ,CAEA3K,IAAI+O,GACAtL,MAAMzD,IAAI+O,GAELvM,KAAKuP,cAEFvP,KAAKmE,QACLnE,KAAKmE,QAAQiD,kBAAkB,IAAMpH,KAAK4E,UAAUyE,KAAK1L,iBAAiB,UAAWqC,KAAKiP,mBAG1FjP,KAAK4E,UAAUyE,KAAK1L,iBAAiB,UAAWqC,KAAKiP,kBAEzDjP,KAAKuP,aAAc,EAE3B,CAEAjD,SACQtM,KAAKuP,cACLvP,KAAK4E,UAAUyE,KAAKzL,oBAAoB,UAAWoC,KAAKiP,kBACxDjP,KAAKuP,aAAc,EAE3B,CAAClI,SACQrH,KAAKsH,UAAI,SAAAC,GAAA,WAAAA,GAAwFyH,GApOVxH,MAoOqDE,MApOrDF,MAoO0EA,MAAS,KAA6DH,SACvOrH,KAAK2H,WArOkFH,MAAE,CAAAI,MAqOYoH,EAAyBnH,QAAzBmH,EAAyB1H,UAAAQ,WAAc,SACxJ,OAtDKkH,CAAyB,KAsEzBQ,GAA6B,MAAnC,MAAMA,UAAsCZ,GACxC9N,YAAYuD,EAAUD,EAEtBD,GACIlD,MAAMoD,GACNrE,KAAKoE,UAAYA,EACjBpE,KAAKmE,QAAUA,EACfnE,KAAKyP,mBAAoB,EAEzBzP,KAAK0P,qBAAwBvH,IACzBnI,KAAK2P,2BAA0BC,MAAgBzH,EAAK,EAGxDnI,KAAK6P,eAAkB1H,IACnB,MAAMnL,KAAS4S,MAAgBzH,GAOzB2H,EAAwB,UAAf3H,EAAM4B,MAAoB/J,KAAK2P,wBACxC3P,KAAK2P,wBACL3S,EAGNgD,KAAK2P,wBAA0B,KAI/B,MAAMT,EAAWlP,KAAK6O,kBAAkBkB,QAKxC,QAASZ,EAAID,EAASlQ,OAAS,EAAGmQ,GAAI,EAAIA,IAAK,CAC3C,MAAM5C,EAAa2C,EAASC,GAC5B,GAAI5C,EAAWyD,sBAAsBX,UAAUrQ,OAAS,IAAMuN,EAAWH,cACrE,SAKJ,GAAIG,EAAWE,eAAef,SAAS1O,IACnCuP,EAAWE,eAAef,SAASoE,GACnC,MAEJ,MAAMG,EAAuB1D,EAAWyD,sBAEpChQ,KAAKmE,QACLnE,KAAKmE,QAAQkI,IAAI,IAAM4D,EAAqBlR,KAAKoJ,IAGjD8H,EAAqBlR,KAAKoJ,EAElC,EAER,CAEA3K,IAAI+O,GAQA,GAPAtL,MAAMzD,IAAI+O,IAOLvM,KAAKuP,YAAa,CACnB,MAAMlG,EAAOrJ,KAAK4E,UAAUyE,KAExBrJ,KAAKmE,QACLnE,KAAKmE,QAAQiD,kBAAkB,IAAMpH,KAAKkQ,mBAAmB7G,IAG7DrJ,KAAKkQ,mBAAmB7G,GAIxBrJ,KAAKoE,UAAU+L,MAAQnQ,KAAKyP,oBAC5BzP,KAAKoQ,qBAAuB/G,EAAK0B,MAAMsF,OACvChH,EAAK0B,MAAMsF,OAAS,UACpBrQ,KAAKyP,mBAAoB,GAE7BzP,KAAKuP,aAAc,CACvB,CACJ,CAEAjD,SACI,GAAItM,KAAKuP,YAAa,CAClB,MAAMlG,EAAOrJ,KAAK4E,UAAUyE,KAC5BA,EAAKzL,oBAAoB,cAAeoC,KAAK0P,sBAAsB,GACnErG,EAAKzL,oBAAoB,QAASoC,KAAK6P,gBAAgB,GACvDxG,EAAKzL,oBAAoB,WAAYoC,KAAK6P,gBAAgB,GAC1DxG,EAAKzL,oBAAoB,cAAeoC,KAAK6P,gBAAgB,GACzD7P,KAAKoE,UAAU+L,KAAOnQ,KAAKyP,oBAC3BpG,EAAK0B,MAAMsF,OAASrQ,KAAKoQ,qBACzBpQ,KAAKyP,mBAAoB,GAE7BzP,KAAKuP,aAAc,CACvB,CACJ,CACAW,mBAAmB7G,GACfA,EAAK1L,iBAAiB,cAAeqC,KAAK0P,sBAAsB,GAChErG,EAAK1L,iBAAiB,QAASqC,KAAK6P,gBAAgB,GACpDxG,EAAK1L,iBAAiB,WAAYqC,KAAK6P,gBAAgB,GACvDxG,EAAK1L,iBAAiB,cAAeqC,KAAK6P,gBAAgB,EAC9D,CAACxI,SACQrH,KAAKsH,UAAI,SAAAC,GAAA,WAAAA,GAAwFiI,GAjWVhI,MAiWyDE,MAjWzDF,MAiW8E8I,MAjW9E9I,MAiWwGA,MAAS,KAA6DH,SACrQrH,KAAK2H,WAlWkFH,MAAE,CAAAI,MAkWY4H,EAA6B3H,QAA7B2H,EAA6BlI,UAAAQ,WAAc,SAC5J,OA7GK0H,CAA6B,KAyH7Be,GAAgB,MAAtB,MAAMA,EACFzP,YAAYuD,EAAUD,GAClBpE,KAAKoE,UAAYA,EACjBpE,KAAK4E,UAAYP,CACrB,CACAyB,cACI9F,KAAKwQ,mBAAmB/S,QAC5B,CAOAgT,sBACI,OAAKzQ,KAAKwQ,mBACNxQ,KAAK0Q,mBAEF1Q,KAAKwQ,iBAChB,CAKAE,mBACI,MAAMC,EAAiB,wBAIvB,GAAI3Q,KAAKoE,UAAUoB,cAAaoL,QAAsB,CAClD,MAAMC,EAA6B7Q,KAAK4E,UAAUkM,iBAAkB,IAAGH,0BAA4CA,sBAGnH,QAASxB,EAAI,EAAGA,EAAI0B,EAA2B7R,OAAQmQ,IACnD0B,EAA2B1B,GAAG1R,QAEtC,CACA,MAAMwI,EAAYjG,KAAK4E,UAAUmM,cAAc,OAC/C9K,EAAUgF,UAAUzN,IAAImT,IAAc,EAUlCC,QACA3K,EAAU+K,aAAa,WAAY,QAE7BhR,KAAKoE,UAAUoB,WACrBS,EAAU+K,aAAa,WAAY,UAEvChR,KAAK4E,UAAUyE,KAAK4H,YAAYhL,GAChCjG,KAAKwQ,kBAAoBvK,CAC7B,CAACoB,SACQrH,KAAKsH,UAAI,SAAAC,GAAA,WAAAA,GAAwFgJ,GAxaV/I,MAwa4CE,MAxa5CF,MAwaiE8I,MAAa,EAA6CjJ,SAClNrH,KAAK2H,WAzakFH,MAAE,CAAAI,MAyaY2I,EAAgB1I,QAAhB0I,EAAgBjJ,UAAAQ,WAAc,SAC/I,OA3DKyI,CAAgB,KAwEtB,MAAMW,GACFpQ,YAAYqQ,EAAeC,EAAOC,EAAOrF,EAAS7H,EAASmN,EAAqB1M,EAAW2M,EAAWC,EAAyBC,GAAsB,GACjJzR,KAAKmR,cAAgBA,EACrBnR,KAAKoR,MAAQA,EACbpR,KAAKqR,MAAQA,EACbrR,KAAKgM,QAAUA,EACfhM,KAAKmE,QAAUA,EACfnE,KAAKsR,oBAAsBA,EAC3BtR,KAAK4E,UAAYA,EACjB5E,KAAKuR,UAAYA,EACjBvR,KAAKwR,wBAA0BA,EAC/BxR,KAAKyR,oBAAsBA,EAC3BzR,KAAK0R,iBAAmB,KACxB1R,KAAK2R,eAAiB,IAAIpN,IAC1BvE,KAAK4R,aAAe,IAAIrN,IACxBvE,KAAK6R,aAAe,IAAItN,IACxBvE,KAAK8R,iBAAmBnS,KAAaoS,MACrC/R,KAAKgS,sBAAyB7J,GAAUnI,KAAK2R,eAAe5S,KAAKoJ,GACjEnI,KAAKiS,8BAAiC9J,IAClCnI,KAAKkS,iBAAiB/J,EAAMnL,OAAM,EAGtCgD,KAAKoP,eAAiB,IAAI7K,IAE1BvE,KAAKgQ,sBAAwB,IAAIzL,IAC7ByH,EAAQgC,iBACRhO,KAAKmS,gBAAkBnG,EAAQgC,eAC/BhO,KAAKmS,gBAAgBzH,OAAO1K,OAEhCA,KAAKoS,kBAAoBpG,EAAQqG,gBACrC,CAEA,kBAAI5F,GACA,OAAOzM,KAAKqR,KAChB,CAEA,mBAAIiB,GACA,OAAOtS,KAAK0R,gBAChB,CAMA,eAAIa,GACA,OAAOvS,KAAKoR,KAChB,CAQA1G,OAAO8H,IAGExS,KAAKoR,MAAMjK,eAAiBnH,KAAKyS,qBAClCzS,KAAKyS,oBAAoBxB,YAAYjR,KAAKoR,OAE9C,MAAMsB,EAAe1S,KAAKmR,cAAczG,OAAO8H,GAC/C,OAAIxS,KAAKoS,mBACLpS,KAAKoS,kBAAkB1H,OAAO1K,MAElCA,KAAK2S,uBACL3S,KAAK4S,qBACL5S,KAAK6S,0BACD7S,KAAKmS,iBACLnS,KAAKmS,gBAAgBxH,SAKzB3K,KAAKmE,QAAQ2O,SAASxV,QAAKyV,KAAK,IAAI3P,UAAU,KAEtCpD,KAAKoM,eACLpM,KAAK8M,gBAAe,GAI5B9M,KAAKgT,sBAAqB,GACtBhT,KAAKgM,QAAQkC,aACblO,KAAKiT,kBAELjT,KAAKgM,QAAQiC,YACbjO,KAAKkT,eAAelT,KAAKqR,MAAOrR,KAAKgM,QAAQiC,YAAY,GAG7DjO,KAAK4R,aAAa7S,OAElBiB,KAAKsR,oBAAoB9T,IAAIwC,MACzBA,KAAKgM,QAAQoC,sBACbpO,KAAK8R,iBAAmB9R,KAAKuR,UAAUnO,UAAU,IAAMpD,KAAKmT,YAEhEnT,KAAKwR,wBAAwBhU,IAAIwC,MAIM,mBAA5B0S,GAAcU,WAMrBV,EAAaU,UAAU,KACfpT,KAAKoM,eAILpM,KAAKmE,QAAQiD,kBAAkB,IAAMvF,QAAQC,UAAUC,KAAK,IAAM/B,KAAKsM,UAAS,GAIrFoG,CACX,CAKApG,SACI,IAAKtM,KAAKoM,cACN,OAEJpM,KAAKqT,iBAILrT,KAAKgT,sBAAqB,GACtBhT,KAAKoS,mBAAqBpS,KAAKoS,kBAAkB9F,QACjDtM,KAAKoS,kBAAkB9F,SAEvBtM,KAAKmS,iBACLnS,KAAKmS,gBAAgBjH,UAEzB,MAAMoI,EAAmBtT,KAAKmR,cAAc7E,SAE5C,OAAAtM,KAAK6R,aAAa9S,OAElBiB,KAAKsR,oBAAoB7T,OAAOuC,MAGhCA,KAAKuT,2BACLvT,KAAK8R,iBAAiBnR,cACtBX,KAAKwR,wBAAwB/T,OAAOuC,MAC7BsT,CACX,CAEAH,UACI,MAAMK,EAAaxT,KAAKoM,cACpBpM,KAAKoS,mBACLpS,KAAKoS,kBAAkBe,UAE3BnT,KAAKyT,yBACLzT,KAAKkS,iBAAiBlS,KAAK0R,kBAC3B1R,KAAK8R,iBAAiBnR,cACtBX,KAAKsR,oBAAoB7T,OAAOuC,MAChCA,KAAKmR,cAAcgC,UACnBnT,KAAK4R,aAAa1O,WAClBlD,KAAK2R,eAAezO,WACpBlD,KAAKoP,eAAelM,WACpBlD,KAAKgQ,sBAAsB9M,WAC3BlD,KAAKwR,wBAAwB/T,OAAOuC,MACpCA,KAAKoR,OAAO3T,SACZuC,KAAKyS,oBAAsBzS,KAAKqR,MAAQrR,KAAKoR,MAAQ,KACjDoC,GACAxT,KAAK6R,aAAa9S,OAEtBiB,KAAK6R,aAAa3O,UACtB,CAEAkJ,cACI,OAAOpM,KAAKmR,cAAc/E,aAC9B,CAEAsH,gBACI,OAAO1T,KAAK2R,cAChB,CAEAgC,cACI,OAAO3T,KAAK4R,YAChB,CAEAgC,cACI,OAAO5T,KAAK6R,YAChB,CAEAvC,gBACI,OAAOtP,KAAKoP,cAChB,CAEAa,uBACI,OAAOjQ,KAAKgQ,qBAChB,CAEA6D,YACI,OAAO7T,KAAKgM,OAChB,CAEAc,iBACQ9M,KAAKoS,mBACLpS,KAAKoS,kBAAkB0B,OAE/B,CAEAC,uBAAuBC,GACfA,IAAahU,KAAKoS,oBAGlBpS,KAAKoS,mBACLpS,KAAKoS,kBAAkBe,UAE3BnT,KAAKoS,kBAAoB4B,EACrBhU,KAAKoM,gBACL4H,EAAStJ,OAAO1K,MAChBA,KAAK8M,kBAEb,CAEAmH,WAAWC,GACPlU,KAAKgM,QAAU,IAAKhM,KAAKgM,WAAYkI,GACrClU,KAAK4S,oBACT,CAEAuB,aAAaC,GACTpU,KAAKgM,QAAU,IAAKhM,KAAKgM,QAASqI,UAAWD,GAC7CpU,KAAK6S,yBACT,CAEAyB,cAAcC,GACNvU,KAAKqR,OACLrR,KAAKkT,eAAelT,KAAKqR,MAAOkD,GAAS,EAEjD,CAEAC,iBAAiBD,GACTvU,KAAKqR,OACLrR,KAAKkT,eAAelT,KAAKqR,MAAOkD,GAAS,EAEjD,CAIAE,eACI,MAAMJ,EAAYrU,KAAKgM,QAAQqI,UAC/B,OAAKA,EAGuB,iBAAdA,EAAyBA,EAAYA,EAAUpR,MAFlD,KAGf,CAEAyR,qBAAqBV,GACbA,IAAahU,KAAKmS,kBAGtBnS,KAAKyT,yBACLzT,KAAKmS,gBAAkB6B,EACnBhU,KAAKoM,gBACL4H,EAAStJ,OAAO1K,MAChBgU,EAASrJ,UAEjB,CAEAkI,0BACI7S,KAAKoR,MAAMJ,aAAa,MAAOhR,KAAKyU,eACxC,CAEA7B,qBACI,IAAK5S,KAAKqR,MACN,OAEJ,MAAMtG,EAAQ/K,KAAKqR,MAAMtG,MACzBA,EAAMtC,SAAQuC,MAAoBhL,KAAKgM,QAAQvD,OAC/CsC,EAAMrC,UAASsC,MAAoBhL,KAAKgM,QAAQtD,QAChDqC,EAAM4J,YAAW3J,MAAoBhL,KAAKgM,QAAQ2I,UAClD5J,EAAM6J,aAAY5J,MAAoBhL,KAAKgM,QAAQ4I,WACnD7J,EAAM8J,YAAW7J,MAAoBhL,KAAKgM,QAAQ6I,UAClD9J,EAAM+J,aAAY9J,MAAoBhL,KAAKgM,QAAQ8I,UACvD,CAEA9B,qBAAqB+B,GACjB/U,KAAKqR,MAAMtG,MAAMiK,cAAgBD,EAAgB,GAAK,MAC1D,CAEA9B,kBACI,MAAMgC,EAAe,+BACrBjV,KAAK0R,iBAAmB1R,KAAK4E,UAAUmM,cAAc,OACrD/Q,KAAK0R,iBAAiBzG,UAAUzN,IAAI,wBAChCwC,KAAKyR,qBACLzR,KAAK0R,iBAAiBzG,UAAUzN,IAAI,uCAEpCwC,KAAKgM,QAAQmC,eACbnO,KAAKkT,eAAelT,KAAK0R,iBAAkB1R,KAAKgM,QAAQmC,eAAe,GAI3EnO,KAAKoR,MAAMjK,cAAc+N,aAAalV,KAAK0R,iBAAkB1R,KAAKoR,OAGlEpR,KAAK0R,iBAAiB/T,iBAAiB,QAASqC,KAAKgS,wBAEhDhS,KAAKyR,4BAA8BpS,sBAA0B,IAC9DW,KAAKmE,QAAQiD,kBAAkB,KAC3B/H,sBAAsB,KACdW,KAAK0R,kBACL1R,KAAK0R,iBAAiBzG,UAAUzN,IAAIyX,EAAY,EAEvD,GAILjV,KAAK0R,iBAAiBzG,UAAUzN,IAAIyX,EAE5C,CAQAtC,uBACQ3S,KAAKoR,MAAM+D,aACXnV,KAAKoR,MAAMgE,WAAWnE,YAAYjR,KAAKoR,MAE/C,CAEAiC,iBACI,MAAMgC,EAAmBrV,KAAK0R,iBAC9B,GAAK2D,EAGL,IAAIrV,KAAKyR,oBAEL,YADAzR,KAAKkS,iBAAiBmD,GAG1BA,EAAiBpK,UAAUxN,OAAO,gCAClCuC,KAAKmE,QAAQiD,kBAAkB,KAC3BiO,EAAiB1X,iBAAiB,gBAAiBqC,KAAKiS,8BAA6B,GAIzFoD,EAAiBtK,MAAMiK,cAAgB,OAIvChV,KAAKsV,iBAAmBtV,KAAKmE,QAAQiD,kBAAkB,IAAMmO,WAAW,KACpEvV,KAAKkS,iBAAiBmD,EAAgB,EACvC,KAAI,CACX,CAEAnC,eAAepM,EAAS0O,EAAYC,GAChC,MAAMlB,KAAUmB,MAAYF,GAAc,IAAIlP,OAAOqP,KAAOA,GACxDpB,EAAQvV,SACRyW,EAAQ3O,EAAQmE,UAAUzN,OAAO+W,GAAWzN,EAAQmE,UAAUxN,UAAU8W,GAEhF,CAEAhB,2BAIIvT,KAAKmE,QAAQiD,kBAAkB,KAI3B,MAAMzB,EAAe3F,KAAKmE,QAAQ2O,SAC7BxV,QAAKsY,QAAUC,MAAM7V,KAAK4R,aAAc5R,KAAK6R,gBAC7CzO,UAAU,OAGNpD,KAAKqR,QAAUrR,KAAKoR,OAAwC,IAA/BpR,KAAKqR,MAAMyE,SAAS9W,UAC9CgB,KAAKqR,OAASrR,KAAKgM,QAAQiC,YAC3BjO,KAAKkT,eAAelT,KAAKqR,MAAOrR,KAAKgM,QAAQiC,YAAY,GAEzDjO,KAAKoR,OAASpR,KAAKoR,MAAMjK,gBACzBnH,KAAKyS,oBAAsBzS,KAAKoR,MAAMjK,cACtCnH,KAAKoR,MAAM3T,UAEfkI,EAAahF,cAAY,EAEhC,EAET,CAEA8S,yBACI,MAAMzF,EAAiBhO,KAAKmS,gBACxBnE,IACAA,EAAe9C,UACX8C,EAAe1B,QACf0B,EAAe1B,SAG3B,CAEA4F,iBAAiB6D,GACTA,IACAA,EAASnY,oBAAoB,QAASoC,KAAKgS,uBAC3C+D,EAASnY,oBAAoB,gBAAiBoC,KAAKiS,+BACnD8D,EAAStY,SAILuC,KAAK0R,mBAAqBqE,IAC1B/V,KAAK0R,iBAAmB,OAG5B1R,KAAKsV,mBACLU,aAAahW,KAAKsV,kBAClBtV,KAAKsV,sBAAmBjY,EAEhC,EAMJ,MAAM4Y,GAAmB,8CAEnBC,GAAiB,gBAQvB,MAAMC,GAEF,aAAIC,GACA,OAAOpW,KAAKqW,mBAChB,CACAvV,YAAYwV,EAAa/L,EAAgB3F,EAAWR,EAAWmS,GAC3DvW,KAAKuK,eAAiBA,EACtBvK,KAAK4E,UAAYA,EACjB5E,KAAKoE,UAAYA,EACjBpE,KAAKuW,kBAAoBA,EAEzBvW,KAAKwW,qBAAuB,CAAE/N,MAAO,EAAGC,OAAQ,GAEhD1I,KAAKyW,WAAY,EAEjBzW,KAAK0W,UAAW,EAEhB1W,KAAK2W,gBAAiB,EAEtB3W,KAAK4W,wBAAyB,EAE9B5W,KAAK6W,iBAAkB,EAEvB7W,KAAK8W,gBAAkB,EAEvB9W,KAAK+W,aAAe,GAEpB/W,KAAKqW,oBAAsB,GAE3BrW,KAAKgX,iBAAmB,IAAIzS,IAE5BvE,KAAKiX,oBAAsBtX,KAAaoS,MAExC/R,KAAKkX,SAAW,EAEhBlX,KAAKmX,SAAW,EAEhBnX,KAAKoX,qBAAuB,GAE5BpX,KAAKqX,gBAAkBrX,KAAKgX,iBAC5BhX,KAAKsX,UAAUhB,EACnB,CAEA5L,OAAO6B,GAMHvM,KAAKuX,qBACLhL,EAAWgG,YAAYtH,UAAUzN,IAAIyY,IACrCjW,KAAKmM,YAAcI,EACnBvM,KAAKwX,aAAejL,EAAWgG,YAC/BvS,KAAKqR,MAAQ9E,EAAWE,eACxBzM,KAAKyX,aAAc,EACnBzX,KAAK0X,kBAAmB,EACxB1X,KAAK2X,cAAgB,KACrB3X,KAAKiX,oBAAoBtW,cACzBX,KAAKiX,oBAAsBjX,KAAKuK,eAAenC,SAAShF,UAAU,KAI9DpD,KAAK0X,kBAAmB,EACxB1X,KAAK8T,OAAM,EAEnB,CAeAA,QAEI,GAAI9T,KAAKyX,cAAgBzX,KAAKoE,UAAUoB,UACpC,OAKJ,IAAKxF,KAAK0X,kBAAoB1X,KAAK6W,iBAAmB7W,KAAK2X,cAEvD,YADA3X,KAAK4X,sBAGT5X,KAAK6X,qBACL7X,KAAK8X,6BACL9X,KAAK+X,0BAIL/X,KAAKgY,cAAgBhY,KAAKiY,2BAC1BjY,KAAKkY,YAAclY,KAAKmY,iBACxBnY,KAAKoY,aAAepY,KAAKqR,MAAMjI,wBAC/BpJ,KAAKqY,eAAiBrY,KAAKuW,kBAAkB9F,sBAAsBrH,wBACnE,MAAMkP,EAAatY,KAAKkY,YAClB1K,EAAcxN,KAAKoY,aACnBG,EAAevY,KAAKgY,cACpBQ,EAAgBxY,KAAKqY,eAErBI,EAAe,GAErB,IAAIC,EAGJ,QAASC,KAAO3Y,KAAKqW,oBAAqB,CAEtC,IAAIuC,EAAc5Y,KAAK6Y,gBAAgBP,EAAYE,EAAeG,GAI9DG,EAAe9Y,KAAK+Y,iBAAiBH,EAAapL,EAAamL,GAE/DK,EAAahZ,KAAKiZ,eAAeH,EAActL,EAAa+K,EAAcI,GAE9E,GAAIK,EAAWE,2BAGX,OAFAlZ,KAAKyW,WAAY,OACjBzW,KAAKmZ,eAAeR,EAAKC,GAKzB5Y,KAAKoZ,8BAA8BJ,EAAYF,EAAcP,GAG7DE,EAAatX,KAAK,CACdkY,SAAUV,EACV7I,OAAQ8I,EACRpL,cACA8L,gBAAiBtZ,KAAKuZ,0BAA0BX,EAAaD,OAOhED,GAAYA,EAASM,WAAWQ,YAAcR,EAAWQ,eAC1Dd,EAAW,CAAEM,aAAYF,eAAcF,cAAaS,SAAUV,EAAKnL,eAE3E,CAGA,GAAIiL,EAAazZ,OAAQ,CACrB,IAAIya,EAAU,KACVC,GAAY,EAChB,UAAWC,KAAOlB,EAAc,CAC5B,MAAMmB,EAAQD,EAAIL,gBAAgB7Q,MAAQkR,EAAIL,gBAAgB5Q,QAAUiR,EAAIN,SAASQ,QAAU,GAC3FD,EAAQF,IACRA,EAAYE,EACZH,EAAUE,EAElB,CAGA,OAFA3Z,KAAKyW,WAAY,OACjBzW,KAAKmZ,eAAeM,EAAQJ,SAAUI,EAAQ3J,OAElD,CAGA,GAAI9P,KAAK0W,SAIL,OAFA1W,KAAKyW,WAAY,OACjBzW,KAAKmZ,eAAeT,EAASW,SAAUX,EAASE,aAKpD5Y,KAAKmZ,eAAeT,EAASW,SAAUX,EAASE,YACpD,CACAtM,SACItM,KAAK6X,qBACL7X,KAAK2X,cAAgB,KACrB3X,KAAK8Z,oBAAsB,KAC3B9Z,KAAKiX,oBAAoBtW,aAC7B,CAEAwS,UACQnT,KAAKyX,cAKLzX,KAAKwX,cACLuC,EAAa/Z,KAAKwX,aAAazM,MAAO,CAClCjC,IAAK,GACLC,KAAM,GACNE,MAAO,GACPD,OAAQ,GACRN,OAAQ,GACRD,MAAO,GACPuR,WAAY,GACZC,eAAgB,KAGpBja,KAAKqR,OACLrR,KAAK8X,6BAEL9X,KAAKmM,aACLnM,KAAKmM,YAAYoG,YAAYtH,UAAUxN,OAAOwY,IAElDjW,KAAKsM,SACLtM,KAAKgX,iBAAiB9T,WACtBlD,KAAKmM,YAAcnM,KAAKwX,aAAe,KACvCxX,KAAKyX,aAAc,EACvB,CAMAG,sBACI,GAAI5X,KAAKyX,cAAgBzX,KAAKoE,UAAUoB,UACpC,OAEJ,MAAM0U,EAAela,KAAK2X,cAC1B,GAAIuC,EAAc,CACdla,KAAKkY,YAAclY,KAAKmY,iBACxBnY,KAAKoY,aAAepY,KAAKqR,MAAMjI,wBAC/BpJ,KAAKgY,cAAgBhY,KAAKiY,2BAC1BjY,KAAKqY,eAAiBrY,KAAKuW,kBAAkB9F,sBAAsBrH,wBACnE,MAAMwP,EAAc5Y,KAAK6Y,gBAAgB7Y,KAAKkY,YAAalY,KAAKqY,eAAgB6B,GAChFla,KAAKmZ,eAAee,EAActB,EACtC,MAEI5Y,KAAK8T,OAEb,CAMAqG,yBAAyBC,GACrB,OAAApa,KAAK+W,aAAeqD,EACbpa,IACX,CAKAqa,cAAcjE,GACV,OAAApW,KAAKqW,oBAAsBD,GAGmB,IAA1CA,EAAU7P,QAAQvG,KAAK2X,iBACvB3X,KAAK2X,cAAgB,MAEzB3X,KAAKuX,qBACEvX,IACX,CAKAsa,mBAAmBC,GACf,OAAAva,KAAK8W,gBAAkByD,EAChBva,IACX,CAEAwa,uBAAuBC,GAAqB,GACxC,OAAAza,KAAK4W,uBAAyB6D,EACvBza,IACX,CAEA0a,kBAAkBC,GAAgB,GAC9B,OAAA3a,KAAK2W,eAAiBgE,EACf3a,IACX,CAEA4a,SAASC,GAAU,GACf,OAAA7a,KAAK0W,SAAWmE,EACT7a,IACX,CAOA8a,mBAAmBC,GAAW,GAC1B,OAAA/a,KAAK6W,gBAAkBkE,EAChB/a,IACX,CAQAsX,UAAUxH,GACN,OAAA9P,KAAKgb,QAAUlL,EACR9P,IACX,CAKAib,mBAAmBC,GACf,OAAAlb,KAAKkX,SAAWgE,EACTlb,IACX,CAKAmb,mBAAmBD,GACf,OAAAlb,KAAKmX,SAAW+D,EACTlb,IACX,CASAob,sBAAsBC,GAClB,OAAArb,KAAKsb,yBAA2BD,EACzBrb,IACX,CAIA6Y,gBAAgBP,EAAYE,EAAeG,GACvC,IAAI4C,EAgBAC,EAfJ,GAAmB,UAAf7C,EAAI8C,QAGJF,EAAIjD,EAAWvP,KAAOuP,EAAW7P,MAAQ,MAExC,CACD,MAAMiT,EAAS1b,KAAK2b,SAAWrD,EAAWrP,MAAQqP,EAAWvP,KACvD6S,EAAO5b,KAAK2b,SAAWrD,EAAWvP,KAAOuP,EAAWrP,MAC1DsS,EAAmB,SAAf5C,EAAI8C,QAAqBC,EAASE,CAC1C,CAOA,OAJIpD,EAAczP,KAAO,IACrBwS,GAAK/C,EAAczP,MAInByS,EADe,UAAf7C,EAAIkD,QACAvD,EAAWxP,IAAMwP,EAAW5P,OAAS,EAGtB,OAAfiQ,EAAIkD,QAAmBvD,EAAWxP,IAAMwP,EAAWtP,OAOvDwP,EAAc1P,IAAM,IACpB0S,GAAKhD,EAAc1P,KAEhB,CAAEyS,IAAGC,IAChB,CAKAzC,iBAAiBH,EAAapL,EAAamL,GAGvC,IAAImD,EAUAC,EACJ,OATID,EADgB,UAAhBnD,EAAIqD,UACaxO,EAAY/E,MAAQ,EAEf,UAAjBkQ,EAAIqD,SACOhc,KAAK2b,UAAYnO,EAAY/E,MAAQ,EAGrCzI,KAAK2b,SAAW,GAAKnO,EAAY/E,MAIjDsT,EADgB,UAAhBpD,EAAIsD,UACazO,EAAY9E,OAAS,EAGN,OAAhBiQ,EAAIsD,SAAoB,GAAKzO,EAAY9E,OAGtD,CACH6S,EAAG3C,EAAY2C,EAAIO,EACnBN,EAAG5C,EAAY4C,EAAIO,EAE3B,CAEA9C,eAAeiD,EAAOC,EAAgBxQ,EAAU0N,GAG5C,MAAM+C,EAAUC,GAA6BF,GAC7C,IAAMZ,IAAGC,KAAMU,EACXI,EAAUtc,KAAKuc,WAAWlD,EAAU,KACpCmD,EAAUxc,KAAKuc,WAAWlD,EAAU,KAEpCiD,IACAf,GAAKe,GAELE,IACAhB,GAAKgB,GAGT,IAEIC,EAAc,EAAIjB,EAClBkB,EAAiBlB,EAAIY,EAAQ1T,OAASiD,EAASjD,OAE/CiU,EAAe3c,KAAK4c,mBAAmBR,EAAQ3T,MALhC,EAAI8S,EACHA,EAAIa,EAAQ3T,MAAQkD,EAASlD,OAK7CoU,EAAgB7c,KAAK4c,mBAAmBR,EAAQ1T,OAAQ+T,EAAaC,GACrElD,GAAcmD,EAAeE,EACjC,MAAO,CACHrD,eACAN,2BAA4BkD,EAAQ3T,MAAQ2T,EAAQ1T,SAAW8Q,GAC/DsD,yBAA0BD,IAAkBT,EAAQ1T,OACpDqU,2BAA4BJ,GAAgBP,EAAQ3T,MAE5D,CAOA2Q,8BAA8BO,EAAKuC,EAAOvQ,GACtC,GAAI3L,KAAK4W,uBAAwB,CAC7B,MAAMoG,EAAkBrR,EAAS3C,OAASkT,EAAMV,EAC1CyB,EAAiBtR,EAAS1C,MAAQiT,EAAMX,EACxC3G,EAAYsI,GAAcld,KAAKmM,YAAY0H,YAAYe,WACvDD,EAAWuI,GAAcld,KAAKmM,YAAY0H,YAAYc,UAG5D,OAFoBgF,EAAImD,0BAA0C,MAAblI,GAAqBA,GAAaoI,KACjErD,EAAIoD,4BAA2C,MAAZpI,GAAoBA,GAAYsI,EAE7F,CACA,OAAO,CACX,CAYAE,qBAAqBC,EAAOjB,EAAgBvT,GAIxC,GAAI5I,KAAK8Z,qBAAuB9Z,KAAK6W,gBACjC,MAAO,CACH0E,EAAG6B,EAAM7B,EAAIvb,KAAK8Z,oBAAoByB,EACtCC,EAAG4B,EAAM5B,EAAIxb,KAAK8Z,oBAAoB0B,GAK9C,MAAMY,EAAUC,GAA6BF,GACvCxQ,EAAW3L,KAAKgY,cAGhBqF,EAAgBzQ,KAAK0Q,IAAIF,EAAM7B,EAAIa,EAAQ3T,MAAQkD,EAASlD,MAAO,GACnE8U,EAAiB3Q,KAAK0Q,IAAIF,EAAM5B,EAAIY,EAAQ1T,OAASiD,EAASjD,OAAQ,GACtE8U,EAAc5Q,KAAK0Q,IAAI3R,EAAS7C,IAAMF,EAAeE,IAAMsU,EAAM5B,EAAG,GACpEiC,EAAe7Q,KAAK0Q,IAAI3R,EAAS5C,KAAOH,EAAeG,KAAOqU,EAAM7B,EAAG,GAE7E,IAAImC,EAAQ,EACRC,EAAQ,EAIZ,OACID,EADAtB,EAAQ3T,OAASkD,EAASlD,MAClBgV,IAAiBJ,EAGjBD,EAAM7B,EAAIvb,KAAK8W,gBAAkBnL,EAAS5C,KAAOH,EAAeG,KAAOqU,EAAM7B,EAAI,EAGzFoC,EADAvB,EAAQ1T,QAAUiD,EAASjD,OACnB8U,IAAgBD,EAGhBH,EAAM5B,EAAIxb,KAAK8W,gBAAkBnL,EAAS7C,IAAMF,EAAeE,IAAMsU,EAAM5B,EAAI,EAE3Fxb,KAAK8Z,oBAAsB,CAAEyB,EAAGmC,EAAOlC,EAAGmC,GACnC,CACHpC,EAAG6B,EAAM7B,EAAImC,EACblC,EAAG4B,EAAM5B,EAAImC,EAErB,CAMAxE,eAAeE,EAAUT,GAYrB,GAXA5Y,KAAK4d,oBAAoBvE,GACzBrZ,KAAK6d,yBAAyBjF,EAAaS,GAC3CrZ,KAAK8d,sBAAsBlF,EAAaS,GACpCA,EAASpL,YACTjO,KAAK+d,iBAAiB1E,EAASpL,YAGnCjO,KAAK2X,cAAgB0B,EAIjBrZ,KAAKgX,iBAAiB3H,UAAUrQ,OAAQ,CACxC,MAAM2P,EAA2B3O,KAAKge,uBAChCC,EAAc,IAAIxP,GAA+B4K,EAAU1K,GACjE3O,KAAKgX,iBAAiBjY,KAAKkf,EAC/B,CACAje,KAAK0X,kBAAmB,CAC5B,CAEAkG,oBAAoBvE,GAChB,IAAKrZ,KAAKsb,yBACN,OAEJ,MAAM4C,EAAWle,KAAKwX,aAAa1G,iBAAiB9Q,KAAKsb,0BACzD,IAAI6C,EACAC,EAAU/E,EAAS4C,SAEnBkC,EADsB,WAAtB9E,EAAS2C,SACC,SAELhc,KAAK2b,SACsB,UAAtBtC,EAAS2C,SAAuB,QAAU,OAGpB,UAAtB3C,EAAS2C,SAAuB,OAAS,QAEvD,QAAS7M,EAAI,EAAGA,EAAI+O,EAASlf,OAAQmQ,IACjC+O,EAAS/O,GAAGpE,MAAMsT,gBAAmB,GAAEF,KAAWC,GAE1D,CAOA7E,0BAA0BzJ,EAAQuJ,GAC9B,MAAM1N,EAAW3L,KAAKgY,cAChBsG,EAAQte,KAAK2b,SACnB,IAAIjT,EAAQI,EAAKE,EA8BbP,EAAOM,EAAME,EA7BjB,GAA0B,QAAtBoQ,EAAS4C,SAETnT,EAAMgH,EAAO0L,EACb9S,EAASiD,EAASjD,OAASI,EAAM9I,KAAK8W,wBAEX,WAAtBuC,EAAS4C,SAIdjT,EAAS2C,EAASjD,OAASoH,EAAO0L,EAA2B,EAAvBxb,KAAK8W,gBAC3CpO,EAASiD,EAASjD,OAASM,EAAShJ,KAAK8W,oBAExC,CAKD,MAAMyH,EAAiC3R,KAAK4R,IAAI7S,EAAS3C,OAAS8G,EAAO0L,EAAI7P,EAAS7C,IAAKgH,EAAO0L,GAC5FiD,EAAiBze,KAAKwW,qBAAqB9N,OACjDA,EAA0C,EAAjC6V,EACTzV,EAAMgH,EAAO0L,EAAI+C,EACb7V,EAAS+V,IAAmBze,KAAK0X,mBAAqB1X,KAAK2W,iBAC3D7N,EAAMgH,EAAO0L,EAAIiD,EAAiB,EAE1C,CAMA,GAF2D,QAAtBpF,EAAS2C,WAAuBsC,GAAiC,UAAtBjF,EAAS2C,UAAwBsC,EAG7GrV,EAAQ0C,EAASlD,MAAQqH,EAAOyL,EAAIvb,KAAK8W,gBACzCrO,EAAQqH,EAAOyL,EAAIvb,KAAK8W,wBANgC,UAAtBuC,EAAS2C,WAAyBsC,GAAiC,QAAtBjF,EAAS2C,UAAsBsC,EAS9GvV,EAAO+G,EAAOyL,EACd9S,EAAQkD,EAAS1C,MAAQ6G,EAAOyL,MAE/B,CAKD,MAAMgD,EAAiC3R,KAAK4R,IAAI7S,EAAS1C,MAAQ6G,EAAOyL,EAAI5P,EAAS5C,KAAM+G,EAAOyL,GAC5FmD,EAAgB1e,KAAKwW,qBAAqB/N,MAChDA,EAAyC,EAAjC8V,EACRxV,EAAO+G,EAAOyL,EAAIgD,EACd9V,EAAQiW,IAAkB1e,KAAK0X,mBAAqB1X,KAAK2W,iBACzD5N,EAAO+G,EAAOyL,EAAImD,EAAgB,EAE1C,CACA,MAAO,CAAE5V,IAAKA,EAAKC,KAAMA,EAAMC,OAAQA,EAAQC,MAAOA,EAAOR,QAAOC,SACxE,CAQAoV,sBAAsBhO,EAAQuJ,GAC1B,MAAMC,EAAkBtZ,KAAKuZ,0BAA0BzJ,EAAQuJ,IAG1DrZ,KAAK0X,mBAAqB1X,KAAK2W,iBAChC2C,EAAgB5Q,OAASkE,KAAK4R,IAAIlF,EAAgB5Q,OAAQ1I,KAAKwW,qBAAqB9N,QACpF4Q,EAAgB7Q,MAAQmE,KAAK4R,IAAIlF,EAAgB7Q,MAAOzI,KAAKwW,qBAAqB/N,QAEtF,MAAMkW,EAAS,CAAC,EAChB,GAAI3e,KAAK4e,oBACLD,EAAO7V,IAAM6V,EAAO5V,KAAO,IAC3B4V,EAAO3V,OAAS2V,EAAO1V,MAAQ0V,EAAO7J,UAAY6J,EAAO9J,SAAW,GACpE8J,EAAOlW,MAAQkW,EAAOjW,OAAS,WAE9B,CACD,MAAMoM,EAAY9U,KAAKmM,YAAY0H,YAAYiB,UACzCD,EAAW7U,KAAKmM,YAAY0H,YAAYgB,SAC9C8J,EAAOjW,UAASsC,MAAoBsO,EAAgB5Q,QACpDiW,EAAO7V,OAAMkC,MAAoBsO,EAAgBxQ,KACjD6V,EAAO3V,UAASgC,MAAoBsO,EAAgBtQ,QACpD2V,EAAOlW,SAAQuC,MAAoBsO,EAAgB7Q,OACnDkW,EAAO5V,QAAOiC,MAAoBsO,EAAgBvQ,MAClD4V,EAAO1V,SAAQ+B,MAAoBsO,EAAgBrQ,OAG/C0V,EAAO3E,WADe,WAAtBX,EAAS2C,SACW,SAGsB,QAAtB3C,EAAS2C,SAAqB,WAAa,aAG/D2C,EAAO1E,eADe,WAAtBZ,EAAS4C,SACe,SAGsB,WAAtB5C,EAAS4C,SAAwB,WAAa,aAEtEnH,IACA6J,EAAO7J,aAAY9J,MAAoB8J,IAEvCD,IACA8J,EAAO9J,YAAW7J,MAAoB6J,GAE9C,CACA7U,KAAKwW,qBAAuB8C,EAC5BS,EAAa/Z,KAAKwX,aAAazM,MAAO4T,EAC1C,CAEA5G,0BACIgC,EAAa/Z,KAAKwX,aAAazM,MAAO,CAClCjC,IAAK,IACLC,KAAM,IACNE,MAAO,IACPD,OAAQ,IACRN,OAAQ,GACRD,MAAO,GACPuR,WAAY,GACZC,eAAgB,IAExB,CAEAnC,6BACIiC,EAAa/Z,KAAKqR,MAAMtG,MAAO,CAC3BjC,IAAK,GACLC,KAAM,GACNC,OAAQ,GACRC,MAAO,GACPoQ,SAAU,GACVwF,UAAW,IAEnB,CAEAhB,yBAAyBjF,EAAaS,GAClC,MAAMsF,EAAS,CAAC,EACVG,EAAmB9e,KAAK4e,oBACxBG,EAAwB/e,KAAK4W,uBAC7BhJ,EAAS5N,KAAKmM,YAAY0H,YAChC,GAAIiL,EAAkB,CAClB,MAAMlW,EAAiB5I,KAAKuK,eAAe1B,4BAC3CkR,EAAa4E,EAAQ3e,KAAKgf,kBAAkB3F,EAAUT,EAAahQ,IACnEmR,EAAa4E,EAAQ3e,KAAKif,kBAAkB5F,EAAUT,EAAahQ,GACvE,MAEI+V,EAAOtF,SAAW,SAOtB,IAAI6F,EAAkB,GAClB5C,EAAUtc,KAAKuc,WAAWlD,EAAU,KACpCmD,EAAUxc,KAAKuc,WAAWlD,EAAU,KACpCiD,IACA4C,GAAoB,cAAa5C,SAEjCE,IACA0C,GAAoB,cAAa1C,QAErCmC,EAAOE,UAAYK,EAAgBC,OAM/BvR,EAAOkH,YACHgK,EACAH,EAAO7J,aAAY9J,MAAoB4C,EAAOkH,WAEzCiK,IACLJ,EAAO7J,UAAY,KAGvBlH,EAAOiH,WACHiK,EACAH,EAAO9J,YAAW7J,MAAoB4C,EAAOiH,UAExCkK,IACLJ,EAAO9J,SAAW,KAG1BkF,EAAa/Z,KAAKqR,MAAMtG,MAAO4T,EACnC,CAEAK,kBAAkB3F,EAAUT,EAAahQ,GAGrC,IAAI+V,EAAS,CAAE7V,IAAK,GAAIE,OAAQ,IAC5B8P,EAAe9Y,KAAK+Y,iBAAiBH,EAAa5Y,KAAKoY,aAAciB,GAezE,OAdIrZ,KAAKyW,YACLqC,EAAe9Y,KAAKmd,qBAAqBrE,EAAc9Y,KAAKoY,aAAcxP,IAIpD,WAAtByQ,EAAS4C,SAIT0C,EAAO3V,OADgBhJ,KAAK4E,UAAUsE,gBAAgBkW,cACjBtG,EAAa0C,EAAIxb,KAAKoY,aAAa1P,QAAvD,KAGjBiW,EAAO7V,OAAMkC,MAAoB8N,EAAa0C,GAE3CmD,CACX,CAEAM,kBAAkB5F,EAAUT,EAAahQ,GAGrC,IASIyW,EATAV,EAAS,CAAE5V,KAAM,GAAIE,MAAO,IAC5B6P,EAAe9Y,KAAK+Y,iBAAiBH,EAAa5Y,KAAKoY,aAAciB,GAwBzE,OAvBIrZ,KAAKyW,YACLqC,EAAe9Y,KAAKmd,qBAAqBrE,EAAc9Y,KAAKoY,aAAcxP,IAQ1EyW,EADArf,KAAK2b,SAC2C,QAAtBtC,EAAS2C,SAAqB,OAAS,QAGjB,QAAtB3C,EAAS2C,SAAqB,QAAU,OAItC,UAA5BqD,EAEAV,EAAO1V,MADejJ,KAAK4E,UAAUsE,gBAAgBoW,aAClBxG,EAAayC,EAAIvb,KAAKoY,aAAa3P,OAAtD,KAGhBkW,EAAO5V,QAAOiC,MAAoB8N,EAAayC,GAE5CoD,CACX,CAKAX,uBAEI,MAAMuB,EAAevf,KAAKmY,iBACpBqH,EAAgBxf,KAAKqR,MAAMjI,wBAI3BqW,EAAwBzf,KAAK+W,aAAalZ,IAAIiH,GACzCA,EAAWmC,gBAAgBC,cAAckC,yBAEpD,MAAO,CACHsW,gBAAiBvS,GAA4BoS,EAAcE,GAC3DE,oBAAqB3S,EAA6BuS,EAAcE,GAChEG,iBAAkBzS,GAA4BqS,EAAeC,GAC7DI,qBAAsB7S,EAA6BwS,EAAeC,GAE1E,CAEA7C,mBAAmB5d,KAAW8gB,GAC1B,OAAOA,EAAUC,OAAO,CAACC,EAAcC,IAC5BD,EAAepT,KAAK0Q,IAAI2C,EAAiB,GACjDjhB,EACP,CAEAiZ,2BAMI,MAAMxP,EAAQzI,KAAK4E,UAAUsE,gBAAgBoW,YACvC5W,EAAS1I,KAAK4E,UAAUsE,gBAAgBkW,aACxCxW,EAAiB5I,KAAKuK,eAAe1B,4BAC3C,MAAO,CACHC,IAAKF,EAAeE,IAAM9I,KAAK8W,gBAC/B/N,KAAMH,EAAeG,KAAO/I,KAAK8W,gBACjC7N,MAAOL,EAAeG,KAAON,EAAQzI,KAAK8W,gBAC1C9N,OAAQJ,EAAeE,IAAMJ,EAAS1I,KAAK8W,gBAC3CrO,MAAOA,EAAQ,EAAIzI,KAAK8W,gBACxBpO,OAAQA,EAAS,EAAI1I,KAAK8W,gBAElC,CAEA6E,SACI,MAA2C,QAApC3b,KAAKmM,YAAYsI,cAC5B,CAEAmK,oBACI,OAAQ5e,KAAK4W,wBAA0B5W,KAAKyW,SAChD,CAEA8F,WAAWlD,EAAU6G,GACjB,MAAa,MAATA,EAG2B,MAApB7G,EAASiD,QAAkBtc,KAAKkX,SAAWmC,EAASiD,QAEpC,MAApBjD,EAASmD,QAAkBxc,KAAKmX,SAAWkC,EAASmD,OAC/D,CAEAjF,qBAcA,CAEAwG,iBAAiBvI,GACTxV,KAAKqR,UACLqE,MAAYF,GAAYzP,QAAQoa,IACX,KAAbA,IAAmE,IAAhDngB,KAAKoX,qBAAqB7Q,QAAQ4Z,KACrDngB,KAAKoX,qBAAqBjW,KAAKgf,GAC/BngB,KAAKqR,MAAMpG,UAAUzN,IAAI2iB,GAAQ,EAIjD,CAEAtI,qBACQ7X,KAAKqR,QACLrR,KAAKoX,qBAAqBrR,QAAQoa,IAC9BngB,KAAKqR,MAAMpG,UAAUxN,OAAO0iB,EAAQ,GAExCngB,KAAKoX,qBAAuB,GAEpC,CAEAe,iBACI,MAAMrI,EAAS9P,KAAKgb,QACpB,GAAIlL,aAAkBsQ,MAClB,OAAOtQ,EAAO5I,cAAckC,wBAGhC,GAAI0G,aAAkBuQ,QAClB,OAAOvQ,EAAO1G,wBAElB,MAAMX,EAAQqH,EAAOrH,OAAS,EACxBC,EAASoH,EAAOpH,QAAU,EAEhC,MAAO,CACHI,IAAKgH,EAAO0L,EACZxS,OAAQ8G,EAAO0L,EAAI9S,EACnBK,KAAM+G,EAAOyL,EACbtS,MAAO6G,EAAOyL,EAAI9S,EAClBC,SACAD,QAER,EAGJ,SAASsR,EAAauG,EAAa3d,GAC/B,QAAS6L,KAAO7L,EACRA,EAAO4d,eAAe/R,KACtB8R,EAAY9R,GAAO7L,EAAO6L,IAGlC,OAAO8R,CACX,CAKA,SAASpD,GAAcsD,GACnB,GAAqB,iBAAVA,GAA+B,MAATA,EAAe,CAC5C,MAAOvd,EAAOwd,GAASD,EAAME,MAAMxK,IACnC,OAAQuK,GAAmB,OAAVA,EAAqC,KAApBE,WAAW1d,EACjD,CACA,OAAOud,GAAS,IACpB,CAOA,SAASnE,GAA6BuE,GAClC,MAAO,CACH9X,IAAK8D,KAAKiU,MAAMD,EAAW9X,KAC3BG,MAAO2D,KAAKiU,MAAMD,EAAW3X,OAC7BD,OAAQ4D,KAAKiU,MAAMD,EAAW5X,QAC9BD,KAAM6D,KAAKiU,MAAMD,EAAW7X,MAC5BN,MAAOmE,KAAKiU,MAAMD,EAAWnY,OAC7BC,OAAQkE,KAAKiU,MAAMD,EAAWlY,QAEtC,CACA,MAcMoY,GAAe,6BAOrB,MAAMC,GACFjgB,cACId,KAAKghB,aAAe,SACpBhhB,KAAKihB,WAAa,GAClBjhB,KAAKkhB,cAAgB,GACrBlhB,KAAKmhB,YAAc,GACnBnhB,KAAKohB,WAAa,GAClBphB,KAAKqhB,SAAW,GAChBrhB,KAAKshB,OAAS,GACdthB,KAAKuhB,QAAU,GACfvhB,KAAKyX,aAAc,CACvB,CACA/M,OAAO6B,GACH,MAAMqB,EAASrB,EAAWsH,YAC1B7T,KAAKmM,YAAcI,EACfvM,KAAKshB,SAAW1T,EAAOnF,OACvB8D,EAAW0H,WAAW,CAAExL,MAAOzI,KAAKshB,SAEpCthB,KAAKuhB,UAAY3T,EAAOlF,QACxB6D,EAAW0H,WAAW,CAAEvL,OAAQ1I,KAAKuhB,UAEzChV,EAAWgG,YAAYtH,UAAUzN,IAAIsjB,IACrC9gB,KAAKyX,aAAc,CACvB,CAKA3O,IAAI7F,EAAQ,IACR,OAAAjD,KAAKkhB,cAAgB,GACrBlhB,KAAKihB,WAAahe,EAClBjD,KAAKmhB,YAAc,aACZnhB,IACX,CAKA+I,KAAK9F,EAAQ,IACT,OAAAjD,KAAKqhB,SAAWpe,EAChBjD,KAAKohB,WAAa,OACXphB,IACX,CAKAgJ,OAAO/F,EAAQ,IACX,OAAAjD,KAAKihB,WAAa,GAClBjhB,KAAKkhB,cAAgBje,EACrBjD,KAAKmhB,YAAc,WACZnhB,IACX,CAKAiJ,MAAMhG,EAAQ,IACV,OAAAjD,KAAKqhB,SAAWpe,EAChBjD,KAAKohB,WAAa,QACXphB,IACX,CAMAod,MAAMna,EAAQ,IACV,OAAAjD,KAAKqhB,SAAWpe,EAChBjD,KAAKohB,WAAa,QACXphB,IACX,CAMAwhB,IAAIve,EAAQ,IACR,OAAAjD,KAAKqhB,SAAWpe,EAChBjD,KAAKohB,WAAa,MACXphB,IACX,CAOAyI,MAAMxF,EAAQ,IACV,OAAIjD,KAAKmM,YACLnM,KAAKmM,YAAY8H,WAAW,CAAExL,MAAOxF,IAGrCjD,KAAKshB,OAASre,EAEXjD,IACX,CAOA0I,OAAOzF,EAAQ,IACX,OAAIjD,KAAKmM,YACLnM,KAAKmM,YAAY8H,WAAW,CAAEvL,OAAQzF,IAGtCjD,KAAKuhB,QAAUte,EAEZjD,IACX,CAOAyhB,mBAAmBvG,EAAS,IACxB,OAAAlb,KAAK+I,KAAKmS,GACVlb,KAAKohB,WAAa,SACXphB,IACX,CAOA0hB,iBAAiBxG,EAAS,IACtB,OAAAlb,KAAK8I,IAAIoS,GACTlb,KAAKmhB,YAAc,SACZnhB,IACX,CAKA8T,QAII,IAAK9T,KAAKmM,cAAgBnM,KAAKmM,YAAYC,cACvC,OAEJ,MAAMuS,EAAS3e,KAAKmM,YAAYM,eAAe1B,MACzC4W,EAAe3hB,KAAKmM,YAAYoG,YAAYxH,MAC5C6C,EAAS5N,KAAKmM,YAAY0H,aACxBpL,QAAOC,SAAQmM,WAAUC,aAAclH,EACzCgU,IAAuC,SAAVnZ,GAA8B,UAAVA,GACjDoM,GAAyB,SAAbA,GAAoC,UAAbA,GACnCgN,IAAsC,SAAXnZ,GAAgC,UAAXA,GAChDoM,GAA2B,SAAdA,GAAsC,UAAdA,GACrCgN,EAAY9hB,KAAKohB,WACjBW,EAAU/hB,KAAKqhB,SACf/C,EAAmD,QAA3Cte,KAAKmM,YAAY0H,YAAYQ,UAC3C,IAAI2N,EAAa,GACbC,EAAc,GACdhI,EAAiB,GACjB2H,EACA3H,EAAiB,aAEE,WAAd6H,GACL7H,EAAiB,SACbqE,EACA2D,EAAcF,EAGdC,EAAaD,GAGZzD,EACa,SAAdwD,GAAsC,QAAdA,GACxB7H,EAAiB,WACjB+H,EAAaD,IAEM,UAAdD,GAAuC,UAAdA,KAC9B7H,EAAiB,aACjBgI,EAAcF,GAGC,SAAdD,GAAsC,UAAdA,GAC7B7H,EAAiB,aACjB+H,EAAaD,IAEM,UAAdD,GAAuC,QAAdA,KAC9B7H,EAAiB,WACjBgI,EAAcF,GAElBpD,EAAOtF,SAAWrZ,KAAKghB,aACvBrC,EAAOqD,WAAaJ,EAA4B,IAAMI,EACtDrD,EAAOuD,UAAYL,EAA0B,IAAM7hB,KAAKihB,WACxDtC,EAAOwD,aAAeniB,KAAKkhB,cAC3BvC,EAAOsD,YAAcL,EAA4B,IAAMK,EACvDN,EAAa1H,eAAiBA,EAC9B0H,EAAa3H,WAAa6H,EAA0B,aAAe7hB,KAAKmhB,WAC5E,CAKAhO,UACI,GAAInT,KAAKyX,cAAgBzX,KAAKmM,YAC1B,OAEJ,MAAMwS,EAAS3e,KAAKmM,YAAYM,eAAe1B,MACzCqX,EAASpiB,KAAKmM,YAAYoG,YAC1BoP,EAAeS,EAAOrX,MAC5BqX,EAAOnX,UAAUxN,OAAOqjB,IACxBa,EAAa1H,eACT0H,EAAa3H,WACT2E,EAAOuD,UACHvD,EAAOwD,aACHxD,EAAOqD,WACHrD,EAAOsD,YACHtD,EAAOtF,SACH,GAC5BrZ,KAAKmM,YAAc,KACnBnM,KAAKyX,aAAc,CACvB,EAGJ,IACM4K,GAAsB,MAA5B,MAAMA,EACFvhB,YAAYyJ,EAAgB3F,EAAWR,EAAWmS,GAC9CvW,KAAKuK,eAAiBA,EACtBvK,KAAK4E,UAAYA,EACjB5E,KAAKoE,UAAYA,EACjBpE,KAAKuW,kBAAoBA,CAC7B,CAIA+L,SACI,OAAO,IAAIvB,EACf,CAKAwB,oBAAoBzS,GAChB,OAAO,IAAIqG,GAAkCrG,EAAQ9P,KAAKuK,eAAgBvK,KAAK4E,UAAW5E,KAAKoE,UAAWpE,KAAKuW,kBACnH,CAAClP,SACQrH,KAAKsH,UAAI,SAAAC,GAAA,WAAAA,GAAwF8a,GA5hEV7a,MA4hEkDC,IA5hElDD,MA4hE+EE,MA5hE/EF,MA4hEoG8I,MA5hEpG9I,MA4hE8H+I,IAAgB,EAA6ClJ,SAClRrH,KAAK2H,WA7hEkFH,MAAE,CAAAI,MA6hEYya,EAAsBxa,QAAtBwa,EAAsB/a,UAAAQ,WAAc,SACrJ,OAtBKua,CAAsB,KAgCxBG,GAAe,EAWbC,EAAO,MAAb,MAAMA,EACF3hB,YAEA4hB,EAAkBnM,EAAmBoM,EAA2BC,EAAkBtR,EAAqBuR,EAAW1e,EAASS,EAAWke,EAAiBvR,EAAWC,EAAyBuR,GACvL/iB,KAAK0iB,iBAAmBA,EACxB1iB,KAAKuW,kBAAoBA,EACzBvW,KAAK2iB,0BAA4BA,EACjC3iB,KAAK4iB,iBAAmBA,EACxB5iB,KAAKsR,oBAAsBA,EAC3BtR,KAAK6iB,UAAYA,EACjB7iB,KAAKmE,QAAUA,EACfnE,KAAK4E,UAAYA,EACjB5E,KAAK8iB,gBAAkBA,EACvB9iB,KAAKuR,UAAYA,EACjBvR,KAAKwR,wBAA0BA,EAC/BxR,KAAK+iB,sBAAwBA,CACjC,CAMAC,OAAOpV,GACH,MAAMqV,EAAOjjB,KAAKkjB,qBACZC,EAAOnjB,KAAKojB,mBAAmBH,GAC/BI,EAAerjB,KAAKsjB,oBAAoBH,GACxCI,EAAgB,IAAIxV,GAAcH,GACxC2V,SAAclP,UAAYkP,EAAclP,WAAarU,KAAK8iB,gBAAgB7f,MACnE,IAAIiO,GAAWmS,EAAcJ,EAAME,EAAMI,EAAevjB,KAAKmE,QAASnE,KAAKsR,oBAAqBtR,KAAK4E,UAAW5E,KAAKuR,UAAWvR,KAAKwR,wBAAwD,mBAA/BxR,KAAK+iB,sBAC9K,CAMA1J,WACI,OAAOrZ,KAAK4iB,gBAChB,CAKAQ,mBAAmBH,GACf,MAAME,EAAOnjB,KAAK4E,UAAUmM,cAAc,OAC1CoS,SAAKziB,GAAM,eAAc8hB,KACzBW,EAAKlY,UAAUzN,IAAI,oBACnBylB,EAAKhS,YAAYkS,GACVA,CACX,CAMAD,qBACI,MAAMD,EAAOjjB,KAAK4E,UAAUmM,cAAc,OAC1C,OAAA/Q,KAAKuW,kBAAkB9F,sBAAsBQ,YAAYgS,GAClDA,CACX,CAMAK,oBAAoBH,GAGhB,OAAKnjB,KAAKwjB,UACNxjB,KAAKwjB,QAAUxjB,KAAK6iB,UAAUzd,IAAIqe,QAE/B,IAAIC,KAAgBP,EAAMnjB,KAAK2iB,0BAA2B3iB,KAAKwjB,QAASxjB,KAAK6iB,UAAW7iB,KAAK4E,UACxG,CAACyC,SACQrH,KAAKsH,UAAI,SAAAC,GAAA,WAAAA,GAAwFkb,GA3nEVjb,MA2nEmCiG,IA3nEnCjG,MA2nEqE+I,IA3nErE/I,MA2nEkGA,OA3nElGA,MA2nE0I6a,IA3nE1I7a,MA2nE6KwH,IA3nE7KxH,MA2nEmNA,OA3nEnNA,MA2nE2OA,OA3nE3OA,MA2nEiQE,MA3nEjQF,MA2nEsRmc,MA3nEtRnc,MA2nEoToc,MA3nEpTpc,MA2nE4UgI,IA3nE5UhI,MA2nEsXqc,MAAqB,KAA6Dxc,SAC/hBrH,KAAK2H,WA5nEkFH,MAAE,CAAAI,MA4nEY6a,EAAO5a,QAAP4a,EAAOnb,UAAAQ,WAAc,SACtI,OA1EK2a,CAAO,KA2eb,MAAMqB,GAAiD,CACnDC,QAxX0C,IAAIC,MAAe,yCAyX7DC,KAAM,CAACxB,GACPyB,WAPJ,SAASC,GAAuD/H,GAC5D,MAAO,IAAMA,EAAQsG,iBAAiB5U,YAC1C,GAME,IAEIsW,GAAa,MAAnB,MAAMA,EAAc/c,SACPrH,KAAKsH,UAAI,SAAAC,GAAA,WAAAA,GAAwF6c,EAAa,EAAkD/c,SAChKrH,KAAK8J,UAtiFkFtC,MAAE,CAAAuC,KAsiFSqa,IAAgL/c,SAClRrH,KAAKgK,UAviFkFxC,MAAE,CAAA6c,UAuiFmC,CAAC5B,EAASqB,IAA+C5Z,QAAA,CAAYC,KAAYma,KAAcra,GAAiBA,MACxP,OAJKma,CAAa,0BCxyFnB,MAAAG,GAAA,YAUMC,GAA8B,IAAIR,MAAe,+BAMjDS,GAA+C,CACjDV,QAASS,GACTP,KAAM,CAACxB,GACPyB,WAPJ,SAASQ,GAAoCtI,GACzC,MAAO,IAAMA,EAAQsG,iBAAiB5U,WAAW,CAAER,eAZ5B,IAa3B,GAgBMqX,GAA8B,IAAIX,MAAe,8BAA+B,CAClFlc,WAAY,OACZD,QAVJ,SAAS+c,KACL,MAAO,CACHC,UAAW,EACXC,UAAW,EACXC,kBAAmB,KAE3B,IAYMC,GAAc,gBAEdC,IAAyBC,QAAgC,CAAEC,SAAS,IAWpD,IAChBC,GAAe,MAArB,MAAMA,EAEF,YAAI/L,GACA,OAAOrZ,KAAKqlB,SAChB,CACA,YAAIhM,CAASpW,GACLA,IAAUjD,KAAKqlB,YACfrlB,KAAKqlB,UAAYpiB,EACbjD,KAAKmM,cACLnM,KAAKslB,gBAAgBtlB,KAAKmM,aAC1BnM,KAAKulB,kBAAkBC,KAAK,GAC5BxlB,KAAKmM,YAAYW,kBAG7B,CAKA,oBAAI2Y,GACA,OAAOzlB,KAAK0lB,iBAChB,CACA,oBAAID,CAAiBxiB,GACjBjD,KAAK0lB,qBAAoBC,MAAsB1iB,GAC/CjD,KAAKkM,UACLlM,KAAKmM,YAAc,IACvB,CAEA,YAAIyZ,GACA,OAAO5lB,KAAK6lB,SAChB,CACA,YAAID,CAAS3iB,GACTjD,KAAK6lB,aAAYF,MAAsB1iB,GAEnCjD,KAAK6lB,UACL7lB,KAAK8lB,KAAK,GAGV9lB,KAAK+lB,kCAEb,CAEA,aAAIlB,GACA,OAAO7kB,KAAKgmB,UAChB,CACA,aAAInB,CAAU5hB,GACVjD,KAAKgmB,cAAaC,MAAqBhjB,EAC3C,CAEA,aAAI6hB,GACA,OAAO9kB,KAAKkmB,UAChB,CACA,aAAIpB,CAAU7hB,GACVjD,KAAKkmB,cAAaD,MAAqBhjB,GACnCjD,KAAKulB,mBACLvlB,KAAKulB,iBAAiBY,qBAAuBnmB,KAAKkmB,WAE1D,CAEA,WAAIE,GACA,OAAOpmB,KAAKqmB,QAChB,CACA,WAAID,CAAQnjB,GACRjD,KAAKsmB,eAAeC,kBAAkBvmB,KAAKwmB,YAAYtf,cAAelH,KAAKqmB,SAAU,WAIrFrmB,KAAKqmB,SAAoB,MAATpjB,EAAgBwjB,OAAOxjB,GAAOkc,OAAS,IAClDnf,KAAKqmB,UAAYrmB,KAAK0mB,oBACvB1mB,KAAK8lB,KAAK,IAGV9lB,KAAK+lB,mCACL/lB,KAAK2mB,wBACL3mB,KAAKmE,QAAQiD,kBAAkB,KAK3BvF,QAAQC,UAAUC,KAAK,KACnB/B,KAAKsmB,eAAeM,SAAS5mB,KAAKwmB,YAAYtf,cAAelH,KAAKomB,QAAS,UAAS,EACvF,GAGb,CAEA,gBAAIS,GACA,OAAO7mB,KAAK8mB,aAChB,CACA,gBAAID,CAAa5jB,GACbjD,KAAK8mB,cAAgB7jB,EACjBjD,KAAKulB,kBACLvlB,KAAK+mB,iBAAiB/mB,KAAK8mB,cAEnC,CACAhmB,YAAYkmB,EAAUR,EAAaza,EAAmBkb,EAAmB9iB,EAASC,EAAWkiB,EAAgBY,EAAelZ,EAAgBmZ,EAAMC,EAAiBxiB,GAC/J5E,KAAKgnB,SAAWA,EAChBhnB,KAAKwmB,YAAcA,EACnBxmB,KAAK+L,kBAAoBA,EACzB/L,KAAKinB,kBAAoBA,EACzBjnB,KAAKmE,QAAUA,EACfnE,KAAKoE,UAAYA,EACjBpE,KAAKsmB,eAAiBA,EACtBtmB,KAAKknB,cAAgBA,EACrBlnB,KAAKmnB,KAAOA,EACZnnB,KAAKonB,gBAAkBA,EACvBpnB,KAAKqlB,UAAY,QACjBrlB,KAAK0lB,mBAAoB,EACzB1lB,KAAK6lB,WAAY,EACjB7lB,KAAKqnB,kBAAmB,EACxBrnB,KAAKsnB,+BAAgC,EACrCtnB,KAAK8W,gBAAkB,EACvB9W,KAAKunB,gBAAkB,MAevBvnB,KAAKwnB,cAAgB,OACrBxnB,KAAKqmB,SAAW,GAEhBrmB,KAAKynB,kBAAoB,GAEzBznB,KAAK0nB,WAAa,IAAInjB,IACtBvE,KAAKmS,gBAAkBnE,EACvBhO,KAAK4E,UAAYA,EACbwiB,IACApnB,KAAKgmB,WAAaoB,EAAgBvC,UAClC7kB,KAAKkmB,WAAakB,EAAgBtC,UAC9BsC,EAAgB/N,WAChBrZ,KAAKqZ,SAAW+N,EAAgB/N,UAEhC+N,EAAgB3B,mBAChBzlB,KAAKylB,iBAAmB2B,EAAgB3B,kBAExC2B,EAAgBI,gBAChBxnB,KAAKwnB,cAAgBJ,EAAgBI,gBAG7CL,EAAK/e,OAAO9K,QAAKsY,KAAU5V,KAAK0nB,aAAatkB,UAAU,KAC/CpD,KAAKmM,aACLnM,KAAKslB,gBAAgBtlB,KAAKmM,YAAW,EAGjD,CACAwb,kBAEI3nB,KAAKqnB,kBAAmB,EACxBrnB,KAAK+lB,mCACL/lB,KAAKknB,cACAU,QAAQ5nB,KAAKwmB,aACblpB,QAAKsY,KAAU5V,KAAK0nB,aACpBtkB,UAAU0M,IAENA,EAGe,aAAXA,GACL9P,KAAKmE,QAAQkI,IAAI,IAAMrM,KAAKwlB,QAH5BxlB,KAAKmE,QAAQkI,IAAI,IAAMrM,KAAK8lB,KAAK,GAAE,EAM/C,CAIAhgB,cACI,MAAMoB,EAAgBlH,KAAKwmB,YAAYtf,cACvC8O,aAAahW,KAAK6nB,oBACd7nB,KAAKmM,cACLnM,KAAKmM,YAAYgH,UACjBnT,KAAKulB,iBAAmB,MAG5BvlB,KAAKynB,kBAAkB1hB,QAAQ,EAAEoC,EAAO2f,MACpC5gB,EAActJ,oBAAoBuK,EAAO2f,EAAU7C,GAAsB,GAE7EjlB,KAAKynB,kBAAkBzoB,OAAS,EAChCgB,KAAK0nB,WAAW3oB,OAChBiB,KAAK0nB,WAAWxkB,WAChBlD,KAAKsmB,eAAeC,kBAAkBrf,EAAelH,KAAKomB,QAAS,WACnEpmB,KAAKknB,cAAca,eAAe7gB,EACtC,CAEAse,KAAK/kB,EAAQT,KAAK6kB,UAAW/U,GACzB,GAAI9P,KAAK4lB,WAAa5lB,KAAKomB,SAAWpmB,KAAK0mB,oBAEvC,YADA1mB,KAAKulB,kBAAkByC,2BAG3B,MAAMzb,EAAavM,KAAKioB,eAAenY,GACvC9P,KAAKkM,UACLlM,KAAKkoB,QACDloB,KAAKkoB,SAAW,IAAIC,KAAgBnoB,KAAKooB,kBAAmBpoB,KAAKinB,mBACrE,MAAMoB,EAAYroB,KAAKulB,iBAAmBhZ,EAAW7B,OAAO1K,KAAKkoB,SAASG,SAC1EA,EAASC,gBAAkBtoB,KAAKwmB,YAAYtf,cAC5CmhB,EAASlC,qBAAuBnmB,KAAKkmB,WACrCmC,EACKE,cACAjrB,QAAKsY,KAAU5V,KAAK0nB,aACpBtkB,UAAU,IAAMpD,KAAKkM,WAC1BlM,KAAK+mB,iBAAiB/mB,KAAK8mB,eAC3B9mB,KAAK2mB,wBACL0B,EAAS7C,KAAK/kB,EAClB,CAEAqlB,KAAKrlB,EAAQT,KAAK8kB,WACd,MAAMuD,EAAWroB,KAAKulB,iBAClB8C,IACIA,EAASG,YACTH,EAASvC,KAAKrlB,IAGd4nB,EAASL,2BACThoB,KAAKkM,WAGjB,CAEAuc,OAAO3Y,GACH9P,KAAK0mB,oBAAsB1mB,KAAK8lB,OAAS9lB,KAAKwlB,UAAKnoB,EAAWyS,EAClE,CAEA4W,oBACI,QAAS1mB,KAAKulB,kBAAoBvlB,KAAKulB,iBAAiBiD,WAC5D,CAEAP,eAAenY,GACX,GAAI9P,KAAKmM,YAAa,CAClB,MAAMuc,EAAmB1oB,KAAKmM,YAAY0H,YACrCxB,iBACL,KAAMrS,KAAKylB,mBAAqB3V,IAAW4Y,EAAiB1N,mBAAmBoF,MAC3E,OAAOpgB,KAAKmM,YAEhBnM,KAAKkM,SACT,CACA,MAAMyc,EAAsB3oB,KAAK+L,kBAAkB1F,4BAA4BrG,KAAKwmB,aAE9ExS,EAAWhU,KAAKgnB,SACjB3N,WACAkJ,oBAAoBviB,KAAKylB,kBAAmB3V,GAA6B9P,KAAKwmB,aAC9EpL,sBAAuB,IAAGpb,KAAKunB,2BAC/B/M,wBAAuB,GACvBF,mBAAmBta,KAAK8W,iBACxBqD,yBAAyBwO,GAC9B3U,SAASqD,gBAAgB/Z,QAAKsY,KAAU5V,KAAK0nB,aAAatkB,UAAUgF,IAChEpI,KAAK4oB,4BAA4BxgB,EAAOsG,gBACpC1O,KAAKulB,kBACDnd,EAAOuG,yBAAyBiR,kBAAoB5f,KAAKulB,iBAAiBiD,aAG1ExoB,KAAKmE,QAAQkI,IAAI,IAAMrM,KAAK8lB,KAAK,GAAE,GAI/C9lB,KAAKmM,YAAcnM,KAAKgnB,SAAShE,OAAO,CACpC3O,UAAWrU,KAAKmnB,KAChB9U,iBAAkB2B,EAClB/F,WAAa,GAAEjO,KAAKunB,mBAAmBvC,KACvChX,eAAgBhO,KAAKmS,oBAEzBnS,KAAKslB,gBAAgBtlB,KAAKmM,aAC1BnM,KAAKmM,YACAyH,cACAtW,QAAKsY,KAAU5V,KAAK0nB,aACpBtkB,UAAU,IAAMpD,KAAKkM,WAC1BlM,KAAKmM,YACA8D,uBACA3S,QAAKsY,KAAU5V,KAAK0nB,aACpBtkB,UAAU,IAAMpD,KAAKulB,kBAAkBsD,0BAC5C7oB,KAAKmM,YACAmD,gBACAhS,QAAKsY,KAAU5V,KAAK0nB,aACpBtkB,UAAU+E,IACPnI,KAAK0mB,qBAAuBve,EAAM2gB,UAAYC,QAAU,EAACC,MAAe7gB,KACxEA,EAAM8gB,iBACN9gB,EAAM+gB,kBACNlpB,KAAKmE,QAAQkI,IAAI,IAAMrM,KAAK8lB,KAAK,IAAE,GAGvC9lB,KAAKonB,iBAAiB+B,6BACtBnpB,KAAKmM,YAAYmI,cAAe,GAAEtU,KAAKunB,iDAEpCvnB,KAAKmM,WAChB,CAEAD,UACQlM,KAAKmM,aAAenM,KAAKmM,YAAYC,eACrCpM,KAAKmM,YAAYG,SAErBtM,KAAKulB,iBAAmB,IAC5B,CAEAD,gBAAgB/Y,GACZ,MAAM8M,EAAW9M,EAAWsH,YAAYxB,iBAClCvC,EAAS9P,KAAKopB,aACdhN,EAAUpc,KAAKqpB,sBACrBhQ,EAASgB,cAAc,CACnBra,KAAKspB,WAAW,IAAKxZ,EAAOyZ,QAASnN,EAAQmN,OAC7CvpB,KAAKspB,WAAW,IAAKxZ,EAAO4I,YAAa0D,EAAQ1D,YAEzD,CAEA4Q,WAAWjQ,GACP,OAAOA,CACX,CAKA+P,aACI,MAAMI,GAASxpB,KAAKmnB,MAA2B,OAAnBnnB,KAAKmnB,KAAKlkB,MAChCoW,EAAWrZ,KAAKqZ,SACtB,IAAIoQ,EACY,SAAZpQ,GAAmC,SAAZA,EACvBoQ,EAAiB,CAAEhO,QAAS,SAAUI,QAAqB,SAAZxC,EAAsB,MAAQ,UAE5D,UAAZA,GACQ,QAAZA,GAAsBmQ,GACV,SAAZnQ,IAAwBmQ,EACzBC,EAAiB,CAAEhO,QAAS,QAASI,QAAS,WAE7B,SAAZxC,GACQ,SAAZA,GAAuBmQ,GACX,QAAZnQ,IAAuBmQ,KACxBC,EAAiB,CAAEhO,QAAS,MAAOI,QAAS,WAKhD,MAAQN,IAAGC,KAAMxb,KAAK0pB,gBAAgBD,EAAehO,QAASgO,EAAe5N,SAC7E,MAAO,CACH0N,KAAME,EACN/Q,SAAU,CAAE+C,QAASF,EAAGM,QAASL,GAEzC,CAEA6N,sBACI,MAAMG,GAASxpB,KAAKmnB,MAA2B,OAAnBnnB,KAAKmnB,KAAKlkB,MAChCoW,EAAWrZ,KAAKqZ,SACtB,IAAIsQ,EACY,SAAZtQ,EACAsQ,EAAkB,CAAE3N,SAAU,SAAUC,SAAU,UAEjC,SAAZ5C,EACLsQ,EAAkB,CAAE3N,SAAU,SAAUC,SAAU,OAEjC,UAAZ5C,GACQ,QAAZA,GAAsBmQ,GACV,SAAZnQ,IAAwBmQ,EACzBG,EAAkB,CAAE3N,SAAU,MAAOC,SAAU,WAE9B,SAAZ5C,GACQ,SAAZA,GAAuBmQ,GACX,QAAZnQ,IAAuBmQ,KACxBG,EAAkB,CAAE3N,SAAU,QAASC,SAAU,WAKrD,MAAQV,IAAGC,KAAMxb,KAAK0pB,gBAAgBC,EAAgB3N,SAAU2N,EAAgB1N,UAChF,MAAO,CACHsN,KAAMI,EACNjR,SAAU,CAAEsD,SAAUT,EAAGU,SAAUT,GAE3C,CAEAmL,wBAGQ3mB,KAAKulB,mBACLvlB,KAAKulB,iBAAiBa,QAAUpmB,KAAKomB,QACrCpmB,KAAKulB,iBAAiBqE,gBACtB5pB,KAAKmE,QAAQ0lB,iBAAiBvsB,QAAKyV,KAAK,IAAC,EAAG6C,KAAU5V,KAAK0nB,aAAatkB,UAAU,KAC1EpD,KAAKulB,kBACLvlB,KAAKmM,YAAYW,gBAAe,GAIhD,CAEAia,iBAAiBF,GACT7mB,KAAKulB,mBACLvlB,KAAKulB,iBAAiBsB,aAAeA,EACrC7mB,KAAKulB,iBAAiBqE,gBAE9B,CAEAF,gBAAgBnO,EAAGC,GACf,MAAsB,UAAlBxb,KAAKqZ,UAA0C,UAAlBrZ,KAAKqZ,SACxB,QAANmC,EACAA,EAAI,SAEO,WAANA,IACLA,EAAI,OAIE,QAAND,EACAA,EAAI,QAEO,UAANA,IACLA,EAAI,OAGL,CAAEA,IAAGC,IAChB,CAEAoN,4BAA4Bla,GACxB,MAAQuN,WAAUR,UAASI,WAAYnN,EACvC,IAAIob,EAiBJ,GATQA,EALS,WAAb7N,EAIIjc,KAAKmnB,MAA4B,QAApBnnB,KAAKmnB,KAAKlkB,MACG,QAAZwY,EAAoB,OAAS,QAGjB,UAAZA,EAAsB,OAAS,QAItB,WAAbQ,GAAqC,QAAZJ,EAAoB,QAAU,QAErEiO,IAAgB9pB,KAAK+pB,iBAAkB,CACvC,MAAMxd,EAAavM,KAAKmM,YACxB,GAAII,EAAY,CACZ,MAAMyd,EAAe,GAAEhqB,KAAKunB,mBAAmBvC,MAC/CzY,EAAWiI,iBAAiBwV,EAAchqB,KAAK+pB,kBAC/Cxd,EAAW+H,cAAc0V,EAAcF,EAC3C,CACA9pB,KAAK+pB,iBAAmBD,CAC5B,CACJ,CAEA/D,mCAEQ/lB,KAAK6lB,YACJ7lB,KAAKomB,UACLpmB,KAAKqnB,kBACNrnB,KAAKynB,kBAAkBzoB,SAKvBgB,KAAKiqB,+BACLjqB,KAAKynB,kBAAkBtmB,KAAK,CACxB,aACAgH,IAEI,IAAI+T,EADJlc,KAAKkqB,uCAEW7sB,IAAZ8K,EAAMoT,QAA+Ble,IAAZ8K,EAAMqT,IAC/BU,EAAQ/T,GAEZnI,KAAKwlB,UAAKnoB,EAAW6e,EAAK,IAIN,QAAvBlc,KAAKwnB,gBACVxnB,KAAKmqB,oCACLnqB,KAAKynB,kBAAkBtmB,KAAK,CACxB,aACAgH,IACI,MAAMiiB,EAAQjiB,EAAMkiB,gBAAgB,GAC9Bva,EAASsa,EAAQ,CAAE7O,EAAG6O,EAAME,QAAS9O,EAAG4O,EAAMG,cAAYltB,EAGhE2C,KAAKkqB,kCACLlU,aAAahW,KAAK6nB,oBAClB7nB,KAAK6nB,mBAAqBtS,WAAW,IAAMvV,KAAKwlB,UAAKnoB,EAAWyS,GAte5D,IAseoF,KAIpG9P,KAAKwqB,cAAcxqB,KAAKynB,mBAC5B,CACAyC,kCACI,GAAIlqB,KAAKsnB,8BACL,OAEJtnB,KAAKsnB,+BAAgC,EACrC,MAAMmD,EAAgB,GACtB,GAAIzqB,KAAKiqB,+BACLQ,EAActpB,KAAK,CACf,aACAgH,IACI,MAAMuiB,EAAYviB,EAAMwiB,gBACnBD,IAAc1qB,KAAKmM,aAAaM,eAAef,SAASgf,KACzD1qB,KAAK8lB,MAAK,GAGnB,CAAC,QAAS3d,GAASnI,KAAK4qB,eAAeziB,UAAO,GAErB,QAAvBnI,KAAKwnB,cAAyB,CACnCxnB,KAAKmqB,oCACL,MAAMU,EAAmBA,KACrB7U,aAAahW,KAAK6nB,oBAClB7nB,KAAK8lB,KAAK9lB,KAAKonB,gBAAgBrC,kBAAiB,EAEpD0F,EAActpB,KAAK,CAAC,WAAY0pB,GAAmB,CAAC,cAAeA,GACvE,CACA7qB,KAAKwqB,cAAcC,GACnBzqB,KAAKynB,kBAAkBtmB,QAAQspB,EACnC,CACAD,cAAcM,GACVA,EAAU/kB,QAAQ,EAAEoC,EAAO2f,MACvB9nB,KAAKwmB,YAAYtf,cAAcvJ,iBAAiBwK,EAAO2f,EAAU7C,GAAsB,EAE/F,CACAgF,+BACI,OAAQjqB,KAAKoE,UAAU+L,MAAQnQ,KAAKoE,UAAU2mB,OAClD,CAEAH,eAAeziB,GACX,GAAInI,KAAK0mB,oBAAqB,CAC1B,MAAMsE,EAAsBhrB,KAAK4E,UAAUqmB,iBAAiB9iB,EAAMmiB,QAASniB,EAAMoiB,SAC3EzjB,EAAU9G,KAAKwmB,YAAYtf,cAK7B8jB,IAAwBlkB,IAAYA,EAAQ4E,SAASsf,IACrDhrB,KAAK8lB,MAEb,CACJ,CAEAqE,oCACI,MAAMe,EAAWlrB,KAAKwnB,cACtB,GAAiB,QAAb0D,EAAoB,CACpB,MAAMpkB,EAAU9G,KAAKwmB,YAAYtf,cAC3B6D,EAAQjE,EAAQiE,OAGL,OAAbmgB,GAA2C,UAArBpkB,EAAQqkB,UAA6C,aAArBrkB,EAAQqkB,YAC9DpgB,EAAMqgB,WACFrgB,EAAMsgB,aACFtgB,EAAMugB,iBACFvgB,EAAMwgB,cACF,SAIH,OAAbL,IAAsBpkB,EAAQ0kB,aAC9BzgB,EAAM0gB,eAAiB,QAE3B1gB,EAAM2gB,YAAc,OACpB3gB,EAAM4gB,wBAA0B,aACpC,CACJ,CAACtkB,SACQrH,KAAKsH,UAAI,SAAAC,GAA8EC,MAAE,EAAiFH,SAC1KrH,KAAK4rB,UADkFpkB,MAAE,CAAAuC,KACJqb,EAAeyG,OAAA,CAAAxS,SAAA,kCAAAoM,iBAAA,kDAAAG,SAAA,kCAAAf,UAAA,oCAAAC,UAAA,oCAAA0C,cAAA,4CAAApB,QAAA,yBAAAS,aAAA,sCAChH,OAjjBKzB,CAAe,KAslBf0G,GAAU,MAAhB,MAAMA,UAAmB1G,GACrBtkB,YAAYsb,EAAS2P,EAAYC,EAAkBC,EAAkBjkB,EAAQkkB,EAAUC,EAAeC,EAAcpe,EAAgBoG,EAAKiY,EAAgBznB,GACrJ3D,MAAMmb,EAAS2P,EAAYC,EAAkBC,EAAkBjkB,EAAQkkB,EAAUC,EAAeC,EAAcpe,EAAgBoG,EAAKiY,EAAgBznB,GACnJ5E,KAAKooB,kBAAoBkE,GACzBtsB,KAAKunB,gBAAkB,UACvBvnB,KAAK8W,gBA/lB0B,CAgmBnC,CACAwS,WAAWjQ,GACP,MACMmQ,GAASxpB,KAAKmnB,MAA2B,OAAnBnnB,KAAKmnB,KAAKlkB,MACtC,MAAyB,QAArBoW,EAASwC,QACTxC,EAASmD,SApmBQ,EAsmBS,WAArBnD,EAASwC,QACdxC,EAASmD,QAvmBQ,EAymBS,UAArBnD,EAASoC,QACdpC,EAASiD,QAAUkN,GA1mBF,IA4mBS,QAArBnQ,EAASoC,UACdpC,EAASiD,QAAUkN,EA7mBF,MA+mBdnQ,CACX,CAAChS,SACQrH,KAAKsH,UAAI,SAAAC,GAAA,WAAAA,GAAwFukB,GA/DVtkB,MA+DsCC,GA/DtCD,MA+D6DA,OA/D7DA,MA+DuFC,IA/DvFD,MA+DuHA,OA/DvHA,MA+DuJA,OA/DvJA,MA+D6K+kB,MA/D7K/kB,MA+DqMglB,MA/DrMhlB,MA+DkOglB,MA/DlOhlB,MA+D8Pgd,IA/D9Phd,MA+DsSilB,KAAiB,GA/DvTjlB,MA+DoVmd,GAA2B,GA/D/Wnd,MA+D4YE,MAAQ,EAA4CL,SACvhBrH,KAAK4rB,UAhEkFpkB,MAAE,CAAAuC,KAgEJ+hB,EAAUY,UAAA,uBAAAC,UAAA,8BAAAC,SAAA,EAAAC,aAAA,SAAAC,EAAAC,GAAA,EAAAD,GAhERtlB,MAAE,2BAAAulB,EAAAnH,SAAA,EAAAoH,SAAA,eAAAC,SAAA,CAAFzlB,SAiEnG,OA1BKskB,CAAU,KAmDVoB,GAAqB,MAA3B,MAAMA,EACFpsB,YAAYqsB,EAAoBC,GAC5BptB,KAAKmtB,mBAAqBA,EAE1BntB,KAAKqtB,qBAAsB,EAE3BrtB,KAAKstB,YAAa,EAElBttB,KAAKutB,QAAU,IAAIhpB,IACnBvE,KAAKyR,oBAAwC,mBAAlB2b,CAC/B,CAKA5H,KAAK/kB,GAE0B,MAAvBT,KAAKwtB,gBACLxX,aAAahW,KAAKwtB,gBAEtBxtB,KAAKytB,eAAiBlY,WAAW,KAC7BvV,KAAK0tB,mBAAkB,GACvB1tB,KAAKytB,oBAAiBpwB,GACvBoD,EACP,CAKAqlB,KAAKrlB,GAE0B,MAAvBT,KAAKytB,gBACLzX,aAAahW,KAAKytB,gBAEtBztB,KAAKwtB,eAAiBjY,WAAW,KAC7BvV,KAAK0tB,mBAAkB,GACvB1tB,KAAKwtB,oBAAiBnwB,GACvBoD,EACP,CAEA8nB,cACI,OAAOvoB,KAAKutB,OAChB,CAEA/E,YACI,OAAOxoB,KAAKstB,UAChB,CACAxnB,cACI9F,KAAKgoB,2BACLhoB,KAAKutB,QAAQrqB,WACblD,KAAKsoB,gBAAkB,IAC3B,CAMAO,yBACQ7oB,KAAKqtB,qBACLrtB,KAAK8lB,KAAK,EAElB,CAMA8D,gBACI5pB,KAAKmtB,mBAAmBQ,cAC5B,CACAC,mBAAoBjD,oBACXA,IAAkB3qB,KAAKsoB,gBAAgB5c,SAASif,MAC7C3qB,KAAKwoB,YACLxoB,KAAK8lB,KAAK9lB,KAAKmmB,sBAGfnmB,KAAK6tB,oBAAmB,GAGpC,CAMAC,UAAY,CAEZC,qBAAsBC,mBACdA,IAAkBhuB,KAAKiuB,gBAAkBD,IAAkBhuB,KAAKkuB,iBAChEluB,KAAK6tB,mBAAmBG,IAAkBhuB,KAAKiuB,eAEvD,CAEAjG,2BAC+B,MAAvBhoB,KAAKytB,gBACLzX,aAAahW,KAAKytB,gBAEK,MAAvBztB,KAAKwtB,gBACLxX,aAAahW,KAAKwtB,gBAEtBxtB,KAAKytB,eAAiBztB,KAAKwtB,oBAAiBnwB,CAChD,CAEAwwB,mBAAmBM,GACXA,EACAnuB,KAAKqtB,qBAAsB,EAErBrtB,KAAKwoB,aACXxoB,KAAKutB,QAAQxuB,MAErB,CAEA2uB,kBAAkBlF,GAId,MAAM4F,EAAUpuB,KAAKquB,SAASnnB,cACxBonB,EAAYtuB,KAAKiuB,eACjBM,EAAYvuB,KAAKkuB,eAMvB,GALAE,EAAQnjB,UAAUxN,OAAO+qB,EAAY+F,EAAYD,GACjDF,EAAQnjB,UAAUzN,IAAIgrB,EAAY8F,EAAYC,GAC9CvuB,KAAKstB,WAAa9E,EAGdA,IAAcxoB,KAAKyR,qBAAmD,mBAArB+c,iBAAiC,CAClF,MAAM7P,EAAS6P,iBAAiBJ,IAEsB,OAAlDzP,EAAO8P,iBAAiB,uBACsB,SAA9C9P,EAAO8P,iBAAiB,qBACxBzuB,KAAKyR,qBAAsB,EAEnC,CACI+W,GACAxoB,KAAK8tB,UAEL9tB,KAAKyR,sBACL2c,EAAQnjB,UAAUzN,IAAI,2BACtBwC,KAAK6tB,mBAAmBrF,GAEhC,CAACnhB,SACQrH,KAAKsH,UAAI,SAAAC,GAAA,WAAAA,GAAwF2lB,GAtOV1lB,MAsOiDA,OAtOjDA,MAsOkFqc,MAAqB,KAA4Dxc,SAC1PrH,KAAK4rB,UAvOkFpkB,MAAE,CAAAuC,KAuOJmjB,IACjG,OA9IKA,CAAqB,KA2JrBZ,GAAgB,MAAtB,MAAMA,UAAyBY,GAC3BpsB,YAAY4tB,EAAmBlI,EAAa4G,GACxCnsB,MAAMytB,EAAmBtB,GACzBptB,KAAKwmB,YAAcA,EAEnBxmB,KAAK2uB,cAAe,EACpB3uB,KAAKiuB,eAAiB,uBACtBjuB,KAAKkuB,eAAiB,sBAC1B,CACAJ,UACI9tB,KAAK2uB,aAAe3uB,KAAK4uB,sBACzB5uB,KAAK4pB,eACT,CAEAgF,sBACI,MAAMC,EAAO7uB,KAAKwmB,YAAYtf,cAAckC,wBAC5C,OAAOylB,EAAKnmB,OAtzBD,IAszBwBmmB,EAAKpmB,OArzB9B,GAszBd,CAACpB,SACQrH,KAAKsH,UAAI,SAAAC,GAAA,WAAAA,GAAwF+kB,GAvQV9kB,MAuQ4CA,OAvQ5CA,MAuQ6EA,OAvQ7EA,MAuQuGqc,MAAqB,KAA4Dxc,SAC/QrH,KAAK8uB,UAxQkFtnB,MAAE,CAAAuC,KAwQJuiB,EAAgBI,UAAA,4BAAAqC,UAAA,SAAAjC,EAAAC,GAxQZ,GAwQY,EAAAD,GAxQdtlB,KAAE+c,GAAA,KAAAuI,EAAA,KAAAkC,EAAFxnB,MAAEwnB,EAAFxnB,WAAEulB,EAAAsB,SAAAW,EAAAC,MAAA,GAAAtC,UAAA,eAwQsF,QAAMC,SAAA,EAAAC,aAAA,SAAAC,EAAAC,GAAA,EAAAD,GAxQ9FtlB,MAAE,sBAAA0nB,GAAA,OAwQJnC,EAAAa,kBAAAsB,EAAyB,KAAApC,GAxQvBtlB,MAAE,OAAAulB,EAAAvE,YAAA,SAAAyE,SAAA,CAAFzlB,OAAE2nB,MAAA,EAAAC,KAAA,EAAAC,OAAA,iKAAAC,SAAA,SAAAxC,EAAAC,GAAA,EAAAD,IAAFtlB,MAAE,aAAFA,MAAE,wBAAA0nB,GAAA,OAwQsfnC,EAAAgB,oBAAAmB,EAA2B,GAxQnhB1nB,MAAE,WAAFA,MAAE,GAAFA,WAwQiqB,EAAAslB,IAxQjqBtlB,MAAE,yBAAAulB,EAAA4B,cAAFnnB,MAAE,UAAAulB,EAAAlG,cAAFrf,MAAE,GAAFA,MAAEulB,EAAA3G,SAwQypB,EAAAmJ,aAAA,CAAswJ5L,MAAUhF,OAAA,4rJAAA6Q,cAAA,EAAAC,gBAAA,IAC9gL,OApBKnD,CAAgB,KA4DhBoD,GAAgB,MAAtB,MAAMA,EAAiBroB,SACVrH,KAAKsH,UAAI,SAAAC,GAAA,WAAAA,GAAwFmoB,EAAgB,EAAkDroB,SACnKrH,KAAK8J,UAnTkFtC,MAAE,CAAAuC,KAmTS2lB,IAAqNroB,SACvTrH,KAAKgK,UApTkFxC,MAAE,CAAA6c,UAoTsC,CAACI,IAA6Cva,QAAA,CAAYylB,KAAYC,KAAcxL,GAAeyL,KAAiBA,KAAiBhmB,KAChR,OAJK6lB,CAAgB,mBCl6BtB,MAAAnL,GAAA,WAAAuL,GAAA,MAIMC,GAAoC,IAAI/L,MAAe,qCAMvDgM,GAA0B,IAAIhM,MAAe,wBAM7CiM,GAAyC,CAC3ClM,QAASmM,KACTC,aAAaC,SAAW,IAAMC,IAC9BC,OAAO,GAGX,IAAIC,GAAkB,EAEtB,MAAMC,GACF1vB,YAEA6B,EAEAM,GACIjD,KAAK2C,OAASA,EACd3C,KAAKiD,MAAQA,CACjB,EAEJ,IACMotB,GAAoB,MAA1B,MAAMA,EAEF,QAAII,GACA,OAAOzwB,KAAK0wB,KAChB,CACA,QAAID,CAAKxtB,GACLjD,KAAK0wB,MAAQztB,EACbjD,KAAK2wB,sBACT,CAEA,YAAIC,GACA,OAAO5wB,KAAK6wB,SAChB,CACA,YAAID,CAAS3tB,GACTjD,KAAK6wB,aAAYlL,MAAsB1iB,EAC3C,CAEA,SAAIA,GACA,MAAM6tB,EAAW9wB,KAAK+wB,gBAAkB/wB,KAAK+wB,gBAAgBD,SAAW,GACxE,OAAI9wB,KAAKgxB,SACEF,EAASjzB,IAAI4qB,GAAUA,EAAOxlB,OAElC6tB,EAAS,GAAKA,EAAS,GAAG7tB,WAAQ5F,CAC7C,CACA,SAAI4F,CAAMguB,GACNjxB,KAAKkxB,qBAAqBD,GAC1BjxB,KAAKmxB,YAAYC,KAAKpxB,KAAKiD,MAC/B,CAEA,YAAI6tB,GACA,MAAMA,EAAW9wB,KAAK+wB,gBAAkB/wB,KAAK+wB,gBAAgBD,SAAW,GACxE,OAAO9wB,KAAKgxB,SAAWF,EAAWA,EAAS,IAAM,IACrD,CAEA,YAAIE,GACA,OAAOhxB,KAAKqxB,SAChB,CACA,YAAIL,CAAS/tB,GACTjD,KAAKqxB,aAAY1L,MAAsB1iB,GACvCjD,KAAK2wB,sBACT,CAEA,YAAI/K,GACA,OAAO5lB,KAAK6lB,SAChB,CACA,YAAID,CAAS3iB,GACTjD,KAAK6lB,aAAYF,MAAsB1iB,GACvCjD,KAAK2wB,sBACT,CACA7vB,YAAYwwB,EAAiBjF,GACzBrsB,KAAKsxB,gBAAkBA,EACvBtxB,KAAK6wB,WAAY,EACjB7wB,KAAKqxB,WAAY,EACjBrxB,KAAK6lB,WAAY,EAKjB7lB,KAAKuxB,8BAAgC,OAErCvxB,KAAKwxB,WAAa,OAClBxxB,KAAK0wB,MAAS,2BAA0BH,KAMxCvwB,KAAKmxB,YAAc,IAAIM,MAEvBzxB,KAAKoI,OAAS,IAAIqpB,MAClBzxB,KAAK0xB,WACDrF,GAAkBA,EAAeqF,WAAarF,EAAeqF,WAAa,UAClF,CACAC,WACI3xB,KAAK+wB,gBAAkB,IAAIa,MAAe5xB,KAAKgxB,cAAU3zB,GAAW,EACxE,CACAw0B,qBACI7xB,KAAK+wB,gBAAgBe,UAAU9xB,KAAK+xB,eAAezrB,OAAOmiB,GAAUA,EAAOuJ,SAC/E,CAKAC,WAAWhvB,GACPjD,KAAKiD,MAAQA,EACbjD,KAAKsxB,gBAAgB3D,cACzB,CAEAuE,iBAAiBC,GACbnyB,KAAKuxB,8BAAgCY,CACzC,CAEAC,kBAAkBD,GACdnyB,KAAKwxB,WAAaW,CACtB,CAEAE,iBAAiBC,GACbtyB,KAAK4lB,SAAW0M,CACpB,CAEAC,iBAAiB9J,GACb,MAAMtgB,EAAQ,IAAIqoB,GAAsB/H,EAAQzoB,KAAKiD,OACrDjD,KAAKwyB,UAAYrqB,EAAMlF,MACvBjD,KAAKuxB,8BAA8BppB,EAAMlF,OACzCjD,KAAKoI,OAAOgpB,KAAKjpB,EACrB,CAQAsqB,kBAAkBhK,EAAQqJ,EAAQY,GAAc,EAAOC,GAAc,IAG5D3yB,KAAKgxB,UAAYhxB,KAAK8wB,WAAarI,EAAOuJ,UAC3ChyB,KAAK8wB,SAASkB,SAAU,GAExBhyB,KAAK+wB,gBACDe,EACA9xB,KAAK+wB,gBAAgBe,OAAOrJ,GAG5BzoB,KAAK+wB,gBAAgB6B,SAASnK,GAIlCkK,GAAc,EAKdA,EACA9wB,QAAQC,UAAUC,KAAK,IAAM/B,KAAK6yB,kBAAkBpK,EAAQiK,IAG5D1yB,KAAK6yB,kBAAkBpK,EAAQiK,EAEvC,CAEAI,YAAYrK,GACR,OAAOzoB,KAAK+wB,iBAAmB/wB,KAAK+wB,gBAAgBgC,WAAWtK,EACnE,CAEAuK,cAAcvK,GACV,eAAWzoB,KAAKwyB,UAAc,OAG1BxyB,KAAKgxB,UAAYiC,MAAMC,QAAQlzB,KAAKwyB,WAC7BxyB,KAAKwyB,UAAUvlB,KAAKhK,GAAyB,MAAhBwlB,EAAOxlB,OAAiBA,IAAUwlB,EAAOxlB,OAE1EwlB,EAAOxlB,QAAUjD,KAAKwyB,UACjC,CAEAtB,qBAAqBjuB,GACjBjD,KAAKwyB,UAAYvvB,EACZjD,KAAK+xB,iBAGN/xB,KAAKgxB,UAAY/tB,GACZgwB,MAAMC,QAAQjwB,GAGnBjD,KAAKmzB,kBACLlwB,EAAM8C,QAASia,GAAiBhgB,KAAKozB,aAAapT,MAGlDhgB,KAAKmzB,kBACLnzB,KAAKozB,aAAanwB,IAE1B,CAEAkwB,kBACInzB,KAAK+wB,gBAAgBsC,QACrBrzB,KAAK+xB,eAAehsB,QAAQ0iB,GAAWA,EAAOuJ,SAAU,EAC5D,CAEAoB,aAAanwB,GACT,MAAMqwB,EAAsBtzB,KAAK+xB,eAAewB,KAAK9K,GAC1B,MAAhBA,EAAOxlB,OAAiBwlB,EAAOxlB,QAAUA,GAEhDqwB,IACAA,EAAoBtB,SAAU,EAC9BhyB,KAAK+wB,gBAAgBe,OAAOwB,GAEpC,CAEAT,kBAAkBpK,EAAQiK,GAElBA,GACA1yB,KAAKuyB,iBAAiB9J,GAI1BzoB,KAAKmxB,YAAYC,KAAKpxB,KAAKiD,MAC/B,CAEA0tB,uBACI3wB,KAAK+xB,gBAAgBhsB,QAAQ0iB,GAAUA,EAAOmB,gBAClD,CAACviB,SACQrH,KAAKsH,UAAI,SAAAC,GAAA,WAAAA,GAAwF8oB,GAAV7oB,MAAgDA,OAAhDA,MAAiFuoB,GAAiC,KAA4D1oB,SACrQrH,KAAK4rB,UADkFpkB,MAAE,CAAAuC,KACJsmB,EAAoB3D,UAAA,8BAAA8G,eAAA,SAAA1G,EAAAC,EAAA0G,GAGF,GAHE,EAAA3G,GADlBtlB,MAAEisB,EAIDC,GAAe,KAAA5G,EAAA,KAAAkC,EAJhBxnB,MAAEwnB,EAAFxnB,WAAEulB,EAAAgF,eAAA/C,EAAA,GAAArC,UAAA,QACsR,QAAO,6BAAAC,SAAA,EAAAC,aAAA,SAAAC,EAAAC,GAAA,EAAAD,IAD/RtlB,MAAE,gBAAAulB,EAAAnH,UAAFpe,MAAE,6BAAAulB,EAAA6D,SAAFppB,CAAE,2DAAAulB,EAAA2E,YAAA,EAAA7F,OAAA,CAAA6F,WAAA,aAAAjB,KAAA,OAAAG,SAAA,WAAA3tB,MAAA,QAAA+tB,SAAA,WAAApL,SAAA,YAAA+N,QAAA,CAAAxC,YAAA,cAAA/oB,OAAA,UAAA4kB,SAAA,yBAAAC,SAAA,CAAFzlB,MACihB,CACzmByoB,GACA,CAAElM,QAASiM,GAAyBG,YAAaE,QAE5D,OA9MKA,CAAoB,KA+P1B,MAAMuD,IAAuBC,QAAmB,SAEhD,IACMH,GAAe,MAArB,MAAMA,UAAwBE,GAE1B,YAAIE,GACA,MAAQ,GAAE9zB,KAAKU,WACnB,CAEA,cAAIgxB,GACA,OAAO1xB,KAAK+zB,kBAAoB/zB,KAAK+zB,kBAAkBrC,WAAa1xB,KAAKg0B,WAC7E,CACA,cAAItC,CAAWzuB,GACXjD,KAAKg0B,YAAc/wB,CACvB,CAEA,WAAI+uB,GACA,OAAOhyB,KAAK+zB,kBAAoB/zB,KAAK+zB,kBAAkBjB,YAAY9yB,MAAQA,KAAKi0B,QACpF,CACA,WAAIjC,CAAQ/uB,GACR,MAAMguB,KAAWtL,MAAsB1iB,GACnCguB,IAAajxB,KAAKi0B,WAClBj0B,KAAKi0B,SAAWhD,EACZjxB,KAAK+zB,mBACL/zB,KAAK+zB,kBAAkBtB,kBAAkBzyB,KAAMA,KAAKi0B,UAExDj0B,KAAKmtB,mBAAmBQ,eAEhC,CAEA,YAAI/H,GACA,OAAO5lB,KAAK6lB,WAAc7lB,KAAK+zB,mBAAqB/zB,KAAK+zB,kBAAkBnO,QAC/E,CACA,YAAIA,CAAS3iB,GACTjD,KAAK6lB,aAAYF,MAAsB1iB,EAC3C,CACAnC,YAAYozB,EAAa/G,EAAoB3G,EAAaU,EAAeiN,EAAiB9H,GACtFprB,QACAjB,KAAKmtB,mBAAqBA,EAC1BntB,KAAKwmB,YAAcA,EACnBxmB,KAAKknB,cAAgBA,EACrBlnB,KAAKi0B,UAAW,EAIhBj0B,KAAKo0B,eAAiB,KACtBp0B,KAAK6lB,WAAY,EAEjB7lB,KAAKoI,OAAS,IAAIqpB,MAClB,MAAM4C,EAAiBC,OAAOH,GAC9Bn0B,KAAKu0B,SAAWF,GAAqC,IAAnBA,EAAuBA,EAAiB,KAC1Er0B,KAAK+zB,kBAAoBG,EACzBl0B,KAAK0xB,WACDrF,GAAkBA,EAAeqF,WAAarF,EAAeqF,WAAa,UAClF,CACAC,WACI,MAAM6C,EAAQx0B,KAAK+zB,kBACnB/zB,KAAKU,GAAKV,KAAKU,IAAO,qBAAoB6vB,KACtCiE,IACIA,EAAMxB,cAAchzB,MACpBA,KAAKgyB,SAAU,EAEVwC,EAAM1B,YAAY9yB,QAAUA,KAAKi0B,UAKtCO,EAAM/B,kBAAkBzyB,KAAMA,KAAKi0B,UAG/C,CACAtM,kBACI3nB,KAAKknB,cAAcU,QAAQ5nB,KAAKwmB,aAAa,EACjD,CACA1gB,cACI,MAAM0uB,EAAQx0B,KAAK+zB,kBACnB/zB,KAAKknB,cAAca,eAAe/nB,KAAKwmB,aAGnCgO,GAASA,EAAM1B,YAAY9yB,OAC3Bw0B,EAAM/B,kBAAkBzyB,MAAM,GAAO,GAAO,EAEpD,CAEAy0B,MAAMv3B,GACF8C,KAAK00B,eAAextB,cAAcutB,MAAMv3B,EAC5C,CAEAy3B,iBACI,MAAMC,IAAa50B,KAAK60B,sBAA8B70B,KAAKi0B,SACvDW,IAAe50B,KAAKi0B,WACpBj0B,KAAKi0B,SAAWW,EACZ50B,KAAK+zB,oBACL/zB,KAAK+zB,kBAAkBtB,kBAAkBzyB,KAAMA,KAAKi0B,UAAU,GAC9Dj0B,KAAK+zB,kBAAkBvC,eAI/BxxB,KAAKoI,OAAOgpB,KAAK,IAAIZ,GAAsBxwB,KAAMA,KAAKiD,OAC1D,CAMA2mB,gBAGI5pB,KAAKmtB,mBAAmBQ,cAC5B,CAEAmH,iBACI,OAAI90B,KAAK60B,oBACE70B,KAAK+zB,kBAAkBtD,KAE3BzwB,KAAKywB,MAAQ,IACxB,CAEAoE,oBACI,OAAO70B,KAAK+zB,oBAAsB/zB,KAAK+zB,kBAAkB/C,QAC7D,CAAC3pB,SACQrH,KAAKsH,UAAI,SAAAC,GAAA,WAAAA,GAAwFmsB,GA/KVlsB,MA+K2CwoB,GAAuB,GA/KlExoB,MA+K+FA,OA/K/FA,MA+KgIA,OA/KhIA,MA+K0JC,MA/K1JD,MA+KsL,YA/KtLA,MA+K8NuoB,GAAiC,KAA4D1oB,SAClZrH,KAAK8uB,UAhLkFtnB,MAAE,CAAAuC,KAgLJ2pB,EAAehH,UAAA,wBAAAqC,UAAA,SAAAjC,EAAAC,GAhLX,GAgLW,EAAAD,GAhLbtlB,KAAE+c,GAAA,KAAAuI,EAAA,KAAAkC,EAAFxnB,MAAEwnB,EAAFxnB,WAAEulB,EAAA2H,eAAA1F,EAAAC,MAAA,GAAAtC,UAAA,QAgLsX,eAAc,uBAAAC,SAAA,GAAAC,aAAA,SAAAC,EAAAC,GAAA,EAAAD,GAhLtYtlB,MAAE,0BAgLJulB,EAAA0H,OAAO,KAAA3H,IAhLLtlB,MAAE,kBAAFA,CAAE,uBAAFA,CAAE,KAAAulB,EAAArsB,GAAF8G,CAAE,aAAFA,MAAE,gCAAAulB,EAAAgH,kBAAFvsB,CAAE,4BAAAulB,EAAAiF,QAAFxqB,CAAE,6BAAAulB,EAAAnH,SAAFpe,CAAE,qDAAAulB,EAAA2E,YAAA,EAAA7F,OAAA,CAAAkJ,cAAA,gBAAAC,UAAA,2BAAAZ,eAAA,qCAAA1zB,GAAA,KAAA+vB,KAAA,OAAAxtB,MAAA,QAAAsxB,SAAA,WAAA7C,WAAA,aAAAM,QAAA,UAAApM,SAAA,YAAA+N,QAAA,CAAAvrB,OAAA,UAAA4kB,SAAA,oBAAAC,SAAA,CAAFzlB,OAAEytB,mBAAAnF,GAAAX,MAAA,EAAAC,KAAA,EAAAC,OAAA,kRAAAC,SAAA,SAAAxC,EAAAC,GAgLujD,GAhLvjD,EAAAD,IAAFtlB,cAAE,gBAAFA,MAAE,0BAgLg4CulB,EAAA4H,gBAAgB,GAhLl5CntB,MAAE,YAAFA,MAAE,GAAFA,gBAAE,WAAFA,CAgLyjD,eAAAslB,EAAA,OAAAoI,EAhLzjD1tB,MAAE,GAAFA,MAAE,KAAAulB,EAAA+G,SAAFtsB,CAgLgmC,WAAAulB,EAAAnH,UAAA,MAhLhmCpe,MAAE,WAAAulB,EAAAnH,UAAA,EAAAmH,EAAAwH,SAAF/sB,CAgLspC,eAAAulB,EAAAiF,QAhLtpCxqB,CAgLspC,OAAAulB,EAAA+H,iBAhLtpCttB,CAgLspC,aAAAulB,EAAAiI,UAhLtpCxtB,CAgLspC,kBAAAulB,EAAAqH,gBAhLtpC5sB,MAAE,GAAFA,MAAE,mBAAA0tB,EAAF1tB,CAgLipD,oBAAAulB,EAAAgI,eAAAhI,EAAAnH,SAAA,GAAA2J,aAAA,CAA8rMhD,MAAY5N,OAAA,0jMAAA6Q,cAAA,EAAAC,gBAAA,IAC97P,OAxHKiE,CAAe,KAgLfyB,GAAqB,MAA3B,MAAMA,EAAsB9tB,SACfrH,KAAKsH,UAAI,SAAAC,GAAA,WAAAA,GAAwF4tB,EAAqB,EAAkD9tB,SACxKrH,KAAK8J,UA3OkFtC,MAAE,CAAAuC,KA2OSorB,IAA+L9tB,SACjSrH,KAAKgK,UA5OkFxC,MAAE,CAAA0C,QAAA,CA4O0C2lB,KAAiBuF,KAAiBvF,QACjL,OAJKsF,CAAqB,oBCtdrB,SAAUE,EACdC,EACAC,GAIA,OAFmBjnB,OAAOknB,QAAQF,GAEhBz3B,IAAI,EAAE2Q,EAAKvL,MAAK,CAE9BwtB,KAAMjiB,EACN8mB,KAAMryB,EACNsyB,SAAUA,IAAW/mB,KAG3B,CAEM,SAAUinB,GAA2BxyB,GACzC,MAAwB,iBAAVA,GAAgC,OAAVA,CACtC,CAEM,SAAUiwB,EAA0BjwB,GACxC,OAAOgwB,MAAMC,QAAQjwB,EACvB,0BCvBEuE,MAAA,0CAEEA,MAAA,OAAAkuB,EAAAjF,KAAAjpB,CAAmB,OAAAkuB,EAAAJ,KAAnB9tB,CAAmB,WAAAkuB,EAAAH,qCAJvB/tB,MAAA,GACEA,MAAA,GACAA,MAAA,EAAAmuB,GAAA,mBAMAnuB,MAAA,GACFA,8BAREA,MAAA,GAAAA,MAAA,aAEoBA,MAAA,GAAAA,MAAA,UAAAouB,EAAAC,aAAAruB,CAAiB,eAAAouB,EAAAE,WAKrCtuB,MAAA,GAAAA,MAAA,yCAQIA,MAAA,0CAEEA,MAAA,OAAAuuB,EAAAtF,KAAAjpB,CAAmB,OAAAuuB,EAAAT,KAAnB9tB,CAAmB,WAAAuuB,EAAAR,qCALzB/tB,MAAA,GACEA,MAAA,WACEA,MAAA,GACAA,MAAA,EAAAwuB,GAAA,mBAMAxuB,MAAA,GACFA,QACFA,6CATIA,MAAA,GAAAA,MAAA,aAEoBA,MAAA,GAAAA,MAAA,UAAAyuB,EAAAzuB,CAAS,eAAA0uB,EAAAJ,WAK7BtuB,MAAA,GAAAA,MAAA,yCAXNA,MAAA,GACEA,MAAA,SACAA,MAAA,EAAA2uB,GAAA,sBAYA3uB,MAAA,UACFA,8BAbiCA,MAAA,GAAAA,MAAA,UAAA4uB,EAAAC,YAAA7uB,CAAgB,eAAA4uB,EAAAtnB,kCAejDtH,MAAA,GAAmCA,MAAA,GAAWA,8BAAXA,MAAA,GAAAA,MAAA,IAAA8uB,EAAAhB,KAAA,MClB5B,IAAMiB,GAAc,MAArB,MAAOA,EAKX,YAAId,GACF,OAAQvC,EAAQlzB,KAAKs1B,OAASG,GAASz1B,KAAKs1B,KAC9C,CAEA,WAAIpC,GACF,OAAOA,EAAQlzB,KAAKs1B,KACtB,CAEA,eAAIkB,GACF,OAAQx2B,KAAKy1B,WAAaz1B,KAAKkzB,OACjC,CAEA,gBAAI2C,GACF,OAAKJ,GAASz1B,KAAKs1B,MAIZD,EAAUr1B,KAAKs1B,KAAMt1B,KAAKu1B,UAAUkB,QAHlC,EAIX,CAEA,eAAIJ,GACF,OAAKnD,EAAQlzB,KAAKs1B,MAIXt1B,KAAKs1B,KAAKz3B,IAAK64B,GACpBrB,EAAUqB,EAAM12B,KAAKu1B,UAAUkB,SAJxB,EAMX,CAEAX,UAAU9vB,EAAW2wB,GACnB,OAAOA,EAAMlG,IACf,CAEA3hB,MAAMA,GACJ,OAAOA,CACT,CAACzH,SAAArH,KAAA,mBAAAuH,iBAzCUgvB,EAAc,EAAAlvB,SAAArH,KAAA,UAAA42B,EAAAC,IAAA,MAAdN,EAAc7J,UAAA,gBAAAb,OAAA,CAAA4E,KAAA,OAAA6E,KAAA,OAAAC,SAAA,YAAAuB,YAAA,EAAA7J,SAAA,CAAAzlB,OAAA2nB,MAAA,EAAAC,KAAA,EAAAC,OAAA,gMAAAC,SAAA,SAAAxC,EAAAC,MAAA,EAAAD,IDd3BtlB,MAAA,YAA2EA,MAAA,GAEzEA,QACDA,MAAA,SACDA,MAAA,EAAAuvB,GAAA,sBAWAvvB,MAAA,EAAAwvB,GAAA,sBAiBAxvB,MAAA,EAAAyvB,GAAA,sBACAzvB,MAAA,oBAjCyBA,MAAA,qBAAA0vB,EAAA,MAAAnK,EAAAwI,SAAA,KAAAxI,EAAAwI,SAAA4B,0BAAA95B,IAAA65B,IAAA,IAAkD1vB,MAAA,GAAAA,MAAAulB,EAAA0D,MAI5DjpB,MAAA,GAAAA,MAAA,OAAAulB,EAAA0I,UAWAjuB,MAAA,GAAAA,MAAA,OAAAulB,EAAAmG,SAiBA1rB,MAAA,GAAAA,MAAA,OAAAulB,EAAAyJ,6BClBFD,EAJD3G,KAAYnoB,UAAEioB,GAAgBnD,IAAA5N,OAAA,yJAAA8Q,gBAAA,WAI7B8G,CAAc,+BCb3B/uB,MAAA,GACEA,MAAA,iBAKFA,kCAJIA,MAAA,GAAAA,MAAA,OAAA4vB,EAAA3G,KAAAjpB,CAAmB,OAAA4vB,EAAA9B,KAAnB9tB,CAAmB,WAAA4vB,EAAA7B,WCWhB,IAAM8B,GAAmB,MAA1B,MAAOA,EAIX,UAAIZ,GAEF,OADepB,EAAUr1B,KAAKs1B,KAAMt1B,KAAKu1B,SAE3C,CAEAO,UAAU9vB,EAAW2wB,GACnB,OAAOA,EAAMlG,IACf,CAACppB,SAAArH,KAAA,mBAAAuH,iBAXU8vB,EAAmB,EAAAhwB,SAAArH,KAAA,UAAA42B,EAAAC,IAAA,MAAnBQ,EAAmB3K,UAAA,sBAAAb,OAAA,CAAAyJ,KAAA,OAAAC,SAAA,YAAAuB,YAAA,EAAA7J,SAAA,CAAAzlB,OAAA2nB,MAAA,EAAAC,KAAA,EAAAC,OAAA,oEAAAC,SAAA,SAAAxC,EAAAC,GAAA,EAAAD,IDdhCtlB,MAAA,GACAA,MAAA,EAAA8vB,GAAA,sBAOA9vB,MAAA,UARAA,MAAA,aACgCA,MAAA,GAAAA,MAAA,UAAAulB,EAAA0J,OAAAjvB,CAAW,eAAAulB,EAAA+I,WAO3CtuB,MAAA,GAAAA,MAAA,+BCEYooB,KAAYnoB,KAAE8uB,IAAc5X,OAAA,uGAAA8Q,gBAAA,WAI3B4H,CAAmB,KCXzB,MAAME,GACX,CACEC,OAAQ,CACNL,mBAAoB,gDACpBV,YAAQp5B,GAEVH,QAAS,CACPu5B,OAAQ,CACNgB,UAAW,CACTN,mBAAoB,0BACpBV,OAAQ,CACNiB,YAAa,CACXP,mBAAoB,mBACpBV,YAAQp5B,GAEVs6B,uBAAwB,CACtBR,mBAAoB,0BACpBV,OAAQ,CACNmB,wBAAyB,CACvBT,mBAAoB,2BACpBV,YAAQp5B,GAEVw6B,mBAAoB,CAClBV,mBAAoB,uBACpBV,YAAQp5B,GAEVy6B,iBAAkB,CAChBX,mBAAoB,oBACpBV,YAAQp5B,KAId06B,UAAW,CACTZ,mBAAoB,YACpBV,YAAQp5B,GAEV26B,mBAAoB,CAClBb,mBAAoB,sBACpBV,OAAQ,CACN/1B,GAAI,CACFy2B,mBAAoB,KACpBV,YAAQp5B,GAEV46B,WAAY,CACVd,mBAAoB,aACpBV,YAAQp5B,GAEV0M,KAAM,CACJotB,mBAAoB,OACpBV,YAAQp5B,GAEV66B,IAAK,CACHf,mBAAoB,YACpBV,YAAQp5B,KAId86B,WAAY,CACVhB,mBAAoB,aACpBV,OAAQ,IAEV2B,iBAAkB,CAChBjB,mBAAoB,mCACpBV,OAAQ,CACN1sB,KAAM,CACJotB,mBAAoB,OACpBV,YAAQp5B,GAEVqD,GAAI,CACFy2B,mBAAoB,KACpBV,YAAQp5B,GAEV66B,IAAK,CACHf,mBAAoB,YACpBV,YAAQp5B,GAEV46B,WAAY,CACVd,mBAAoB,aACpBV,YAAQp5B,KAIdg7B,GAAI,CACFlB,mBAAoB,8kBACpBV,OAAQ,CACN/1B,GAAI,CACFy2B,mBAAoB,KACpBV,YAAQp5B,GAEVozB,KAAM,CACJ0G,mBAAoB,OACpBV,YAAQp5B,KAIdi7B,QAAS,CACPnB,mBAAoB,UACpBV,YAAQp5B,GAEVk7B,KAAM,CACJpB,mBAAoB,OACpBV,OAAQ,CACN+B,YAAa,CACXrB,mBAAoB,eACpBV,YAAQp5B,GAEVqD,GAAI,CACFy2B,mBAAoB,KACpBV,YAAQp5B,GAEVozB,KAAM,CACJ0G,mBAAoB,OACpBV,YAAQp5B,SAQtBo7B,cAAUp7B,iECvFVmK,MAAA,QAAAA,CAAkC,UAAMA,MAAA,mBAAqBA,qCAArBA,MAAA,GAAAA,YAAA,IAAAkxB,EAAAC,iCACxCnxB,MAAA,QAAAA,CAEC,UAAMA,MAAA,mBAAyBA,qCAAzBA,MAAA,GAAAA,YAAA,IAAAkxB,EAAAE,oCACPpxB,MAAA,4DAEEA,MAAA,OAAAkxB,EAAAE,QAAApxB,CAAqB,WAAAqxB,EAAAC,YAAAJ,EAAAE,kCAGvBpxB,MAAA,GACEA,MAAA,8BACFA,kDAhCFA,MAAA,GACEA,MAAA,UAAAA,CAAyB,QACnBA,MAAA,UAAIA,QACRA,MAAA,+BAA6CA,MAAA,yBAAA0nB,GAAA1nB,MAAAuxB,GAAA,MAAAC,EAAAxxB,QAAA,OAAAA,MAAAwxB,EAAAC,YAAA/J,EAAA,GAC3C1nB,MAAA,yBAGGA,MAAA,SAAGA,QAENA,MAAA,yBAGGA,MAAA,aAAOA,QAEVA,MAAA,yBAGGA,MAAA,aAAMA,YAIbA,MAAA,GAAA0xB,GAAA,aACA1xB,MAAA,GAAA2xB,GAAA,aAGA3xB,MAAA,GAAA4xB,GAAA,0BAKA5xB,MAAA,GAAA6xB,GAAA,sBAGF7xB,yCA9BiDA,MAAA,GAAAA,MAAA,UAAAouB,EAAAqD,aAkBzCzxB,MAAA,GAAAA,MAAA,cAAAouB,EAAAqD,aAEHzxB,MAAA,GAAAA,MAAA,kBAAAouB,EAAAqD,aAAAP,EAAAE,SAGApxB,MAAA,GAAAA,MAAA,iBAAAouB,EAAAqD,aAAAP,EAAAE,SAIYpxB,MAAA,GAAAA,MAAA,OAAAnK,MAAAq7B,EAAAE,UCNZ,IAAMU,GAAgB,MAAvB,MAAOA,EAfbx4B,cAgBUd,KAAAu5B,kBAAiBC,OAAOC,OACxBz5B,KAAA05B,WAAa,IAAIn1B,IAEfvE,KAAA25B,MAAQ,IAAIC,KAGnB,GACO55B,KAAA65B,eAAgB,EAChB75B,KAAAi5B,YAA4C,UAEtDtH,WACE3xB,KAAK25B,MAAMr8B,QAAKsY,KAAU5V,KAAK05B,aAAat2B,UAAU,KACpDpD,KAAK65B,eAAgB,IAGvB75B,KAAKu5B,eAAeO,YACjBx8B,QAAKsY,KAAU5V,KAAK05B,aACpBt2B,UAAW22B,IACV,GAAI,YAAaA,EAAQ,CACvB,MAAMpB,EAAMqB,GCzDpB,g8PD0DcpB,EAAUqB,GAAOtB,GACvB34B,KAAK25B,MAAM56B,KAAK,CAAE45B,MAAKC,YACvB54B,KAAKi5B,YAAc,WAG3B,CAEAiB,SAAS5E,GACP,GACGA,EAAKt4B,QACJ,UAAWs4B,EAAKt4B,QACW,iBAAtBs4B,EAAKt4B,OAAOiG,MAKrB,IACE,MAAM01B,EAAMqB,GAAK1E,EAAKt4B,OAAOiG,MAAMk3B,WAAW,IAAK,KAC7CvB,EAAUqB,GAAOtB,GACvB34B,KAAK25B,MAAM56B,KAAK,CAAE45B,MAAKC,kBACjB,CACV,CAEAE,YACExD,GAEA,MAAoB,iCAAhBA,EAAKkC,OACAD,GAGW,8BAAhBjC,EAAKkC,OACA,CACLA,OAAQ,CACNL,mBAAoB,wCACpBV,YAAQp5B,GAEVH,QAAS,CACPu5B,OAAQ,CACNgB,UAAW,CACTN,mBAAoB,0BACpBV,OAAQ,OAMT,EAEX,CAEA3wB,cACE9F,KAAK05B,WAAW36B,OAChBiB,KAAK05B,WAAWx2B,UAClB,CAACmE,SAAArH,KAAA,mBAAAuH,iBA1EU+xB,EAAgB,EAAAjyB,SAAArH,KAAA,UAAA42B,EAAAC,IAAA,MAAhByC,EAAgB5M,UAAA,mBAAAoK,YAAA,EAAA7J,SAAA,CAAAzlB,OAAA2nB,MAAA,GAAAC,KAAA,EAAAC,OAAA,2iBAAAC,SAAA,SAAAxC,EAAAC,GAAA,EAAAD,IDvC7BtlB,MAAA,UAAAA,CAAyC,QACnCA,MAAA,2BAAqBA,QACzBA,MAAA,SAAgBA,MAAA,wDAAkDA,QAElEA,MAAA,2BAAqBA,MAAA,0BAAA0nB,GAAA,OAAAnC,EAAA8M,cAAA3K,CAAA,GACnB1nB,MAAA,+BAAAA,CAA4B,qBACTA,MAAA,gBAAUA,UAG7BA,MAAA,OAAGA,MAAA,wCAAiCA,QACpCA,MAAA,oBAAAA,CAAgB,iBACKA,MAAA,iBAAA0nB,GAAA,OAASnC,EAAAmN,SAAAhL,EAAgB,GAAE1nB,YAIlDA,MAAA,GAAA4yB,GAAA,yCAkCF5yB,eA7CuBA,MAAA,GAAAA,MAAA,WAAAulB,EAAA8M,eAWNryB,MAAA,GAAAA,MAAA,OAAAA,MAAA,KAAAulB,EAAA4M,wBCab/J,KAAYnoB,eACZ4yB,KAAW9N,UACX+N,KAAkB9N,eAClB+N,IAAc9N,KAAA9I,MACd+L,GAAgB9L,GAChBuR,GAAqBqF,MAErBnD,IAAmB1Y,OAAA,sOAIV2a,CAAgB,KA6E7B,SAASU,GAAKxZ,GACZ,MAAMoY,EAAU6B,KAAKja,GAErB,OADeka,KAAKC,MAAM/B,EAE5B,CAEA,SAASqB,GACPzZ,GAEA,IACE,MAAqB,iCAAjBA,EAAMgX,QAAW,EACZoD,MAAapa,GE/GpB,SAAUqa,GACdra,GAEA,MAAO,IACFA,EACHtjB,QAAS,IACJsjB,EAAMtjB,QACTu6B,UAAW,IACNjX,EAAMtjB,QAAQu6B,UACjBqD,oBAAkBC,MAAU,IAC1Bva,EAAMtjB,QAAQu6B,UAAUqD,kBAAkBj9B,IACxCm9B,SAKRvC,SAAU,CACRx1B,MAAO,CACLvC,GAAI8f,EAAMiY,SAASx1B,MAAMvC,GACzBu6B,SAAOC,SAAYC,MAAgB3a,EAAMiY,SAASx1B,MAAMg4B,QACxDlxB,KAAMyW,EAAMiY,SAASx1B,MAAM8G,KAC3BqxB,0BACE5a,EAAMiY,SAASx1B,MAAMm4B,0BACvBxD,wBAAyBpX,EAAMiY,SAASx1B,MAAM20B,wBAC9Ca,SAAU,CACR4C,qBAAmBN,MAAU,OAC3BO,MACE9a,EAAMiY,SAASx1B,MAAMw1B,SAAS4C,oBAGlCE,kBAAgBR,MAAU,IACxBL,KAAKC,MAAMF,KAAKja,EAAMiY,SAASx1B,MAAMw1B,SAAS8C,kBAEhDC,aAAWT,MAAU,OACnBG,SACEC,MAAgB3a,EAAMiY,SAASx1B,MAAMw1B,SAAS+C,aAGlDC,cAAYV,MAAU,OACpBG,SACEC,MAAgB3a,EAAMiY,SAASx1B,MAAMw1B,SAASgD,iBAO5D,CFmEWZ,CAAUra,SACVngB,GAEP,YADAq7B,QAAQr7B,MAAMA,GAGlB","names":["nodeEventEmitterMethods","eventTargetMethods","jqueryMethods","fromEvent","target","eventName","options","resultSelector","isFunction","undefined","pipe","mapOneOrManyArgs","add","remove","isEventTarget","addEventListener","removeEventListener","map","methodName","handler","isNodeStyleEventEmitter","addListener","removeListener","toCommonHandlerRegistry","isJQueryStyleEventEmitter","on","off","isArrayLike","mergeMap","subTarget","innerFrom","TypeError","Observable","subscriber","args","next","length","animationFrameProvider","schedule","callback","request","requestAnimationFrame","cancel","cancelAnimationFrame","delegate","handle","timestamp","Subscription","AnimationFrameScheduler","AsyncScheduler","flush","action","this","_active","flushId","_scheduled","actions","error","shift","execute","state","delay","id","unsubscribe","AnimationFrameAction","AsyncAction","constructor","scheduler","work","super","requestAsyncId","push","recycleAsyncId","_a","resolved","nextHandle","activeHandles","findAndClearHandle","Immediate","setImmediate","cb","Promise","resolve","then","clearImmediate","immediateProvider","AsapScheduler","AsapAction","bind","auditTime","duration","asyncScheduler","audit","durationSelector","operate","source","hasValue","lastValue","durationSubscriber","isComplete","endDuration","value","complete","cleanupDuration","subscribe","createOperatorSubscriber","closed","timer","dueTime","intervalOrScheduler","intervalDuration","isScheduler","due","isValidDate","Date","isNaN","now","n","ScrollDispatcher","_ngZone","_platform","document","_scrolled","Subject","_globalSubscription","_scrolledCount","scrollContainers","Map","_document","register","scrollable","has","set","elementScrolled","deregister","scrollableReference","get","delete","scrolled","auditTimeInMs","isBrowser","observer","_addGlobalListener","subscription","_removeGlobalListener","of","ngOnDestroy","forEach","_","container","ancestorScrolled","elementOrElementRef","ancestors","getAncestorScrollContainers","filter","indexOf","scrollingContainers","_subscription","_scrollableContainsElement","_getWindow","defaultView","window","element","coerceElement","scrollableElement","getElementRef","nativeElement","parentElement","runOutsideAngular","static","ɵfac","t","i0","i1","DOCUMENT","ɵprov","token","factory","providedIn","ViewportRuler","ngZone","_change","_changeListener","event","change","_viewportSize","getViewportSize","_updateViewportSize","output","width","height","getViewportRect","scrollPosition","getViewportScrollPosition","top","left","bottom","right","documentElement","documentRect","getBoundingClientRect","body","scrollTop","scrollY","scrollLeft","scrollX","throttleTime","innerWidth","innerHeight","CdkScrollableModule","ɵmod","type","ɵinj","ScrollingModule","imports","BidiModule","scrollBehaviorSupported","supportsScrollBehavior","BlockScrollStrategy","_viewportRuler","_previousHTMLStyles","_isEnabled","attach","enable","_canBeEnabled","root","_previousScrollPosition","style","coerceCssPixelValue","classList","disable","html","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","scroll","contains","viewport","scrollHeight","scrollWidth","CloseScrollStrategy","_scrollDispatcher","_config","_scrollSubscription","_detach","_overlayRef","hasAttached","run","detach","overlayRef","stream","overlayElement","threshold","_initialScrollPosition","Math","abs","updatePosition","NoopScrollStrategy","isElementScrolledOutsideView","some","containerBounds","isElementClippedByScrolling","scrollContainerRect","RepositionScrollStrategy","scrollThrottle","autoClose","overlayRect","ScrollStrategyOptions","noop","close","config","block","reposition","OverlayConfig","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","configKeys","Object","keys","key","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","BaseOverlayDispatcher","_attachedOverlays","index","splice","OverlayKeyboardDispatcher","_keydownListener","overlays","i","_keydownEvents","observers","keydownEvents","_isAttached","OverlayOutsideClickDispatcher","_cursorStyleIsSet","_pointerDownListener","_pointerDownEventTarget","_getEventTarget","_clickListener","origin","slice","_outsidePointerEvents","outsidePointerEvents","_addEventListeners","IOS","_cursorOriginalValue","cursor","i1$1","OverlayContainer","_containerElement","getContainerElement","_createContainer","containerClass","_isTestEnvironment","oppositePlatformContainers","querySelectorAll","createElement","setAttribute","appendChild","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_outsideClickDispatcher","_animationsDisabled","_backdropElement","_backdropClick","_attachments","_detachments","_locationChanges","EMPTY","_backdropClickHandler","_backdropTransitionendHandler","_disposeBackdrop","_scrollStrategy","_positionStrategy","positionStrategy","backdropElement","hostElement","portal","_previousHostParent","attachResult","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","take","_togglePointerEvents","_attachBackdrop","_toggleClasses","dispose","onDestroy","detachBackdrop","detachmentResult","_detachContentWhenStable","isAttached","_disposeScrollStrategy","backdropClick","attachments","detachments","getConfig","apply","updatePositionStrategy","strategy","updateSize","sizeConfig","setDirection","dir","direction","addPanelClass","classes","removePanelClass","getDirection","updateScrollStrategy","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","showingClass","insertBefore","nextSibling","parentNode","backdropToDetach","_backdropTimeout","setTimeout","cssClasses","isAdd","coerceArray","c","takeUntil","merge","children","backdrop","clearTimeout","boundingBoxClass","cssUnitPattern","FlexibleConnectedPositionStrategy","positions","_preferredPositions","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","_validatePositions","_boundingBox","_isDisposed","_isInitialRender","_lastPosition","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","_containerRect","originRect","viewportRect","containerRect","flexibleFits","fallback","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","position","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","withScrollableContainers","scrollables","withPositions","withViewportMargin","margin","withFlexibleDimensions","flexibleDimensions","withGrowAfterOpen","growAfterOpen","withPush","canPush","withLockedPosition","isLocked","_origin","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","selector","_transformOriginSelector","x","y","originX","startX","_isRtl","endX","originY","overlayStartX","overlayStartY","overlayX","overlayY","point","rawOverlayRect","overlay","getRoundedBoundingClientRect","offsetX","_getOffset","offsetY","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","_pushOverlayOnScreen","start","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushX","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","_getScrollVisibility","changeEvent","elements","xOrigin","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","previousWidth","styles","_hasExactPosition","transform","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","trim","clientHeight","horizontalStyleProperty","clientWidth","originBounds","overlayBounds","scrollContainerBounds","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","cssClass","ElementRef","Element","destination","hasOwnProperty","input","units","split","parseFloat","clientRect","floor","wrapperClass","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_alignItems","_xPosition","_xOffset","_width","_height","end","centerHorizontally","centerVertically","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","xPosition","xOffset","marginLeft","marginRight","marginTop","marginBottom","parent","OverlayPositionBuilder","global","flexibleConnectedTo","nextUniqueId","Overlay","scrollStrategies","_componentFactoryResolver","_positionBuilder","_injector","_directionality","_animationsModuleType","create","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","_appRef","ApplicationRef","DomPortalOutlet","i5","i6","ANIMATION_MODULE_TYPE","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","provide","InjectionToken","deps","useFactory","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","OverlayModule","providers","PortalModule","_c0","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","showDelay","hideDelay","touchendHideDelay","PANEL_CLASS","passiveListenerOptions","normalizePassiveListenerOptions","passive","_MatTooltipBase","_position","_updatePosition","_tooltipInstance","show","positionAtOrigin","_positionAtOrigin","coerceBooleanProperty","disabled","_disabled","hide","_setupPointerEnterEventsIfNeeded","_showDelay","coerceNumberProperty","_hideDelay","_mouseLeaveHideDelay","message","_message","_ariaDescriber","removeDescription","_elementRef","String","_isTooltipVisible","_updateTooltipMessage","describe","tooltipClass","_tooltipClass","_setTooltipClass","_overlay","_viewContainerRef","_focusMonitor","_dir","_defaultOptions","_viewInitialized","_pointerExitEventsInitialized","_cssClassPrefix","touchGestures","_passiveListeners","_destroyed","ngAfterViewInit","monitor","_touchstartTimeout","listener","stopMonitoring","_cancelPendingAnimations","_createOverlay","_portal","ComponentPortal","_tooltipComponent","instance","_triggerElement","afterHidden","isVisible","toggle","existingStrategy","scrollableAncestors","_updateCurrentPositionClass","_handleBodyInteraction","keyCode","ESCAPE","hasModifierKey","preventDefault","stopPropagation","disableTooltipInteractivity","_getOrigin","_getOverlayPosition","_addOffset","main","isLtr","originPosition","_invertPosition","overlayPosition","_markForCheck","onMicrotaskEmpty","newPosition","_currentPosition","classPrefix","_platformSupportsMouseEvents","_setupPointerExitEventsIfNeeded","_disableNativeGesturesIfNecessary","touch","targetTouches","clientX","clientY","_addListeners","exitListeners","newTarget","relatedTarget","_wheelListener","touchendListener","listeners","ANDROID","elementUnderPointer","elementFromPoint","gestures","nodeName","userSelect","msUserSelect","webkitUserSelect","MozUserSelect","draggable","webkitUserDrag","touchAction","webkitTapHighlightColor","ɵdir","inputs","MatTooltip","elementRef","scrollDispatcher","viewContainerRef","platform","ariaDescriber","focusMonitor","defaultOptions","TooltipComponent","i2","i3","i4","selectors","hostAttrs","hostVars","hostBindings","rf","ctx","exportAs","features","_TooltipComponentBase","_changeDetectorRef","animationMode","_closeOnInteraction","_isVisible","_onHide","_hideTimeoutId","_showTimeoutId","_toggleVisibility","markForCheck","_handleMouseLeave","_finalizeAnimation","_onShow","_handleAnimationEnd","animationName","_showAnimation","_hideAnimation","toVisible","tooltip","_tooltip","showClass","hideClass","getComputedStyle","getPropertyValue","changeDetectorRef","_isMultiline","_isTooltipMultiline","rect","ɵcmp","viewQuery","_t","first","$event","decls","vars","consts","template","dependencies","encapsulation","changeDetection","MatTooltipModule","A11yModule","CommonModule","MatCommonModule","_c1","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatButtonToggleGroup","multi","uniqueIdCounter","MatButtonToggleChange","name","_name","_markButtonsForCheck","vertical","_vertical","selected","_selectionModel","multiple","newValue","_setSelectionByValue","valueChange","emit","_multiple","_changeDetector","_controlValueAccessorChangeFn","_onTouched","EventEmitter","appearance","ngOnInit","SelectionModel","ngAfterContentInit","select","_buttonToggles","checked","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","_emitChangeEvent","_rawValue","_syncButtonToggle","isUserInput","deferEvents","deselect","_updateModelValue","_isSelected","isSelected","_isPrechecked","Array","isArray","_clearSelection","_selectValue","clear","correspondingOption","find","contentQueries","dirIndex","MatButtonToggle","outputs","_MatButtonToggleBase","mixinDisableRipple","buttonId","buttonToggleGroup","_appearance","_checked","toggleGroup","defaultTabIndex","ariaLabelledby","parsedTabIndex","Number","tabIndex","group","focus","_buttonElement","_onButtonClick","newChecked","_isSingleSelector","_getButtonName","disableRipple","ariaLabel","ngContentSelectors","_r0","MatButtonToggleModule","MatRippleModule","getFields","data","metadata","entries","isObject","field_r4","FieldComponent_ng_container_3_app_field_2_Template","ctx_r0","objectFields","fieldName","field_r8","FieldComponent_ng_container_4_ng_container_2_app_field_3_Template","item_r6","ctx_r5","FieldComponent_ng_container_4_ng_container_2_Template","ctx_r1","arrayFields","ctx_r2","FieldComponent","isPrimitive","fields","item","field","core","Xpm","standalone","FieldComponent_ng_container_3_Template","FieldComponent_ng_container_4_Template","FieldComponent_ng_container_5_Template","tmp_0_0","genericDescription","field_r1","PrettyJsonComponent","PrettyJsonComponent_ng_container_1_Template","WebAuthnCreateMetadata","method","publicKey","attestation","authenticatorSelection","authenticatorAttachment","requireResidentKey","userVerification","challenge","excludeCredentials","transports","alg","extensions","pubKeyCredParams","rp","timeout","user","displayName","response","data_r1","raw","decoded","ctx_r4","getMetadata","_r10","ctx_r9","displayMode","AnalyzeComponent_ng_container_13_pre_11_Template","AnalyzeComponent_ng_container_13_pre_12_Template","AnalyzeComponent_ng_container_13_app_pretty_json_13_Template","AnalyzeComponent_ng_container_13_ng_container_14_Template","AnalyzeComponent","activatedRoute","inject","ActivatedRoute","onDestroy$","data$","ReplaySubject","panelExpanded","queryParams","params","read","decode","readData","replaceAll","AnalyzeComponent_ng_container_13_Template","FormsModule","MatExpansionModule","MatInputModule","i7","atob","JSON","parse","decodeCreate","decodeGet","allowCredentials","tryDecode","decodeWebAuthnOptionsPubKeyCredParam","rawId","toHexString","decodeBase64Url","getClientExtensionResults","authenticatorData","decodeAuthenticatorData","clientDataJSON","signature","userHandle","console"],"sourceRoot":"webpack:///","sources":["./node_modules/rxjs/dist/esm/internal/observable/fromEvent.js","./node_modules/rxjs/dist/esm/internal/scheduler/animationFrameProvider.js","./node_modules/rxjs/dist/esm/internal/scheduler/animationFrame.js","./node_modules/rxjs/dist/esm/internal/scheduler/AnimationFrameScheduler.js","./node_modules/rxjs/dist/esm/internal/scheduler/AnimationFrameAction.js","./node_modules/rxjs/dist/esm/internal/util/Immediate.js","./node_modules/rxjs/dist/esm/internal/scheduler/immediateProvider.js","./node_modules/rxjs/dist/esm/internal/scheduler/asap.js","./node_modules/rxjs/dist/esm/internal/scheduler/AsapScheduler.js","./node_modules/rxjs/dist/esm/internal/scheduler/AsapAction.js","./node_modules/rxjs/dist/esm/internal/operators/auditTime.js","./node_modules/rxjs/dist/esm/internal/operators/audit.js","./node_modules/rxjs/dist/esm/internal/observable/timer.js","./node_modules/rxjs/dist/esm/internal/util/isDate.js","./node_modules/@angular/cdk/fesm2022/scrolling.mjs","./node_modules/@angular/cdk/fesm2022/overlay.mjs","./node_modules/@angular/material/fesm2022/tooltip.mjs","./node_modules/@angular/material/fesm2022/button-toggle.mjs","./src/app/pretty-json/utils.ts","./src/app/pretty-json/field.component.html","./src/app/pretty-json/field.component.ts","./src/app/pretty-json/pretty-json.component.html","./src/app/pretty-json/pretty-json.component.ts","./src/app/pages/analysis/analyze/metadata.ts","./src/app/pages/analysis/analyze/analyze.component.html","./src/app/pages/analysis/analyze/analyze.component.ts","./src/app/pages/analysis/analyze/example.data.ts","./src/app/pages/analysis/analyze/decode-get.ts"],"sourcesContent":["import { innerFrom } from '../observable/innerFrom';\nimport { Observable } from '../Observable';\nimport { mergeMap } from '../operators/mergeMap';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isFunction } from '../util/isFunction';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nconst nodeEventEmitterMethods = ['addListener', 'removeListener'];\nconst eventTargetMethods = ['addEventListener', 'removeEventListener'];\nconst jqueryMethods = ['on', 'off'];\nexport function fromEvent(target, eventName, options, resultSelector) {\n    if (isFunction(options)) {\n        resultSelector = options;\n        options = undefined;\n    }\n    if (resultSelector) {\n        return fromEvent(target, eventName, options).pipe(mapOneOrManyArgs(resultSelector));\n    }\n    const [add, remove] = isEventTarget(target)\n        ? eventTargetMethods.map((methodName) => (handler) => target[methodName](eventName, handler, options))\n        :\n            isNodeStyleEventEmitter(target)\n                ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName))\n                : isJQueryStyleEventEmitter(target)\n                    ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName))\n                    : [];\n    if (!add) {\n        if (isArrayLike(target)) {\n            return mergeMap((subTarget) => fromEvent(subTarget, eventName, options))(innerFrom(target));\n        }\n    }\n    if (!add) {\n        throw new TypeError('Invalid event target');\n    }\n    return new Observable((subscriber) => {\n        const handler = (...args) => subscriber.next(1 < args.length ? args : args[0]);\n        add(handler);\n        return () => remove(handler);\n    });\n}\nfunction toCommonHandlerRegistry(target, eventName) {\n    return (methodName) => (handler) => target[methodName](eventName, handler);\n}\nfunction isNodeStyleEventEmitter(target) {\n    return isFunction(target.addListener) && isFunction(target.removeListener);\n}\nfunction isJQueryStyleEventEmitter(target) {\n    return isFunction(target.on) && isFunction(target.off);\n}\nfunction isEventTarget(target) {\n    return isFunction(target.addEventListener) && isFunction(target.removeEventListener);\n}\n","import { Subscription } from '../Subscription';\nexport const animationFrameProvider = {\n    schedule(callback) {\n        let request = requestAnimationFrame;\n        let cancel = cancelAnimationFrame;\n        const { delegate } = animationFrameProvider;\n        if (delegate) {\n            request = delegate.requestAnimationFrame;\n            cancel = delegate.cancelAnimationFrame;\n        }\n        const handle = request((timestamp) => {\n            cancel = undefined;\n            callback(timestamp);\n        });\n        return new Subscription(() => cancel === null || cancel === void 0 ? void 0 : cancel(handle));\n    },\n    requestAnimationFrame(...args) {\n        const { delegate } = animationFrameProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame)(...args);\n    },\n    cancelAnimationFrame(...args) {\n        const { delegate } = animationFrameProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.cancelAnimationFrame) || cancelAnimationFrame)(...args);\n    },\n    delegate: undefined,\n};\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\nexport const animationFrameScheduler = new AnimationFrameScheduler(AnimationFrameAction);\nexport const animationFrame = animationFrameScheduler;\n","import { AsyncScheduler } from './AsyncScheduler';\nexport class AnimationFrameScheduler extends AsyncScheduler {\n    flush(action) {\n        this._active = true;\n        const flushId = this._scheduled;\n        this._scheduled = undefined;\n        const { actions } = this;\n        let error;\n        action = action || actions.shift();\n        do {\n            if ((error = action.execute(action.state, action.delay))) {\n                break;\n            }\n        } while ((action = actions[0]) && action.id === flushId && actions.shift());\n        this._active = false;\n        if (error) {\n            while ((action = actions[0]) && action.id === flushId && actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { animationFrameProvider } from './animationFrameProvider';\nexport class AnimationFrameAction extends AsyncAction {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    requestAsyncId(scheduler, id, delay = 0) {\n        if (delay !== null && delay > 0) {\n            return super.requestAsyncId(scheduler, id, delay);\n        }\n        scheduler.actions.push(this);\n        return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider.requestAnimationFrame(() => scheduler.flush(undefined)));\n    }\n    recycleAsyncId(scheduler, id, delay = 0) {\n        var _a;\n        if (delay != null ? delay > 0 : this.delay > 0) {\n            return super.recycleAsyncId(scheduler, id, delay);\n        }\n        const { actions } = scheduler;\n        if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {\n            animationFrameProvider.cancelAnimationFrame(id);\n            scheduler._scheduled = undefined;\n        }\n        return undefined;\n    }\n}\n","let nextHandle = 1;\nlet resolved;\nconst activeHandles = {};\nfunction findAndClearHandle(handle) {\n    if (handle in activeHandles) {\n        delete activeHandles[handle];\n        return true;\n    }\n    return false;\n}\nexport const Immediate = {\n    setImmediate(cb) {\n        const handle = nextHandle++;\n        activeHandles[handle] = true;\n        if (!resolved) {\n            resolved = Promise.resolve();\n        }\n        resolved.then(() => findAndClearHandle(handle) && cb());\n        return handle;\n    },\n    clearImmediate(handle) {\n        findAndClearHandle(handle);\n    },\n};\nexport const TestTools = {\n    pending() {\n        return Object.keys(activeHandles).length;\n    }\n};\n","import { Immediate } from '../util/Immediate';\nconst { setImmediate, clearImmediate } = Immediate;\nexport const immediateProvider = {\n    setImmediate(...args) {\n        const { delegate } = immediateProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate)(...args);\n    },\n    clearImmediate(handle) {\n        const { delegate } = immediateProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);\n    },\n    delegate: undefined,\n};\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\nexport const asapScheduler = new AsapScheduler(AsapAction);\nexport const asap = asapScheduler;\n","import { AsyncScheduler } from './AsyncScheduler';\nexport class AsapScheduler extends AsyncScheduler {\n    flush(action) {\n        this._active = true;\n        const flushId = this._scheduled;\n        this._scheduled = undefined;\n        const { actions } = this;\n        let error;\n        action = action || actions.shift();\n        do {\n            if ((error = action.execute(action.state, action.delay))) {\n                break;\n            }\n        } while ((action = actions[0]) && action.id === flushId && actions.shift());\n        this._active = false;\n        if (error) {\n            while ((action = actions[0]) && action.id === flushId && actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { immediateProvider } from './immediateProvider';\nexport class AsapAction extends AsyncAction {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    requestAsyncId(scheduler, id, delay = 0) {\n        if (delay !== null && delay > 0) {\n            return super.requestAsyncId(scheduler, id, delay);\n        }\n        scheduler.actions.push(this);\n        return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, undefined)));\n    }\n    recycleAsyncId(scheduler, id, delay = 0) {\n        var _a;\n        if (delay != null ? delay > 0 : this.delay > 0) {\n            return super.recycleAsyncId(scheduler, id, delay);\n        }\n        const { actions } = scheduler;\n        if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {\n            immediateProvider.clearImmediate(id);\n            if (scheduler._scheduled === id) {\n                scheduler._scheduled = undefined;\n            }\n        }\n        return undefined;\n    }\n}\n","import { asyncScheduler } from '../scheduler/async';\nimport { audit } from './audit';\nimport { timer } from '../observable/timer';\nexport function auditTime(duration, scheduler = asyncScheduler) {\n    return audit(() => timer(duration, scheduler));\n}\n","import { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function audit(durationSelector) {\n    return operate((source, subscriber) => {\n        let hasValue = false;\n        let lastValue = null;\n        let durationSubscriber = null;\n        let isComplete = false;\n        const endDuration = () => {\n            durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();\n            durationSubscriber = null;\n            if (hasValue) {\n                hasValue = false;\n                const value = lastValue;\n                lastValue = null;\n                subscriber.next(value);\n            }\n            isComplete && subscriber.complete();\n        };\n        const cleanupDuration = () => {\n            durationSubscriber = null;\n            isComplete && subscriber.complete();\n        };\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            hasValue = true;\n            lastValue = value;\n            if (!durationSubscriber) {\n                innerFrom(durationSelector(value)).subscribe((durationSubscriber = createOperatorSubscriber(subscriber, endDuration, cleanupDuration)));\n            }\n        }, () => {\n            isComplete = true;\n            (!hasValue || !durationSubscriber || durationSubscriber.closed) && subscriber.complete();\n        }));\n    });\n}\n","import { Observable } from '../Observable';\nimport { async as asyncScheduler } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isValidDate } from '../util/isDate';\nexport function timer(dueTime = 0, intervalOrScheduler, scheduler = asyncScheduler) {\n    let intervalDuration = -1;\n    if (intervalOrScheduler != null) {\n        if (isScheduler(intervalOrScheduler)) {\n            scheduler = intervalOrScheduler;\n        }\n        else {\n            intervalDuration = intervalOrScheduler;\n        }\n    }\n    return new Observable((subscriber) => {\n        let due = isValidDate(dueTime) ? +dueTime - scheduler.now() : dueTime;\n        if (due < 0) {\n            due = 0;\n        }\n        let n = 0;\n        return scheduler.schedule(function () {\n            if (!subscriber.closed) {\n                subscriber.next(n++);\n                if (0 <= intervalDuration) {\n                    this.schedule(undefined, intervalDuration);\n                }\n                else {\n                    subscriber.complete();\n                }\n            }\n        }, due);\n    });\n}\n","export function isValidDate(value) {\n    return value instanceof Date && !isNaN(value);\n}\n","import { coerceNumberProperty, coerceElement, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Directive, Input, Injectable, Optional, Inject, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, Output, ViewChild, SkipSelf, ElementRef, NgModule } from '@angular/core';\nimport { Subject, of, Observable, fromEvent, animationFrameScheduler, asapScheduler, Subscription, isObservable } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, switchMap, shareReplay } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/platform';\nimport { getRtlScrollAxisType, supportsScrollBehavior, Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport * as i2 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i2$1 from '@angular/cdk/collections';\nimport { isDataSource, ArrayDataSource, _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy } from '@angular/cdk/collections';\n\n/** The injection token used to specify the virtual scrolling strategy. */\nconst VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nclass FixedSizeVirtualScrollStrategy {\n    /**\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize, minBufferPx, maxBufferPx) {\n        this._scrolledIndexChange = new Subject();\n        /** @docs-private Implemented as part of VirtualScrollStrategy. */\n        this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n        /** The attached viewport. */\n        this._viewport = null;\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param viewport The viewport to attach this strategy to.\n     */\n    attach(viewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** Detaches this scroll strategy from the currently attached viewport. */\n    detach() {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n        if (maxBufferPx < minBufferPx && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentScrolled() {\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onDataLengthChanged() {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentRendered() {\n        /* no-op */\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onRenderedOffsetChanged() {\n        /* no-op */\n    }\n    /**\n     * Scroll to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling.\n     */\n    scrollToIndex(index, behavior) {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    }\n    /** Update the viewport's total content size. */\n    _updateTotalContentSize() {\n        if (!this._viewport) {\n            return;\n        }\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /** Update the viewport's rendered range. */\n    _updateRenderedRange() {\n        if (!this._viewport) {\n            return;\n        }\n        const renderedRange = this._viewport.getRenderedRange();\n        const newRange = { start: renderedRange.start, end: renderedRange.end };\n        const viewportSize = this._viewport.getViewportSize();\n        const dataLength = this._viewport.getDataLength();\n        let scrollOffset = this._viewport.measureScrollOffset();\n        // Prevent NaN as result when dividing by zero.\n        let firstVisibleIndex = this._itemSize > 0 ? scrollOffset / this._itemSize : 0;\n        // If user scrolls to the bottom of the list and data changes to a smaller list\n        if (newRange.end > dataLength) {\n            // We have to recalculate the first visible index based on new data length and viewport size.\n            const maxVisibleItems = Math.ceil(viewportSize / this._itemSize);\n            const newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems));\n            // If first visible index changed we must update scroll offset to handle start/end buffers\n            // Current range must also be adjusted to cover the new position (bottom of new list).\n            if (firstVisibleIndex != newVisibleIndex) {\n                firstVisibleIndex = newVisibleIndex;\n                scrollOffset = newVisibleIndex * this._itemSize;\n                newRange.start = Math.floor(firstVisibleIndex);\n            }\n            newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));\n        }\n        const startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        }\n        else {\n            const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n    return fixedSizeDir._scrollStrategy;\n}\n/** A virtual scroll strategy that supports fixed-size items. */\nclass CdkFixedSizeVirtualScroll {\n    constructor() {\n        this._itemSize = 20;\n        this._minBufferPx = 100;\n        this._maxBufferPx = 200;\n        /** The scroll strategy used by this directive. */\n        this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    /** The size of the items in the list (in pixels). */\n    get itemSize() {\n        return this._itemSize;\n    }\n    set itemSize(value) {\n        this._itemSize = coerceNumberProperty(value);\n    }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     */\n    get minBufferPx() {\n        return this._minBufferPx;\n    }\n    set minBufferPx(value) {\n        this._minBufferPx = coerceNumberProperty(value);\n    }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     */\n    get maxBufferPx() {\n        return this._maxBufferPx;\n    }\n    set maxBufferPx(value) {\n        this._maxBufferPx = coerceNumberProperty(value);\n    }\n    ngOnChanges() {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkFixedSizeVirtualScroll, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkFixedSizeVirtualScroll, isStandalone: true, selector: \"cdk-virtual-scroll-viewport[itemSize]\", inputs: { itemSize: \"itemSize\", minBufferPx: \"minBufferPx\", maxBufferPx: \"maxBufferPx\" }, providers: [\n            {\n                provide: VIRTUAL_SCROLL_STRATEGY,\n                useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n            },\n        ], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkFixedSizeVirtualScroll, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-virtual-scroll-viewport[itemSize]',\n                    standalone: true,\n                    providers: [\n                        {\n                            provide: VIRTUAL_SCROLL_STRATEGY,\n                            useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                            deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n                        },\n                    ],\n                }]\n        }], propDecorators: { itemSize: [{\n                type: Input\n            }], minBufferPx: [{\n                type: Input\n            }], maxBufferPx: [{\n                type: Input\n            }] } });\n\n/** Time in ms to throttle the scrolling events by default. */\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nclass ScrollDispatcher {\n    constructor(_ngZone, _platform, document) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n        this._scrolled = new Subject();\n        /** Keeps track of the global `scroll` and `resize` subscriptions. */\n        this._globalSubscription = null;\n        /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n        this._scrolledCount = 0;\n        /**\n         * Map of all the scrollable references that are registered with the service and their\n         * scroll event subscriptions.\n         */\n        this.scrollContainers = new Map();\n        this._document = document;\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param scrollable Scrollable instance to be registered.\n     */\n    register(scrollable) {\n        if (!this.scrollContainers.has(scrollable)) {\n            this.scrollContainers.set(scrollable, scrollable.elementScrolled().subscribe(() => this._scrolled.next(scrollable)));\n        }\n    }\n    /**\n     * De-registers a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param scrollable Scrollable instance to be deregistered.\n     */\n    deregister(scrollable) {\n        const scrollableReference = this.scrollContainers.get(scrollable);\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     */\n    scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n        if (!this._platform.isBrowser) {\n            return of();\n        }\n        return new Observable((observer) => {\n            if (!this._globalSubscription) {\n                this._addGlobalListener();\n            }\n            // In the case of a 0ms delay, use an observable without auditTime\n            // since it does add a perceptible delay in processing overhead.\n            const subscription = auditTimeInMs > 0\n                ? this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer)\n                : this._scrolled.subscribe(observer);\n            this._scrolledCount++;\n            return () => {\n                subscription.unsubscribe();\n                this._scrolledCount--;\n                if (!this._scrolledCount) {\n                    this._removeGlobalListener();\n                }\n            };\n        });\n    }\n    ngOnDestroy() {\n        this._removeGlobalListener();\n        this.scrollContainers.forEach((_, container) => this.deregister(container));\n        this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param elementOrElementRef Element whose ancestors to listen for.\n     * @param auditTimeInMs Time to throttle the scroll events.\n     */\n    ancestorScrolled(elementOrElementRef, auditTimeInMs) {\n        const ancestors = this.getAncestorScrollContainers(elementOrElementRef);\n        return this.scrolled(auditTimeInMs).pipe(filter(target => {\n            return !target || ancestors.indexOf(target) > -1;\n        }));\n    }\n    /** Returns all registered Scrollables that contain the provided element. */\n    getAncestorScrollContainers(elementOrElementRef) {\n        const scrollingContainers = [];\n        this.scrollContainers.forEach((_subscription, scrollable) => {\n            if (this._scrollableContainsElement(scrollable, elementOrElementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        });\n        return scrollingContainers;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Returns true if the element is contained within the provided Scrollable. */\n    _scrollableContainsElement(scrollable, elementOrElementRef) {\n        let element = coerceElement(elementOrElementRef);\n        let scrollableElement = scrollable.getElementRef().nativeElement;\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) {\n                return true;\n            }\n        } while ((element = element.parentElement));\n        return false;\n    }\n    /** Sets up the global scroll listeners. */\n    _addGlobalListener() {\n        this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n            const window = this._getWindow();\n            return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n        });\n    }\n    /** Cleans up the global scroll listener. */\n    _removeGlobalListener() {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ScrollDispatcher, deps: [{ token: i0.NgZone }, { token: i1.Platform }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ScrollDispatcher, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ScrollDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.Platform }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nclass CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        this.elementRef = elementRef;\n        this.scrollDispatcher = scrollDispatcher;\n        this.ngZone = ngZone;\n        this.dir = dir;\n        this._destroyed = new Subject();\n        this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(this.elementRef.nativeElement, 'scroll')\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(observer)));\n    }\n    ngOnInit() {\n        this.scrollDispatcher.register(this);\n    }\n    ngOnDestroy() {\n        this.scrollDispatcher.deregister(this);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Returns observable that emits when a scroll event is fired on the host element. */\n    elementScrolled() {\n        return this._elementScrolled;\n    }\n    /** Gets the ElementRef for the viewport. */\n    getElementRef() {\n        return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param options specified the offsets to scroll to.\n     */\n    scrollTo(options) {\n        const el = this.elementRef.nativeElement;\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        // Rewrite start & end offsets as right or left offsets.\n        if (options.left == null) {\n            options.left = isRtl ? options.end : options.start;\n        }\n        if (options.right == null) {\n            options.right = isRtl ? options.start : options.end;\n        }\n        // Rewrite the bottom offset as a top offset.\n        if (options.bottom != null) {\n            options.top =\n                el.scrollHeight - el.clientHeight - options.bottom;\n        }\n        // Rewrite the right offset as a left offset.\n        if (isRtl && getRtlScrollAxisType() != 0 /* RtlScrollAxisType.NORMAL */) {\n            if (options.left != null) {\n                options.right =\n                    el.scrollWidth - el.clientWidth - options.left;\n            }\n            if (getRtlScrollAxisType() == 2 /* RtlScrollAxisType.INVERTED */) {\n                options.left = options.right;\n            }\n            else if (getRtlScrollAxisType() == 1 /* RtlScrollAxisType.NEGATED */) {\n                options.left = options.right ? -options.right : options.right;\n            }\n        }\n        else {\n            if (options.right != null) {\n                options.left =\n                    el.scrollWidth - el.clientWidth - options.right;\n            }\n        }\n        this._applyScrollToOptions(options);\n    }\n    _applyScrollToOptions(options) {\n        const el = this.elementRef.nativeElement;\n        if (supportsScrollBehavior()) {\n            el.scrollTo(options);\n        }\n        else {\n            if (options.top != null) {\n                el.scrollTop = options.top;\n            }\n            if (options.left != null) {\n                el.scrollLeft = options.left;\n            }\n        }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param from The edge to measure from.\n     */\n    measureScrollOffset(from) {\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const el = this.elementRef.nativeElement;\n        if (from == 'top') {\n            return el.scrollTop;\n        }\n        if (from == 'bottom') {\n            return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n        // Rewrite start & end as left or right offsets.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        if (from == 'start') {\n            from = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            from = isRtl ? LEFT : RIGHT;\n        }\n        if (isRtl && getRtlScrollAxisType() == 2 /* RtlScrollAxisType.INVERTED */) {\n            // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n            else {\n                return el.scrollLeft;\n            }\n        }\n        else if (isRtl && getRtlScrollAxisType() == 1 /* RtlScrollAxisType.NEGATED */) {\n            // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft + el.scrollWidth - el.clientWidth;\n            }\n            else {\n                return -el.scrollLeft;\n            }\n        }\n        else {\n            // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n            // (scrollWidth - clientWidth) when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft;\n            }\n            else {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkScrollable, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkScrollable, isStandalone: true, selector: \"[cdk-scrollable], [cdkScrollable]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkScrollable, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-scrollable], [cdkScrollable]',\n                    standalone: true,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/** Time in ms to throttle the resize events by default. */\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\nclass ViewportRuler {\n    constructor(_platform, ngZone, document) {\n        this._platform = _platform;\n        /** Stream of viewport change events. */\n        this._change = new Subject();\n        /** Event listener that will be used to handle the viewport change events. */\n        this._changeListener = (event) => {\n            this._change.next(event);\n        };\n        this._document = document;\n        ngZone.runOutsideAngular(() => {\n            if (_platform.isBrowser) {\n                const window = this._getWindow();\n                // Note that bind the events ourselves, rather than going through something like RxJS's\n                // `fromEvent` so that we can ensure that they're bound outside of the NgZone.\n                window.addEventListener('resize', this._changeListener);\n                window.addEventListener('orientationchange', this._changeListener);\n            }\n            // Clear the cached position so that the viewport is re-measured next time it is required.\n            // We don't need to keep track of the subscription, because it is completed on destroy.\n            this.change().subscribe(() => (this._viewportSize = null));\n        });\n    }\n    ngOnDestroy() {\n        if (this._platform.isBrowser) {\n            const window = this._getWindow();\n            window.removeEventListener('resize', this._changeListener);\n            window.removeEventListener('orientationchange', this._changeListener);\n        }\n        this._change.complete();\n    }\n    /** Returns the viewport's width and height. */\n    getViewportSize() {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n        const output = { width: this._viewportSize.width, height: this._viewportSize.height };\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = null;\n        }\n        return output;\n    }\n    /** Gets a ClientRect for the viewport's bounds. */\n    getViewportRect() {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        const scrollPosition = this.getViewportScrollPosition();\n        const { width, height } = this.getViewportSize();\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width,\n        };\n    }\n    /** Gets the (top, left) scroll position of the viewport. */\n    getViewportScrollPosition() {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return { top: 0, left: 0 };\n        }\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        const document = this._document;\n        const window = this._getWindow();\n        const documentElement = document.documentElement;\n        const documentRect = documentElement.getBoundingClientRect();\n        const top = -documentRect.top ||\n            document.body.scrollTop ||\n            window.scrollY ||\n            documentElement.scrollTop ||\n            0;\n        const left = -documentRect.left ||\n            document.body.scrollLeft ||\n            window.scrollX ||\n            documentElement.scrollLeft ||\n            0;\n        return { top, left };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * This stream emits outside of the Angular zone.\n     * @param throttleTime Time in milliseconds to throttle the stream.\n     */\n    change(throttleTime = DEFAULT_RESIZE_TIME) {\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Updates the cached viewport size. */\n    _updateViewportSize() {\n        const window = this._getWindow();\n        this._viewportSize = this._platform.isBrowser\n            ? { width: window.innerWidth, height: window.innerHeight }\n            : { width: 0, height: 0 };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ViewportRuler, deps: [{ token: i1.Platform }, { token: i0.NgZone }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ViewportRuler, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ViewportRuler, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.Platform }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\nconst VIRTUAL_SCROLLABLE = new InjectionToken('VIRTUAL_SCROLLABLE');\n/**\n * Extending the {@link CdkScrollable} to be used as scrolling container for virtual scrolling.\n */\nclass CdkVirtualScrollable extends CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n    }\n    /**\n     * Measure the viewport size for the provided orientation.\n     *\n     * @param orientation The orientation to measure the size from.\n     */\n    measureViewportSize(orientation) {\n        const viewportEl = this.elementRef.nativeElement;\n        return orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkVirtualScrollable, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkVirtualScrollable, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkVirtualScrollable, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1, r2) {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\nconst SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\nclass CdkVirtualScrollViewport extends CdkVirtualScrollable {\n    /** The direction the viewport scrolls. */\n    get orientation() {\n        return this._orientation;\n    }\n    set orientation(orientation) {\n        if (this._orientation !== orientation) {\n            this._orientation = orientation;\n            this._calculateSpacerSize();\n        }\n    }\n    /**\n     * Whether rendered items should persist in the DOM after scrolling out of view. By default, items\n     * will be removed.\n     */\n    get appendOnly() {\n        return this._appendOnly;\n    }\n    set appendOnly(value) {\n        this._appendOnly = coerceBooleanProperty(value);\n    }\n    constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, viewportRuler, scrollable) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n        this.elementRef = elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollStrategy = _scrollStrategy;\n        this.scrollable = scrollable;\n        this._platform = inject(Platform);\n        /** Emits when the viewport is detached from a CdkVirtualForOf. */\n        this._detachedSubject = new Subject();\n        /** Emits when the rendered range changes. */\n        this._renderedRangeSubject = new Subject();\n        this._orientation = 'vertical';\n        this._appendOnly = false;\n        // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n        // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n        // depending on how the strategy calculates the scrolled index, it may come at a cost to\n        // performance.\n        /** Emits when the index of the first element visible in the viewport changes. */\n        this.scrolledIndexChange = new Observable((observer) => this._scrollStrategy.scrolledIndexChange.subscribe(index => Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n        /** A stream that emits whenever the rendered range changes. */\n        this.renderedRangeStream = this._renderedRangeSubject;\n        /**\n         * The total size of all content (in pixels), including content that is not currently rendered.\n         */\n        this._totalContentSize = 0;\n        /** A string representing the `style.width` property value to be used for the spacer element. */\n        this._totalContentWidth = '';\n        /** A string representing the `style.height` property value to be used for the spacer element. */\n        this._totalContentHeight = '';\n        /** The currently rendered range of indices. */\n        this._renderedRange = { start: 0, end: 0 };\n        /** The length of the data bound to this viewport (in number of items). */\n        this._dataLength = 0;\n        /** The size of the viewport (in pixels). */\n        this._viewportSize = 0;\n        /** The last rendered content offset that was set. */\n        this._renderedContentOffset = 0;\n        /**\n         * Whether the last rendered content offset was to the end of the content (and therefore needs to\n         * be rewritten as an offset to the start of the content).\n         */\n        this._renderedContentOffsetNeedsRewrite = false;\n        /** Whether there is a pending change detection cycle. */\n        this._isChangeDetectionPending = false;\n        /** A list of functions to run after the next change detection cycle. */\n        this._runAfterChangeDetection = [];\n        /** Subscription to changes in the viewport size. */\n        this._viewportChanges = Subscription.EMPTY;\n        if (!_scrollStrategy && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n        }\n        this._viewportChanges = viewportRuler.change().subscribe(() => {\n            this.checkViewportSize();\n        });\n        if (!this.scrollable) {\n            // No scrollable is provided, so the virtual-scroll-viewport needs to become a scrollable\n            this.elementRef.nativeElement.classList.add('cdk-virtual-scrollable');\n            this.scrollable = this;\n        }\n    }\n    ngOnInit() {\n        // Scrolling depends on the element dimensions which we can't get during SSR.\n        if (!this._platform.isBrowser) {\n            return;\n        }\n        if (this.scrollable === this) {\n            super.ngOnInit();\n        }\n        // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n        this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n            this._measureViewportSize();\n            this._scrollStrategy.attach(this);\n            this.scrollable\n                .elementScrolled()\n                .pipe(\n            // Start off with a fake scroll event so we properly detect our initial position.\n            startWith(null), \n            // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, SCROLL_SCHEDULER), \n            // Usually `elementScrolled` is completed when the scrollable is destroyed, but\n            // that may not be the case if a `CdkVirtualScrollableElement` is used so we have\n            // to unsubscribe here just in case.\n            takeUntil(this._destroyed))\n                .subscribe(() => this._scrollStrategy.onContentScrolled());\n            this._markChangeDetectionNeeded();\n        }));\n    }\n    ngOnDestroy() {\n        this.detach();\n        this._scrollStrategy.detach();\n        // Complete all subjects\n        this._renderedRangeSubject.complete();\n        this._detachedSubject.complete();\n        this._viewportChanges.unsubscribe();\n        super.ngOnDestroy();\n    }\n    /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */\n    attach(forOf) {\n        if (this._forOf && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CdkVirtualScrollViewport is already attached.');\n        }\n        // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n        this.ngZone.runOutsideAngular(() => {\n            this._forOf = forOf;\n            this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n                const newLength = data.length;\n                if (newLength !== this._dataLength) {\n                    this._dataLength = newLength;\n                    this._scrollStrategy.onDataLengthChanged();\n                }\n                this._doChangeDetection();\n            });\n        });\n    }\n    /** Detaches the current `CdkVirtualForOf`. */\n    detach() {\n        this._forOf = null;\n        this._detachedSubject.next();\n    }\n    /** Gets the length of the data bound to this viewport (in number of items). */\n    getDataLength() {\n        return this._dataLength;\n    }\n    /** Gets the size of the viewport (in pixels). */\n    getViewportSize() {\n        return this._viewportSize;\n    }\n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n    /** Get the current rendered range of items. */\n    getRenderedRange() {\n        return this._renderedRange;\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     */\n    setTotalContentSize(size) {\n        if (this._totalContentSize !== size) {\n            this._totalContentSize = size;\n            this._calculateSpacerSize();\n            this._markChangeDetectionNeeded();\n        }\n    }\n    /** Sets the currently rendered range of indices. */\n    setRenderedRange(range) {\n        if (!rangesEqual(this._renderedRange, range)) {\n            if (this.appendOnly) {\n                range = { start: 0, end: Math.max(this._renderedRange.end, range.end) };\n            }\n            this._renderedRangeSubject.next((this._renderedRange = range));\n            this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n        }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     */\n    getOffsetToRenderedContentStart() {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     */\n    setRenderedContentOffset(offset, to = 'to-start') {\n        // In appendOnly, we always start from the top\n        offset = this.appendOnly && to === 'to-start' ? 0 : offset;\n        // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n        // in the negative direction.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        const isHorizontal = this.orientation == 'horizontal';\n        const axis = isHorizontal ? 'X' : 'Y';\n        const axisDirection = isHorizontal && isRtl ? -1 : 1;\n        let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n        this._renderedContentOffset = offset;\n        if (to === 'to-end') {\n            transform += ` translate${axis}(-100%)`;\n            // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n            // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n            // expand upward).\n            this._renderedContentOffsetNeedsRewrite = true;\n        }\n        if (this._renderedContentTransform != transform) {\n            // We know this value is safe because we parse `offset` with `Number()` before passing it\n            // into the string.\n            this._renderedContentTransform = transform;\n            this._markChangeDetectionNeeded(() => {\n                if (this._renderedContentOffsetNeedsRewrite) {\n                    this._renderedContentOffset -= this.measureRenderedContentSize();\n                    this._renderedContentOffsetNeedsRewrite = false;\n                    this.setRenderedContentOffset(this._renderedContentOffset);\n                }\n                else {\n                    this._scrollStrategy.onRenderedOffsetChanged();\n                }\n            });\n        }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param offset The offset to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToOffset(offset, behavior = 'auto') {\n        const options = { behavior };\n        if (this.orientation === 'horizontal') {\n            options.start = offset;\n        }\n        else {\n            options.top = offset;\n        }\n        this.scrollable.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToIndex(index, behavior = 'auto') {\n        this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the scrollable (in pixels).\n     * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     */\n    measureScrollOffset(from) {\n        // This is to break the call cycle\n        let measureScrollOffset;\n        if (this.scrollable == this) {\n            measureScrollOffset = (_from) => super.measureScrollOffset(_from);\n        }\n        else {\n            measureScrollOffset = (_from) => this.scrollable.measureScrollOffset(_from);\n        }\n        return Math.max(0, measureScrollOffset(from ?? (this.orientation === 'horizontal' ? 'start' : 'top')) -\n            this.measureViewportOffset());\n    }\n    /**\n     * Measures the offset of the viewport from the scrolling container\n     * @param from The edge to measure from.\n     */\n    measureViewportOffset(from) {\n        let fromRect;\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const isRtl = this.dir?.value == 'rtl';\n        if (from == 'start') {\n            fromRect = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            fromRect = isRtl ? LEFT : RIGHT;\n        }\n        else if (from) {\n            fromRect = from;\n        }\n        else {\n            fromRect = this.orientation === 'horizontal' ? 'left' : 'top';\n        }\n        const scrollerClientRect = this.scrollable.measureBoundingClientRectWithScrollOffset(fromRect);\n        const viewportClientRect = this.elementRef.nativeElement.getBoundingClientRect()[fromRect];\n        return viewportClientRect - scrollerClientRect;\n    }\n    /** Measure the combined size of all of the rendered items. */\n    measureRenderedContentSize() {\n        const contentEl = this._contentWrapper.nativeElement;\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     */\n    measureRangeSize(range) {\n        if (!this._forOf) {\n            return 0;\n        }\n        return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /** Update the viewport dimensions and re-render. */\n    checkViewportSize() {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n        this._scrollStrategy.onDataLengthChanged();\n    }\n    /** Measure the viewport size. */\n    _measureViewportSize() {\n        this._viewportSize = this.scrollable.measureViewportSize(this.orientation);\n    }\n    /** Queue up change detection to run. */\n    _markChangeDetectionNeeded(runAfter) {\n        if (runAfter) {\n            this._runAfterChangeDetection.push(runAfter);\n        }\n        // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n        if (!this._isChangeDetectionPending) {\n            this._isChangeDetectionPending = true;\n            this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n                this._doChangeDetection();\n            }));\n        }\n    }\n    /** Run change detection. */\n    _doChangeDetection() {\n        this._isChangeDetectionPending = false;\n        // Apply the content transform. The transform can't be set via an Angular binding because\n        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n        // the `Number` function first to coerce it to a numeric value.\n        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n        // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n        // from the root, since the repeated items are content projected in. Calling `detectChanges`\n        // instead does not properly check the projected content.\n        this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n        const runAfterChangeDetection = this._runAfterChangeDetection;\n        this._runAfterChangeDetection = [];\n        for (const fn of runAfterChangeDetection) {\n            fn();\n        }\n    }\n    /** Calculates the `style.width` and `style.height` for the spacer element. */\n    _calculateSpacerSize() {\n        this._totalContentHeight =\n            this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n        this._totalContentWidth =\n            this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkVirtualScrollViewport, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: VIRTUAL_SCROLL_STRATEGY, optional: true }, { token: i2.Directionality, optional: true }, { token: ScrollDispatcher }, { token: ViewportRuler }, { token: VIRTUAL_SCROLLABLE, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkVirtualScrollViewport, isStandalone: true, selector: \"cdk-virtual-scroll-viewport\", inputs: { orientation: \"orientation\", appendOnly: \"appendOnly\" }, outputs: { scrolledIndexChange: \"scrolledIndexChange\" }, host: { properties: { \"class.cdk-virtual-scroll-orientation-horizontal\": \"orientation === \\\"horizontal\\\"\", \"class.cdk-virtual-scroll-orientation-vertical\": \"orientation !== \\\"horizontal\\\"\" }, classAttribute: \"cdk-virtual-scroll-viewport\" }, providers: [\n            {\n                provide: CdkScrollable,\n                useFactory: (virtualScrollable, viewport) => virtualScrollable || viewport,\n                deps: [[new Optional(), new Inject(VIRTUAL_SCROLLABLE)], CdkVirtualScrollViewport],\n            },\n        ], viewQueries: [{ propertyName: \"_contentWrapper\", first: true, predicate: [\"contentWrapper\"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\", styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;transform:translateZ(0)}.cdk-virtual-scrollable{overflow:auto;will-change:scroll-position;contain:strict;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{height:1px;transform-origin:0 0;flex:0 0 auto}[dir=rtl] .cdk-virtual-scroll-spacer{transform-origin:100% 0}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkVirtualScrollViewport, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-virtual-scroll-viewport', host: {\n                        'class': 'cdk-virtual-scroll-viewport',\n                        '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n                        '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, providers: [\n                        {\n                            provide: CdkScrollable,\n                            useFactory: (virtualScrollable, viewport) => virtualScrollable || viewport,\n                            deps: [[new Optional(), new Inject(VIRTUAL_SCROLLABLE)], CdkVirtualScrollViewport],\n                        },\n                    ], template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\", styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;transform:translateZ(0)}.cdk-virtual-scrollable{overflow:auto;will-change:scroll-position;contain:strict;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{height:1px;transform-origin:0 0;flex:0 0 auto}[dir=rtl] .cdk-virtual-scroll-spacer{transform-origin:100% 0}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [VIRTUAL_SCROLL_STRATEGY]\n                }] }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: ScrollDispatcher }, { type: ViewportRuler }, { type: CdkVirtualScrollable, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [VIRTUAL_SCROLLABLE]\n                }] }]; }, propDecorators: { orientation: [{\n                type: Input\n            }], appendOnly: [{\n                type: Input\n            }], scrolledIndexChange: [{\n                type: Output\n            }], _contentWrapper: [{\n                type: ViewChild,\n                args: ['contentWrapper', { static: true }]\n            }] } });\n\n/** Helper to extract the offset of a DOM Node in a certain direction. */\nfunction getOffset(orientation, direction, node) {\n    const el = node;\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    const rect = el.getBoundingClientRect();\n    if (orientation === 'horizontal') {\n        return direction === 'start' ? rect.left : rect.right;\n    }\n    return direction === 'start' ? rect.top : rect.bottom;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\nclass CdkVirtualForOf {\n    /** The DataSource to display. */\n    get cdkVirtualForOf() {\n        return this._cdkVirtualForOf;\n    }\n    set cdkVirtualForOf(value) {\n        this._cdkVirtualForOf = value;\n        if (isDataSource(value)) {\n            this._dataSourceChanges.next(value);\n        }\n        else {\n            // If value is an an NgIterable, convert it to an array.\n            this._dataSourceChanges.next(new ArrayDataSource(isObservable(value) ? value : Array.from(value || [])));\n        }\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     */\n    get cdkVirtualForTrackBy() {\n        return this._cdkVirtualForTrackBy;\n    }\n    set cdkVirtualForTrackBy(fn) {\n        this._needsUpdate = true;\n        this._cdkVirtualForTrackBy = fn\n            ? (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item)\n            : undefined;\n    }\n    /** The template used to stamp out new elements. */\n    set cdkVirtualForTemplate(value) {\n        if (value) {\n            this._needsUpdate = true;\n            this._template = value;\n        }\n    }\n    /**\n     * The size of the cache used to store templates that are not being used for re-use later.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n     */\n    get cdkVirtualForTemplateCacheSize() {\n        return this._viewRepeater.viewCacheSize;\n    }\n    set cdkVirtualForTemplateCacheSize(size) {\n        this._viewRepeater.viewCacheSize = coerceNumberProperty(size);\n    }\n    constructor(\n    /** The view container to add items to. */\n    _viewContainerRef, \n    /** The template to use when stamping out new items. */\n    _template, \n    /** The set of available differs. */\n    _differs, \n    /** The strategy used to render items in the virtual scroll viewport. */\n    _viewRepeater, \n    /** The virtual scrolling viewport that these items are being rendered in. */\n    _viewport, ngZone) {\n        this._viewContainerRef = _viewContainerRef;\n        this._template = _template;\n        this._differs = _differs;\n        this._viewRepeater = _viewRepeater;\n        this._viewport = _viewport;\n        /** Emits when the rendered view of the data changes. */\n        this.viewChange = new Subject();\n        /** Subject that emits when a new DataSource instance is given. */\n        this._dataSourceChanges = new Subject();\n        /** Emits whenever the data in the current DataSource changes. */\n        this.dataStream = this._dataSourceChanges.pipe(\n        // Start off with null `DataSource`.\n        startWith(null), \n        // Bundle up the previous and current data sources so we can work with both.\n        pairwise(), \n        // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n        // new one, passing back a stream of data changes which we run through `switchMap` to give\n        // us a data stream that emits the latest data from whatever the current `DataSource` is.\n        switchMap(([prev, cur]) => this._changeDataSource(prev, cur)), \n        // Replay the last emitted data when someone subscribes.\n        shareReplay(1));\n        /** The differ used to calculate changes to the data. */\n        this._differ = null;\n        /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n        this._needsUpdate = false;\n        this._destroyed = new Subject();\n        this.dataStream.subscribe(data => {\n            this._data = data;\n            this._onRenderedDataChange();\n        });\n        this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n            this._renderedRange = range;\n            if (this.viewChange.observers.length) {\n                ngZone.run(() => this.viewChange.next(this._renderedRange));\n            }\n            this._onRenderedDataChange();\n        });\n        this._viewport.attach(this);\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     */\n    measureRangeSize(range, orientation) {\n        if (range.start >= range.end) {\n            return 0;\n        }\n        if ((range.start < this._renderedRange.start || range.end > this._renderedRange.end) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Error: attempted to measure an item that isn't rendered.`);\n        }\n        // The index into the list of rendered views for the first item in the range.\n        const renderedStartIndex = range.start - this._renderedRange.start;\n        // The length of the range we're measuring.\n        const rangeLen = range.end - range.start;\n        // Loop over all the views, find the first and land node and compute the size by subtracting\n        // the top of the first node from the bottom of the last one.\n        let firstNode;\n        let lastNode;\n        // Find the first node by starting from the beginning and going forwards.\n        for (let i = 0; i < rangeLen; i++) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                firstNode = lastNode = view.rootNodes[0];\n                break;\n            }\n        }\n        // Find the last node by starting from the end and going backwards.\n        for (let i = rangeLen - 1; i > -1; i--) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                lastNode = view.rootNodes[view.rootNodes.length - 1];\n                break;\n            }\n        }\n        return firstNode && lastNode\n            ? getOffset(orientation, 'end', lastNode) - getOffset(orientation, 'start', firstNode)\n            : 0;\n    }\n    ngDoCheck() {\n        if (this._differ && this._needsUpdate) {\n            // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n            // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n            // changing (need to do this diff).\n            const changes = this._differ.diff(this._renderedItems);\n            if (!changes) {\n                this._updateContext();\n            }\n            else {\n                this._applyChanges(changes);\n            }\n            this._needsUpdate = false;\n        }\n    }\n    ngOnDestroy() {\n        this._viewport.detach();\n        this._dataSourceChanges.next(undefined);\n        this._dataSourceChanges.complete();\n        this.viewChange.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._viewRepeater.detach();\n    }\n    /** React to scroll state changes in the viewport. */\n    _onRenderedDataChange() {\n        if (!this._renderedRange) {\n            return;\n        }\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n        if (!this._differ) {\n            // Use a wrapper function for the `trackBy` so any new values are\n            // picked up automatically without having to recreate the differ.\n            this._differ = this._differs.find(this._renderedItems).create((index, item) => {\n                return this.cdkVirtualForTrackBy ? this.cdkVirtualForTrackBy(index, item) : item;\n            });\n        }\n        this._needsUpdate = true;\n    }\n    /** Swap out one `DataSource` for another. */\n    _changeDataSource(oldDs, newDs) {\n        if (oldDs) {\n            oldDs.disconnect(this);\n        }\n        this._needsUpdate = true;\n        return newDs ? newDs.connect(this) : of();\n    }\n    /** Update the `CdkVirtualForOfContext` for all views. */\n    _updateContext() {\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n            view.detectChanges();\n        }\n    }\n    /** Apply changes to the DOM. */\n    _applyChanges(changes) {\n        this._viewRepeater.applyChanges(changes, this._viewContainerRef, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record, currentIndex), record => record.item);\n        // Update $implicit for any items that had an identity change.\n        changes.forEachIdentityChange((record) => {\n            const view = this._viewContainerRef.get(record.currentIndex);\n            view.context.$implicit = record.item;\n        });\n        // Update the context variables on all items.\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n        }\n    }\n    /** Update the computed properties on the `CdkVirtualForOfContext`. */\n    _updateComputedContextProperties(context) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n    }\n    _getEmbeddedViewArgs(record, index) {\n        // Note that it's important that we insert the item directly at the proper index,\n        // rather than inserting it and the moving it in place, because if there's a directive\n        // on the same node that injects the `ViewContainerRef`, Angular will insert another\n        // comment node which can throw off the move when it's being repeated for all items.\n        return {\n            templateRef: this._template,\n            context: {\n                $implicit: record.item,\n                // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n                // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n                cdkVirtualForOf: this._cdkVirtualForOf,\n                index: -1,\n                count: -1,\n                first: false,\n                last: false,\n                odd: false,\n                even: false,\n            },\n            index,\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkVirtualForOf, deps: [{ token: i0.ViewContainerRef }, { token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: _VIEW_REPEATER_STRATEGY }, { token: CdkVirtualScrollViewport, skipSelf: true }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkVirtualForOf, isStandalone: true, selector: \"[cdkVirtualFor][cdkVirtualForOf]\", inputs: { cdkVirtualForOf: \"cdkVirtualForOf\", cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\", cdkVirtualForTemplate: \"cdkVirtualForTemplate\", cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\" }, providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkVirtualForOf, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkVirtualFor][cdkVirtualForOf]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                    standalone: true,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: i2$1._RecycleViewRepeaterStrategy, decorators: [{\n                    type: Inject,\n                    args: [_VIEW_REPEATER_STRATEGY]\n                }] }, { type: CdkVirtualScrollViewport, decorators: [{\n                    type: SkipSelf\n                }] }, { type: i0.NgZone }]; }, propDecorators: { cdkVirtualForOf: [{\n                type: Input\n            }], cdkVirtualForTrackBy: [{\n                type: Input\n            }], cdkVirtualForTemplate: [{\n                type: Input\n            }], cdkVirtualForTemplateCacheSize: [{\n                type: Input\n            }] } });\n\n/**\n * Provides a virtual scrollable for the element it is attached to.\n */\nclass CdkVirtualScrollableElement extends CdkVirtualScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return (this.getElementRef().nativeElement.getBoundingClientRect()[from] -\n            this.measureScrollOffset(from));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkVirtualScrollableElement, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkVirtualScrollableElement, isStandalone: true, selector: \"[cdkVirtualScrollingElement]\", host: { classAttribute: \"cdk-virtual-scrollable\" }, providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableElement }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkVirtualScrollableElement, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkVirtualScrollingElement]',\n                    providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableElement }],\n                    standalone: true,\n                    host: {\n                        'class': 'cdk-virtual-scrollable',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/**\n * Provides as virtual scrollable for the global / window scrollbar.\n */\nclass CdkVirtualScrollableWindow extends CdkVirtualScrollable {\n    constructor(scrollDispatcher, ngZone, dir) {\n        super(new ElementRef(document.documentElement), scrollDispatcher, ngZone, dir);\n        this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(document, 'scroll').pipe(takeUntil(this._destroyed)).subscribe(observer)));\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkVirtualScrollableWindow, deps: [{ token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkVirtualScrollableWindow, isStandalone: true, selector: \"cdk-virtual-scroll-viewport[scrollWindow]\", providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableWindow }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkVirtualScrollableWindow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-virtual-scroll-viewport[scrollWindow]',\n                    providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableWindow }],\n                    standalone: true,\n                }]\n        }], ctorParameters: function () { return [{ type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nclass CdkScrollableModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkScrollableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkScrollableModule, imports: [CdkScrollable], exports: [CdkScrollable] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkScrollableModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkScrollableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [CdkScrollable],\n                    imports: [CdkScrollable],\n                }]\n        }] });\n/**\n * @docs-primary-export\n */\nclass ScrollingModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ScrollingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: ScrollingModule, imports: [BidiModule, CdkScrollableModule, CdkVirtualScrollViewport,\n            CdkFixedSizeVirtualScroll,\n            CdkVirtualForOf,\n            CdkVirtualScrollableWindow,\n            CdkVirtualScrollableElement], exports: [BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll,\n            CdkVirtualForOf,\n            CdkVirtualScrollViewport,\n            CdkVirtualScrollableWindow,\n            CdkVirtualScrollableElement] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ScrollingModule, imports: [BidiModule,\n            CdkScrollableModule, BidiModule, CdkScrollableModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ScrollingModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        BidiModule,\n                        CdkScrollableModule,\n                        CdkVirtualScrollViewport,\n                        CdkFixedSizeVirtualScroll,\n                        CdkVirtualForOf,\n                        CdkVirtualScrollableWindow,\n                        CdkVirtualScrollableElement,\n                    ],\n                    exports: [\n                        BidiModule,\n                        CdkScrollableModule,\n                        CdkFixedSizeVirtualScroll,\n                        CdkVirtualForOf,\n                        CdkVirtualScrollViewport,\n                        CdkVirtualScrollableWindow,\n                        CdkVirtualScrollableElement,\n                    ],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkFixedSizeVirtualScroll, CdkScrollable, CdkScrollableModule, CdkVirtualForOf, CdkVirtualScrollViewport, CdkVirtualScrollable, CdkVirtualScrollableElement, CdkVirtualScrollableWindow, DEFAULT_RESIZE_TIME, DEFAULT_SCROLL_TIME, FixedSizeVirtualScrollStrategy, ScrollDispatcher, ScrollingModule, VIRTUAL_SCROLLABLE, VIRTUAL_SCROLL_STRATEGY, ViewportRuler, _fixedSizeVirtualScrollStrategyFactory };\n","import * as i1 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport * as i6 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, Optional, ElementRef, ApplicationRef, ANIMATION_MODULE_TYPE, InjectionToken, Directive, EventEmitter, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1$1 from '@angular/cdk/platform';\nimport { supportsScrollBehavior, _getEventTarget, _isTestEnvironment } from '@angular/cdk/platform';\nimport { filter, take, takeUntil, takeWhile } from 'rxjs/operators';\nimport * as i5 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\nconst scrollBehaviorSupported = supportsScrollBehavior();\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach() { }\n    /** Blocks page-level scroll while the attached overlay is open. */\n    enable() {\n        if (this._canBeEnabled()) {\n            const root = this._document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    disable() {\n        if (this._isEnabled) {\n            const html = this._document.documentElement;\n            const body = this._document.body;\n            const htmlStyle = html.style;\n            const bodyStyle = body.style;\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n            // because it can throw off feature detections in `supportsScrollBehavior` which\n            // checks for `'scrollBehavior' in documentElement.style`.\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            }\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n                bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n            }\n        }\n    }\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        const html = this._document.documentElement;\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        const body = this._document.body;\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /** Detaches the overlay ref and disables the scroll strategy. */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        const stream = this._scrollDispatcher.scrolled(0).pipe(filter(scrollable => {\n            return (!scrollable ||\n                !this._overlayRef.overlayElement.contains(scrollable.getElementRef().nativeElement));\n        }));\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/** Scroll strategy that doesn't do anything. */\nclass NoopScrollStrategy {\n    /** Does nothing, as this scroll strategy is a no-op. */\n    enable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    disable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    attach() { }\n}\n\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        const outsideAbove = element.bottom < containerBounds.top;\n        const outsideBelow = element.top > containerBounds.bottom;\n        const outsideLeft = element.right < containerBounds.left;\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        const clippedAbove = element.top < scrollContainerRect.top;\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        const clippedLeft = element.left < scrollContainerRect.left;\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /** Do nothing on scroll. */\n        this.noop = () => new NoopScrollStrategy();\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n        /** Block scrolling. */\n        this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n        this._document = document;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ScrollStrategyOptions, deps: [{ token: i1.ScrollDispatcher }, { token: i1.ViewportRuler }, { token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ScrollStrategyOptions, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ScrollStrategyOptions, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.ScrollDispatcher }, { type: i1.ViewportRuler }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/** Initial configuration used when creating an overlay. */\nclass OverlayConfig {\n    constructor(config) {\n        /** Strategy to be used when handling scroll events while the overlay is open. */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /** Custom class to add to the overlay pane. */\n        this.panelClass = '';\n        /** Whether the overlay has a backdrop. */\n        this.hasBackdrop = false;\n        /** Custom class to add to the backdrop */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n            // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n            const configKeys = Object.keys(config);\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the possible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = config[key];\n                }\n            }\n        }\n    }\n}\n\n/** The points of the origin element and the overlay element to connect. */\nclass ConnectionPositionPair {\n    constructor(origin, overlay, \n    /** Offset along the X axis. */\n    offsetX, \n    /** Offset along the Y axis. */\n    offsetY, \n    /** Class(es) to be applied to the panel while this position is active. */\n    panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nclass ScrollingVisibility {\n}\n/** The change event emitted by the strategy when a fallback position is used. */\nclass ConnectedOverlayPositionChange {\n    constructor(\n    /** The position used as a result of this change. */\n    connectionPair, \n    /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass BaseOverlayDispatcher {\n    constructor(document) {\n        /** Currently attached overlays in the order they were attached. */\n        this._attachedOverlays = [];\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this.detach();\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        this._attachedOverlays.push(overlayRef);\n    }\n    /** Remove an overlay from the list of attached overlay refs. */\n    remove(overlayRef) {\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this.detach();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: BaseOverlayDispatcher, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: BaseOverlayDispatcher, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: BaseOverlayDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n    constructor(document, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(document);\n        this._ngZone = _ngZone;\n        /** Keyboard event listener that will be attached to the body. */\n        this._keydownListener = (event) => {\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEvents.observers.length > 0) {\n                    const keydownEvents = overlays[i]._keydownEvents;\n                    /** @breaking-change 14.0.0 _ngZone will be required. */\n                    if (this._ngZone) {\n                        this._ngZone.run(() => keydownEvents.next(event));\n                    }\n                    else {\n                        keydownEvents.next(event);\n                    }\n                    break;\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(() => this._document.body.addEventListener('keydown', this._keydownListener));\n            }\n            else {\n                this._document.body.addEventListener('keydown', this._keydownListener);\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener);\n            this._isAttached = false;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: OverlayKeyboardDispatcher, deps: [{ token: DOCUMENT }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: OverlayKeyboardDispatcher, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: OverlayKeyboardDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n    constructor(document, _platform, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(document);\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._cursorStyleIsSet = false;\n        /** Store pointerdown event target to track origin of click. */\n        this._pointerDownListener = (event) => {\n            this._pointerDownEventTarget = _getEventTarget(event);\n        };\n        /** Click event listener that will be attached to the body propagate phase. */\n        this._clickListener = (event) => {\n            const target = _getEventTarget(event);\n            // In case of a click event, we want to check the origin of the click\n            // (e.g. in case where a user starts a click inside the overlay and\n            // releases the click outside of it).\n            // This is done by using the event target of the preceding pointerdown event.\n            // Every click event caused by a pointer device has a preceding pointerdown\n            // event, unless the click was programmatically triggered (e.g. in a unit test).\n            const origin = event.type === 'click' && this._pointerDownEventTarget\n                ? this._pointerDownEventTarget\n                : target;\n            // Reset the stored pointerdown event target, to avoid having it interfere\n            // in subsequent events.\n            this._pointerDownEventTarget = null;\n            // We copy the array because the original may be modified asynchronously if the\n            // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n            // the for loop.\n            const overlays = this._attachedOverlays.slice();\n            // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n            // We want to target all overlays for which the click could be considered as outside click.\n            // As soon as we reach an overlay for which the click is not outside click we break off\n            // the loop.\n            for (let i = overlays.length - 1; i > -1; i--) {\n                const overlayRef = overlays[i];\n                if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n                    continue;\n                }\n                // If it's a click inside the overlay, just break - we should do nothing\n                // If it's an outside click (both origin and target of the click) dispatch the mouse event,\n                // and proceed with the next overlay\n                if (overlayRef.overlayElement.contains(target) ||\n                    overlayRef.overlayElement.contains(origin)) {\n                    break;\n                }\n                const outsidePointerEvents = overlayRef._outsidePointerEvents;\n                /** @breaking-change 14.0.0 _ngZone will be required. */\n                if (this._ngZone) {\n                    this._ngZone.run(() => outsidePointerEvents.next(event));\n                }\n                else {\n                    outsidePointerEvents.next(event);\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Safari on iOS does not generate click events for non-interactive\n        // elements. However, we want to receive a click for any element outside\n        // the overlay. We can force a \"clickable\" state by setting\n        // `cursor: pointer` on the document body. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n        // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n        if (!this._isAttached) {\n            const body = this._document.body;\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(() => this._addEventListeners(body));\n            }\n            else {\n                this._addEventListeners(body);\n            }\n            // click event is not fired on iOS. To make element \"clickable\" we are\n            // setting the cursor to pointer\n            if (this._platform.IOS && !this._cursorStyleIsSet) {\n                this._cursorOriginalValue = body.style.cursor;\n                body.style.cursor = 'pointer';\n                this._cursorStyleIsSet = true;\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            const body = this._document.body;\n            body.removeEventListener('pointerdown', this._pointerDownListener, true);\n            body.removeEventListener('click', this._clickListener, true);\n            body.removeEventListener('auxclick', this._clickListener, true);\n            body.removeEventListener('contextmenu', this._clickListener, true);\n            if (this._platform.IOS && this._cursorStyleIsSet) {\n                body.style.cursor = this._cursorOriginalValue;\n                this._cursorStyleIsSet = false;\n            }\n            this._isAttached = false;\n        }\n    }\n    _addEventListeners(body) {\n        body.addEventListener('pointerdown', this._pointerDownListener, true);\n        body.addEventListener('click', this._clickListener, true);\n        body.addEventListener('auxclick', this._clickListener, true);\n        body.addEventListener('contextmenu', this._clickListener, true);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: OverlayOutsideClickDispatcher, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: OverlayOutsideClickDispatcher, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: OverlayOutsideClickDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }, { type: i0.NgZone, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/** Container inside which all overlays will render. */\nclass OverlayContainer {\n    constructor(document, _platform) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this._containerElement?.remove();\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    _createContainer() {\n        const containerClass = 'cdk-overlay-container';\n        // TODO(crisbeto): remove the testing check once we have an overlay testing\n        // module or Angular starts tearing down the testing `NgModule`. See:\n        // https://github.com/angular/angular/issues/18831\n        if (this._platform.isBrowser || _isTestEnvironment()) {\n            const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` + `.${containerClass}[platform=\"test\"]`);\n            // Remove any old containers from the opposite platform.\n            // This can happen when transitioning from the server to the client.\n            for (let i = 0; i < oppositePlatformContainers.length; i++) {\n                oppositePlatformContainers[i].remove();\n            }\n        }\n        const container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n        // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n        // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n        // To mitigate the problem we made it so that only containers from a different platform are\n        // cleared, but the side-effect was that people started depending on the overly-aggressive\n        // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n        // module which does the cleanup, we try to detect that we're in a test environment and we\n        // always clear the container. See #17006.\n        // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n        if (_isTestEnvironment()) {\n            container.setAttribute('platform', 'test');\n        }\n        else if (!this._platform.isBrowser) {\n            container.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: OverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: OverlayContainer, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: OverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }]; } });\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher, _animationsDisabled = false) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._animationsDisabled = _animationsDisabled;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = (event) => this._backdropClick.next(event);\n        this._backdropTransitionendHandler = (event) => {\n            this._disposeBackdrop(event.target);\n        };\n        /** Stream of keydown events dispatched to this overlay. */\n        this._keydownEvents = new Subject();\n        /** Stream of mouse outside events dispatched to this overlay. */\n        this._outsidePointerEvents = new Subject();\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /** The overlay's HTML element */\n    get overlayElement() {\n        return this._pane;\n    }\n    /** The overlay's backdrop HTML element. */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal) {\n        // Insert the host into the DOM before attaching the portal, otherwise\n        // the animations module will skip animations on repeat attachments.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        const attachResult = this._portalOutlet.attach(portal);\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        if (this._config.disposeOnNavigation) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        this._outsideClickDispatcher.add(this);\n        // TODO(crisbeto): the null check is here, because the portal outlet returns `any`.\n        // We should be guaranteed for the result to be `ComponentRef | EmbeddedViewRef`, but\n        // `instanceof EmbeddedViewRef` doesn't appear to work at the moment.\n        if (typeof attachResult?.onDestroy === 'function') {\n            // In most cases we control the portal and we know when it is being detached so that\n            // we can finish the disposal process. The exception is if the user passes in a custom\n            // `ViewContainerRef` that isn't destroyed through the overlay API. Note that we use\n            // `detach` here instead of `dispose`, because we don't know if the user intends to\n            // reattach the overlay at a later point. It also has the advantage of waiting for animations.\n            attachResult.onDestroy(() => {\n                if (this.hasAttached()) {\n                    // We have to delay the `detach` call, because detaching immediately prevents\n                    // other destroy hooks from running. This is likely a framework bug similar to\n                    // https://github.com/angular/angular/issues/46119\n                    this._ngZone.runOutsideAngular(() => Promise.resolve().then(() => this.detach()));\n                }\n            });\n        }\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in the DOM can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        this._locationChanges.unsubscribe();\n        this._outsideClickDispatcher.remove(this);\n        return detachmentResult;\n    }\n    /** Cleans up the overlay from the DOM. */\n    dispose() {\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this._disposeBackdrop(this._backdropElement);\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        this._outsidePointerEvents.complete();\n        this._outsideClickDispatcher.remove(this);\n        this._host?.remove();\n        this._previousHostParent = this._pane = this._host = null;\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /** Whether the overlay has attached content. */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick() {\n        return this._backdropClick;\n    }\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments() {\n        return this._attachments;\n    }\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments() {\n        return this._detachments;\n    }\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents() {\n        return this._keydownEvents;\n    }\n    /** Gets an observable of pointer events targeted outside this overlay. */\n    outsidePointerEvents() {\n        return this._outsidePointerEvents;\n    }\n    /** Gets the current overlay configuration, which is immutable. */\n    getConfig() {\n        return this._config;\n    }\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /** Switches to a new position strategy and updates the overlay position. */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig) {\n        this._config = { ...this._config, ...sizeConfig };\n        this._updateElementSize();\n    }\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir) {\n        this._config = { ...this._config, direction: dir };\n        this._updateElementDirection();\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection() {\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /** Switches to a new scroll strategy. */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /** Updates the text direction of the overlay panel. */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /** Updates the size of the overlay element based on the overlay config. */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /** Toggles the pointer events for the overlay pane element. */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n    }\n    /** Attaches a backdrop for this overlay. */\n    _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._animationsDisabled) {\n            this._backdropElement.classList.add('cdk-overlay-backdrop-noop-animation');\n        }\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement.insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (!this._animationsDisabled && typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode.appendChild(this._host);\n        }\n    }\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop() {\n        const backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        if (this._animationsDisabled) {\n            this._disposeBackdrop(backdropToDetach);\n            return;\n        }\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular(() => {\n            backdropToDetach.addEventListener('transitionend', this._backdropTransitionendHandler);\n        });\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        this._backdropTimeout = this._ngZone.runOutsideAngular(() => setTimeout(() => {\n            this._disposeBackdrop(backdropToDetach);\n        }, 500));\n    }\n    /** Toggles a single CSS class or an array of classes on an element. */\n    _toggleClasses(element, cssClasses, isAdd) {\n        const classes = coerceArray(cssClasses || []).filter(c => !!c);\n        if (classes.length) {\n            isAdd ? element.classList.add(...classes) : element.classList.remove(...classes);\n        }\n    }\n    /** Detaches the overlay content next time the zone stabilizes. */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            const subscription = this._ngZone.onStable\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._host.remove();\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n    /** Disposes of a scroll strategy. */\n    _disposeScrollStrategy() {\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n    /** Removes a backdrop element from the DOM. */\n    _disposeBackdrop(backdrop) {\n        if (backdrop) {\n            backdrop.removeEventListener('click', this._backdropClickHandler);\n            backdrop.removeEventListener('transitionend', this._backdropTransitionendHandler);\n            backdrop.remove();\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement === backdrop) {\n                this._backdropElement = null;\n            }\n        }\n        if (this._backdropTimeout) {\n            clearTimeout(this._backdropTimeout);\n            this._backdropTimeout = undefined;\n        }\n    }\n}\n\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /** Whether the overlay was pushed in a previous positioning. */\n        this._isPushed = false;\n        /** Whether the overlay can be pushed on-screen on the initial open. */\n        this._canPush = true;\n        /** Whether the overlay can grow via flexible width/height after the initial open. */\n        this._growAfterOpen = false;\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        this._hasFlexibleDimensions = true;\n        /** Whether the overlay position is locked. */\n        this._positionLocked = false;\n        /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n        this._viewportMargin = 0;\n        /** The Scrollable containers used to check scrollable view properties on position change. */\n        this._scrollables = [];\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        /** Subject that emits whenever the position changes. */\n        this._positionChanges = new Subject();\n        /** Subscription to viewport size changes. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Default offset for the overlay along the x axis. */\n        this._offsetX = 0;\n        /** Default offset for the overlay along the y axis. */\n        this._offsetY = 0;\n        /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n        this._appliedPanelClasses = [];\n        /** Observable sequence of position changes. */\n        this.positionChanges = this._positionChanges;\n        this.setOrigin(connectedTo);\n    }\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef &&\n            overlayRef !== this._overlayRef &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satisfies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin, the overlay and the container to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        const containerRect = this._containerRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, containerRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos),\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(bestFit.position, bestFit.origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(fallback.position, fallback.originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback.position, fallback.originPoint);\n    }\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, {\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = null;\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition() {\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        const lastPosition = this._lastPosition;\n        if (lastPosition) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n            const originPoint = this._getOriginPoint(this._originRect, this._containerRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n        else {\n            this.apply();\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._scrollables = scrollables;\n        return this;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n    setOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    _getOriginPoint(originRect, containerRect, pos) {\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + originRect.width / 2;\n        }\n        else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        // When zooming in Safari the container rectangle contains negative values for the position\n        // and we need to re-add them to the calculated coordinates.\n        if (containerRect.left < 0) {\n            x -= containerRect.left;\n        }\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + originRect.height / 2;\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        // Normally the containerRect's top value would be zero, however when the overlay is attached to an input\n        // (e.g. in an autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        // Additionally, when zooming in Safari this fixes the vertical position.\n        if (containerRect.top < 0) {\n            y -= containerRect.top;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    _getOverlayFit(point, rawOverlayRect, viewport, position) {\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        let { x, y } = point;\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x;\n        let rightOverflow = x + overlay.width - viewport.width;\n        let topOverflow = 0 - y;\n        let bottomOverflow = y + overlay.height - viewport.height;\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlay at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n            const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n            const verticalFit = fit.fitsInViewportVertically || (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally || (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occurring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param rawOverlayRect Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y,\n            };\n        }\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        let pushX = 0;\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            const scrollableViewProperties = this._getScrollVisibility();\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n        let xOrigin;\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - previousHeight / 2;\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) || (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) || (position.overlayX === 'start' && isRtl);\n        let width, left, right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - previousWidth / 2;\n            }\n        }\n        return { top: top, left: left, bottom: bottom, right: right, width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stretches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    _setBoundingBoxStyles(origin, position) {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        const styles = {};\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(this._boundingBox.style, styles);\n    }\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox.style, {\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        });\n    }\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        });\n    }\n    /** Sets positioning styles to the overlay element. */\n    _setOverlayElementStyles(originPoint, position) {\n        const styles = {};\n        const hasExactPosition = this._hasExactPosition();\n        const hasFlexibleDimensions = this._hasFlexibleDimensions;\n        const config = this._overlayRef.getConfig();\n        if (hasExactPosition) {\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        // Note that this doesn't apply when we have an exact position, in which case we do want to\n        // apply them because they'll be cleared from the bounding box.\n        if (config.maxHeight) {\n            if (hasExactPosition) {\n                styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxHeight = '';\n            }\n        }\n        if (config.maxWidth) {\n            if (hasExactPosition) {\n                styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxWidth = '';\n            }\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = { top: '', bottom: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = { left: '', right: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._getOriginRect();\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this._scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement.clientWidth;\n        const height = this._document.documentElement.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - 2 * this._viewportMargin,\n            height: height - 2 * this._viewportMargin,\n        };\n    }\n    /** Whether the we're dealing with an RTL context */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /** Retrieves the offset of a position along the x or y axis. */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breaking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /** Validates that the current position match the expected values. */\n    _validatePositions() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._preferredPositions.length) {\n                throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n            }\n            // TODO(crisbeto): remove these once Angular's template type\n            // checking is advanced enough to catch these cases.\n            this._preferredPositions.forEach(pair => {\n                validateHorizontalPosition('originX', pair.originX);\n                validateVerticalPosition('originY', pair.originY);\n                validateHorizontalPosition('overlayX', pair.overlayX);\n                validateVerticalPosition('overlayY', pair.overlayY);\n            });\n        }\n    }\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => {\n                this._pane.classList.remove(cssClass);\n            });\n            this._appliedPanelClasses = [];\n        }\n    }\n    /** Returns the ClientRect of the current origin. */\n    _getOriginRect() {\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        // Check for Element so SVG elements are also supported.\n        if (origin instanceof Element) {\n            return origin.getBoundingClientRect();\n        }\n        const width = origin.width || 0;\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width,\n        };\n    }\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            destination[key] = source[key];\n        }\n    }\n    return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input) {\n    if (typeof input !== 'number' && input != null) {\n        const [value, units] = input.split(cssUnitPattern);\n        return !units || units === 'px' ? parseFloat(value) : null;\n    }\n    return input || null;\n}\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect) {\n    return {\n        top: Math.floor(clientRect.top),\n        right: Math.floor(clientRect.right),\n        bottom: Math.floor(clientRect.bottom),\n        left: Math.floor(clientRect.left),\n        width: Math.floor(clientRect.width),\n        height: Math.floor(clientRect.height),\n    };\n}\nconst STANDARD_DROPDOWN_BELOW_POSITIONS = [\n    { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n    { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom' },\n    { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' },\n    { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom' },\n];\nconst STANDARD_DROPDOWN_ADJACENT_POSITIONS = [\n    { originX: 'end', originY: 'top', overlayX: 'start', overlayY: 'top' },\n    { originX: 'end', originY: 'bottom', overlayX: 'start', overlayY: 'bottom' },\n    { originX: 'start', originY: 'top', overlayX: 'end', overlayY: 'top' },\n    { originX: 'start', originY: 'bottom', overlayX: 'end', overlayY: 'bottom' },\n];\n\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._alignItems = '';\n        this._xPosition = '';\n        this._xOffset = '';\n        this._width = '';\n        this._height = '';\n        this._isDisposed = false;\n    }\n    attach(overlayRef) {\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'left';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'right';\n        return this;\n    }\n    /**\n     * Sets the overlay to the start of the viewport, depending on the overlay direction.\n     * This will be to the left in LTR layouts and to the right in RTL.\n     * @param offset Offset from the edge of the screen.\n     */\n    start(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'start';\n        return this;\n    }\n    /**\n     * Sets the overlay to the end of the viewport, depending on the overlay direction.\n     * This will be to the right in LTR layouts and to the left in RTL.\n     * @param offset Offset from the edge of the screen.\n     */\n    end(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._xPosition = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n        const { width, height, maxWidth, maxHeight } = config;\n        const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n            (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n        const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n            (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n        const xPosition = this._xPosition;\n        const xOffset = this._xOffset;\n        const isRtl = this._overlayRef.getConfig().direction === 'rtl';\n        let marginLeft = '';\n        let marginRight = '';\n        let justifyContent = '';\n        if (shouldBeFlushHorizontally) {\n            justifyContent = 'flex-start';\n        }\n        else if (xPosition === 'center') {\n            justifyContent = 'center';\n            if (isRtl) {\n                marginRight = xOffset;\n            }\n            else {\n                marginLeft = xOffset;\n            }\n        }\n        else if (isRtl) {\n            if (xPosition === 'left' || xPosition === 'end') {\n                justifyContent = 'flex-end';\n                marginLeft = xOffset;\n            }\n            else if (xPosition === 'right' || xPosition === 'start') {\n                justifyContent = 'flex-start';\n                marginRight = xOffset;\n            }\n        }\n        else if (xPosition === 'left' || xPosition === 'start') {\n            justifyContent = 'flex-start';\n            marginLeft = xOffset;\n        }\n        else if (xPosition === 'right' || xPosition === 'end') {\n            justifyContent = 'flex-end';\n            marginRight = xOffset;\n        }\n        styles.position = this._cssPosition;\n        styles.marginLeft = shouldBeFlushHorizontally ? '0' : marginLeft;\n        styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = shouldBeFlushHorizontally ? '0' : marginRight;\n        parentStyles.justifyContent = justifyContent;\n        parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parent = this._overlayRef.hostElement;\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent =\n            parentStyles.alignItems =\n                styles.marginTop =\n                    styles.marginBottom =\n                        styles.marginLeft =\n                            styles.marginRight =\n                                styles.position =\n                                    '';\n        this._overlayRef = null;\n        this._isDisposed = true;\n    }\n}\n\n/** Builder for overlay position strategy. */\nclass OverlayPositionBuilder {\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: OverlayPositionBuilder, deps: [{ token: i1.ViewportRuler }, { token: DOCUMENT }, { token: i1$1.Platform }, { token: OverlayContainer }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: OverlayPositionBuilder, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: OverlayPositionBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.ViewportRuler }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }, { type: OverlayContainer }]; } });\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    constructor(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher, _animationsModuleType) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._animationsModuleType = _animationsModuleType;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    create(config) {\n        const host = this._createHostElement();\n        const pane = this._createPaneElement(host);\n        const portalOutlet = this._createPortalOutlet(pane);\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher, this._animationsModuleType === 'NoopAnimations');\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(host) {\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    _createHostElement() {\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: Overlay, deps: [{ token: ScrollStrategyOptions }, { token: OverlayContainer }, { token: i0.ComponentFactoryResolver }, { token: OverlayPositionBuilder }, { token: OverlayKeyboardDispatcher }, { token: i0.Injector }, { token: i0.NgZone }, { token: DOCUMENT }, { token: i5.Directionality }, { token: i6.Location }, { token: OverlayOutsideClickDispatcher }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: Overlay, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: Overlay, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: i0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: i0.Injector }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i5.Directionality }, { type: i6.Location }, { type: OverlayOutsideClickDispatcher }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }, {\n                    type: Optional\n                }] }]; } });\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top',\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top',\n    },\n];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkOverlayOrigin, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkOverlayOrigin, isStandalone: true, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkOverlayOrigin, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                    exportAs: 'cdkOverlayOrigin',\n                    standalone: true,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    get offsetX() {\n        return this._offsetX;\n    }\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    get offsetY() {\n        return this._offsetY;\n    }\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** Whether or not the overlay should attach a backdrop. */\n    get hasBackdrop() {\n        return this._hasBackdrop;\n    }\n    set hasBackdrop(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /** Whether or not the overlay should be locked when scrolling. */\n    get lockPosition() {\n        return this._lockPosition;\n    }\n    set lockPosition(value) {\n        this._lockPosition = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    get flexibleDimensions() {\n        return this._flexibleDimensions;\n    }\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n    get growAfterOpen() {\n        return this._growAfterOpen;\n    }\n    set growAfterOpen(value) {\n        this._growAfterOpen = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    get push() {\n        return this._push;\n    }\n    set push(value) {\n        this._push = coerceBooleanProperty(value);\n    }\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        this._attachSubscription = Subscription.EMPTY;\n        this._detachSubscription = Subscription.EMPTY;\n        this._positionSubscription = Subscription.EMPTY;\n        /** Margin between the overlay and the viewport edges. */\n        this.viewportMargin = 0;\n        /** Whether the overlay is open. */\n        this.open = false;\n        /** Whether the overlay can be closed by user interaction. */\n        this.disableClose = false;\n        /** Event emitted when the backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Event emitted when the position has changed. */\n        this.positionChange = new EventEmitter();\n        /** Event emitted when the overlay has been attached. */\n        this.attach = new EventEmitter();\n        /** Event emitted when the overlay has been detached. */\n        this.detach = new EventEmitter();\n        /** Emits when there are keyboard events that are targeted at the overlay. */\n        this.overlayKeydown = new EventEmitter();\n        /** Emits when there are mouse outside click events that are targeted at the overlay. */\n        this.overlayOutsideClick = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /** The associated overlay reference. */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /** The element's layout direction. */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    ngOnDestroy() {\n        this._attachSubscription.unsubscribe();\n        this._detachSubscription.unsubscribe();\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n    }\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /** Creates an overlay */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        const overlayRef = (this._overlayRef = this._overlay.create(this._buildConfig()));\n        this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n        this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n        overlayRef.keydownEvents().subscribe((event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this._detachOverlay();\n            }\n        });\n        this._overlayRef.outsidePointerEvents().subscribe((event) => {\n            this.overlayOutsideClick.next(event);\n        });\n    }\n    /** Builds the overlay config based on the directive's inputs */\n    _buildConfig() {\n        const positionStrategy = (this._position =\n            this.positionStrategy || this._createPositionStrategy());\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop,\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n    _updatePositionStrategy(positionStrategy) {\n        const positions = this.positions.map(currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        }));\n        return positionStrategy\n            .setOrigin(this._getFlexibleConnectedPositionStrategyOrigin())\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition)\n            .withTransformOriginOn(this.transformOriginSelector);\n    }\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    _createPositionStrategy() {\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._getFlexibleConnectedPositionStrategyOrigin());\n        this._updatePositionStrategy(strategy);\n        return strategy;\n    }\n    _getFlexibleConnectedPositionStrategyOrigin() {\n        if (this.origin instanceof CdkOverlayOrigin) {\n            return this.origin.elementRef;\n        }\n        else {\n            return this.origin;\n        }\n    }\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n        this._positionSubscription.unsubscribe();\n        // Only subscribe to `positionChanges` if requested, because putting\n        // together all the information for it can be expensive.\n        if (this.positionChange.observers.length > 0) {\n            this._positionSubscription = this._position.positionChanges\n                .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n                .subscribe(position => {\n                this.positionChange.emit(position);\n                if (this.positionChange.observers.length === 0) {\n                    this._positionSubscription.unsubscribe();\n                }\n            });\n        }\n    }\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n        }\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkConnectedOverlay, deps: [{ token: Overlay }, { token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY }, { token: i5.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkConnectedOverlay, isStandalone: true, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: { origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"], viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"], transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\", overlayOutsideClick: \"overlayOutsideClick\" }, exportAs: [\"cdkConnectedOverlay\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkConnectedOverlay, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                    exportAs: 'cdkConnectedOverlay',\n                    standalone: true,\n                }]\n        }], ctorParameters: function () { return [{ type: Overlay }, { type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n                }] }, { type: i5.Directionality, decorators: [{\n                    type: Optional\n                }] }]; }, propDecorators: { origin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOrigin']\n            }], positions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositions']\n            }], positionStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositionStrategy']\n            }], offsetX: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetX']\n            }], offsetY: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetY']\n            }], width: [{\n                type: Input,\n                args: ['cdkConnectedOverlayWidth']\n            }], height: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHeight']\n            }], minWidth: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinWidth']\n            }], minHeight: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinHeight']\n            }], backdropClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayBackdropClass']\n            }], panelClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPanelClass']\n            }], viewportMargin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayViewportMargin']\n            }], scrollStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayScrollStrategy']\n            }], open: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOpen']\n            }], disableClose: [{\n                type: Input,\n                args: ['cdkConnectedOverlayDisableClose']\n            }], transformOriginSelector: [{\n                type: Input,\n                args: ['cdkConnectedOverlayTransformOriginOn']\n            }], hasBackdrop: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHasBackdrop']\n            }], lockPosition: [{\n                type: Input,\n                args: ['cdkConnectedOverlayLockPosition']\n            }], flexibleDimensions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayFlexibleDimensions']\n            }], growAfterOpen: [{\n                type: Input,\n                args: ['cdkConnectedOverlayGrowAfterOpen']\n            }], push: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPush']\n            }], backdropClick: [{\n                type: Output\n            }], positionChange: [{\n                type: Output\n            }], attach: [{\n                type: Output\n            }], detach: [{\n                type: Output\n            }], overlayKeydown: [{\n                type: Output\n            }], overlayOutsideClick: [{\n                type: Output\n            }] } });\n/** @docs-private */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\nclass OverlayModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: OverlayModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: OverlayModule, imports: [BidiModule, PortalModule, ScrollingModule, CdkConnectedOverlay, CdkOverlayOrigin], exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: OverlayModule, providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER], imports: [BidiModule, PortalModule, ScrollingModule, ScrollingModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: OverlayModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [BidiModule, PortalModule, ScrollingModule, CdkConnectedOverlay, CdkOverlayOrigin],\n                    exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                    providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    constructor(_document, platform) {\n        super(_document, platform);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        const fullscreenElement = this.getFullscreenElement();\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    _addFullscreenChangeListener(fn) {\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            const _document = this._document;\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement() {\n        const _document = this._document;\n        return (_document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: FullscreenOverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: FullscreenOverlayContainer, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: FullscreenOverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }]; } });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, STANDARD_DROPDOWN_ADJACENT_POSITIONS, STANDARD_DROPDOWN_BELOW_POSITIONS, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition };\n","import { takeUntil, take } from 'rxjs/operators';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, ElementRef, Directive, Inject, Input, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport * as i5 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i2 from '@angular/cdk/platform';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport * as i3 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport * as i4 from '@angular/cdk/bidi';\nimport * as i1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { MatCommonModule } from '@angular/material/core';\n\n/** Time in ms to throttle repositioning after scroll events. */\nconst SCROLL_THROTTLE_MS = 20;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nfunction getMatTooltipInvalidPositionError(position) {\n    return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/** @docs-private */\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n/** @docs-private */\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n/** @docs-private */\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n    };\n}\n/** Injection token to be used to override the default options for `matTooltip`. */\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n    providedIn: 'root',\n    factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * CSS class that will be attached to the overlay panel.\n * @deprecated\n * @breaking-change 13.0.0 remove this variable\n */\nconst TOOLTIP_PANEL_CLASS = 'mat-mdc-tooltip-panel';\nconst PANEL_CLASS = 'tooltip-panel';\n/** Options used to bind passive event listeners. */\nconst passiveListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\nconst LONGPRESS_DELAY = 500;\n// These constants were taken from MDC's `numbers` object. We can't import them from MDC,\n// because they have some top-level references to `window` which break during SSR.\nconst MIN_VIEWPORT_TOOLTIP_THRESHOLD = 8;\nconst UNBOUNDED_ANCHOR_GAP = 8;\nconst MIN_HEIGHT = 24;\nconst MAX_WIDTH = 200;\nclass _MatTooltipBase {\n    /** Allows the user to define the position of the tooltip relative to the parent element */\n    get position() {\n        return this._position;\n    }\n    set position(value) {\n        if (value !== this._position) {\n            this._position = value;\n            if (this._overlayRef) {\n                this._updatePosition(this._overlayRef);\n                this._tooltipInstance?.show(0);\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    /**\n     * Whether tooltip should be relative to the click or touch origin\n     * instead of outside the element bounding box.\n     */\n    get positionAtOrigin() {\n        return this._positionAtOrigin;\n    }\n    set positionAtOrigin(value) {\n        this._positionAtOrigin = coerceBooleanProperty(value);\n        this._detach();\n        this._overlayRef = null;\n    }\n    /** Disables the display of the tooltip. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // If tooltip is disabled, hide immediately.\n        if (this._disabled) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n        }\n    }\n    /** The default delay in ms before showing the tooltip after show is called */\n    get showDelay() {\n        return this._showDelay;\n    }\n    set showDelay(value) {\n        this._showDelay = coerceNumberProperty(value);\n    }\n    /** The default delay in ms before hiding the tooltip after hide is called */\n    get hideDelay() {\n        return this._hideDelay;\n    }\n    set hideDelay(value) {\n        this._hideDelay = coerceNumberProperty(value);\n        if (this._tooltipInstance) {\n            this._tooltipInstance._mouseLeaveHideDelay = this._hideDelay;\n        }\n    }\n    /** The message to be displayed in the tooltip */\n    get message() {\n        return this._message;\n    }\n    set message(value) {\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message, 'tooltip');\n        // If the message is not a string (e.g. number), convert it to a string and trim it.\n        // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n        // away the string-conversion: https://github.com/angular/components/issues/20684\n        this._message = value != null ? String(value).trim() : '';\n        if (!this._message && this._isTooltipVisible()) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n            this._updateTooltipMessage();\n            this._ngZone.runOutsideAngular(() => {\n                // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n                // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n                // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n                // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n                Promise.resolve().then(() => {\n                    this._ariaDescriber.describe(this._elementRef.nativeElement, this.message, 'tooltip');\n                });\n            });\n        }\n    }\n    /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n    get tooltipClass() {\n        return this._tooltipClass;\n    }\n    set tooltipClass(value) {\n        this._tooltipClass = value;\n        if (this._tooltipInstance) {\n            this._setTooltipClass(this._tooltipClass);\n        }\n    }\n    constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, _document) {\n        this._overlay = _overlay;\n        this._elementRef = _elementRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewContainerRef = _viewContainerRef;\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._ariaDescriber = _ariaDescriber;\n        this._focusMonitor = _focusMonitor;\n        this._dir = _dir;\n        this._defaultOptions = _defaultOptions;\n        this._position = 'below';\n        this._positionAtOrigin = false;\n        this._disabled = false;\n        this._viewInitialized = false;\n        this._pointerExitEventsInitialized = false;\n        this._viewportMargin = 8;\n        this._cssClassPrefix = 'mat';\n        /**\n         * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n         * uses a long press gesture to show and hide, however it can conflict with the native browser\n         * gestures. To work around the conflict, Angular Material disables native gestures on the\n         * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n         * elements). The different values for this option configure the touch event handling as follows:\n         * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n         *   browser gestures on particular elements. In particular, it allows text selection on inputs\n         *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n         * - `on` - Enables touch gestures for all elements and disables native\n         *   browser gestures with no exceptions.\n         * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n         *   showing on touch devices.\n         */\n        this.touchGestures = 'auto';\n        this._message = '';\n        /** Manually-bound passive event listeners. */\n        this._passiveListeners = [];\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        this._scrollStrategy = scrollStrategy;\n        this._document = _document;\n        if (_defaultOptions) {\n            this._showDelay = _defaultOptions.showDelay;\n            this._hideDelay = _defaultOptions.hideDelay;\n            if (_defaultOptions.position) {\n                this.position = _defaultOptions.position;\n            }\n            if (_defaultOptions.positionAtOrigin) {\n                this.positionAtOrigin = _defaultOptions.positionAtOrigin;\n            }\n            if (_defaultOptions.touchGestures) {\n                this.touchGestures = _defaultOptions.touchGestures;\n            }\n        }\n        _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            if (this._overlayRef) {\n                this._updatePosition(this._overlayRef);\n            }\n        });\n    }\n    ngAfterViewInit() {\n        // This needs to happen after view init so the initial values for all inputs have been set.\n        this._viewInitialized = true;\n        this._setupPointerEnterEventsIfNeeded();\n        this._focusMonitor\n            .monitor(this._elementRef)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(origin => {\n            // Note that the focus monitor runs outside the Angular zone.\n            if (!origin) {\n                this._ngZone.run(() => this.hide(0));\n            }\n            else if (origin === 'keyboard') {\n                this._ngZone.run(() => this.show());\n            }\n        });\n    }\n    /**\n     * Dispose the tooltip when destroyed.\n     */\n    ngOnDestroy() {\n        const nativeElement = this._elementRef.nativeElement;\n        clearTimeout(this._touchstartTimeout);\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._tooltipInstance = null;\n        }\n        // Clean up the event listeners set in the constructor\n        this._passiveListeners.forEach(([event, listener]) => {\n            nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n        });\n        this._passiveListeners.length = 0;\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._ariaDescriber.removeDescription(nativeElement, this.message, 'tooltip');\n        this._focusMonitor.stopMonitoring(nativeElement);\n    }\n    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n    show(delay = this.showDelay, origin) {\n        if (this.disabled || !this.message || this._isTooltipVisible()) {\n            this._tooltipInstance?._cancelPendingAnimations();\n            return;\n        }\n        const overlayRef = this._createOverlay(origin);\n        this._detach();\n        this._portal =\n            this._portal || new ComponentPortal(this._tooltipComponent, this._viewContainerRef);\n        const instance = (this._tooltipInstance = overlayRef.attach(this._portal).instance);\n        instance._triggerElement = this._elementRef.nativeElement;\n        instance._mouseLeaveHideDelay = this._hideDelay;\n        instance\n            .afterHidden()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._setTooltipClass(this._tooltipClass);\n        this._updateTooltipMessage();\n        instance.show(delay);\n    }\n    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n    hide(delay = this.hideDelay) {\n        const instance = this._tooltipInstance;\n        if (instance) {\n            if (instance.isVisible()) {\n                instance.hide(delay);\n            }\n            else {\n                instance._cancelPendingAnimations();\n                this._detach();\n            }\n        }\n    }\n    /** Shows/hides the tooltip */\n    toggle(origin) {\n        this._isTooltipVisible() ? this.hide() : this.show(undefined, origin);\n    }\n    /** Returns true if the tooltip is currently visible to the user */\n    _isTooltipVisible() {\n        return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    }\n    /** Create the overlay config and position strategy */\n    _createOverlay(origin) {\n        if (this._overlayRef) {\n            const existingStrategy = this._overlayRef.getConfig()\n                .positionStrategy;\n            if ((!this.positionAtOrigin || !origin) && existingStrategy._origin instanceof ElementRef) {\n                return this._overlayRef;\n            }\n            this._detach();\n        }\n        const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this.positionAtOrigin ? origin || this._elementRef : this._elementRef)\n            .withTransformOriginOn(`.${this._cssClassPrefix}-tooltip`)\n            .withFlexibleDimensions(false)\n            .withViewportMargin(this._viewportMargin)\n            .withScrollableContainers(scrollableAncestors);\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n            this._updateCurrentPositionClass(change.connectionPair);\n            if (this._tooltipInstance) {\n                if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this._ngZone.run(() => this.hide(0));\n                }\n            }\n        });\n        this._overlayRef = this._overlay.create({\n            direction: this._dir,\n            positionStrategy: strategy,\n            panelClass: `${this._cssClassPrefix}-${PANEL_CLASS}`,\n            scrollStrategy: this._scrollStrategy(),\n        });\n        this._updatePosition(this._overlayRef);\n        this._overlayRef\n            .detachments()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._overlayRef\n            .outsidePointerEvents()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._tooltipInstance?._handleBodyInteraction());\n        this._overlayRef\n            .keydownEvents()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(event => {\n            if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n                event.preventDefault();\n                event.stopPropagation();\n                this._ngZone.run(() => this.hide(0));\n            }\n        });\n        if (this._defaultOptions?.disableTooltipInteractivity) {\n            this._overlayRef.addPanelClass(`${this._cssClassPrefix}-tooltip-panel-non-interactive`);\n        }\n        return this._overlayRef;\n    }\n    /** Detaches the currently-attached tooltip. */\n    _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n        this._tooltipInstance = null;\n    }\n    /** Updates the position of the current tooltip. */\n    _updatePosition(overlayRef) {\n        const position = overlayRef.getConfig().positionStrategy;\n        const origin = this._getOrigin();\n        const overlay = this._getOverlayPosition();\n        position.withPositions([\n            this._addOffset({ ...origin.main, ...overlay.main }),\n            this._addOffset({ ...origin.fallback, ...overlay.fallback }),\n        ]);\n    }\n    /** Adds the configured offset to a position. Used as a hook for child classes. */\n    _addOffset(position) {\n        return position;\n    }\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    _getOrigin() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let originPosition;\n        if (position == 'above' || position == 'below') {\n            originPosition = { originX: 'center', originY: position == 'above' ? 'top' : 'bottom' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            originPosition = { originX: 'start', originY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            originPosition = { originX: 'end', originY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(originPosition.originX, originPosition.originY);\n        return {\n            main: originPosition,\n            fallback: { originX: x, originY: y },\n        };\n    }\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    _getOverlayPosition() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let overlayPosition;\n        if (position == 'above') {\n            overlayPosition = { overlayX: 'center', overlayY: 'bottom' };\n        }\n        else if (position == 'below') {\n            overlayPosition = { overlayX: 'center', overlayY: 'top' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            overlayPosition = { overlayX: 'end', overlayY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            overlayPosition = { overlayX: 'start', overlayY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n        return {\n            main: overlayPosition,\n            fallback: { overlayX: x, overlayY: y },\n        };\n    }\n    /** Updates the tooltip message and repositions the overlay according to the new message length */\n    _updateTooltipMessage() {\n        // Must wait for the message to be painted to the tooltip so that the overlay can properly\n        // calculate the correct positioning based on the size of the text.\n        if (this._tooltipInstance) {\n            this._tooltipInstance.message = this.message;\n            this._tooltipInstance._markForCheck();\n            this._ngZone.onMicrotaskEmpty.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                if (this._tooltipInstance) {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n    }\n    /** Updates the tooltip class */\n    _setTooltipClass(tooltipClass) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.tooltipClass = tooltipClass;\n            this._tooltipInstance._markForCheck();\n        }\n    }\n    /** Inverts an overlay position. */\n    _invertPosition(x, y) {\n        if (this.position === 'above' || this.position === 'below') {\n            if (y === 'top') {\n                y = 'bottom';\n            }\n            else if (y === 'bottom') {\n                y = 'top';\n            }\n        }\n        else {\n            if (x === 'end') {\n                x = 'start';\n            }\n            else if (x === 'start') {\n                x = 'end';\n            }\n        }\n        return { x, y };\n    }\n    /** Updates the class on the overlay panel based on the current position of the tooltip. */\n    _updateCurrentPositionClass(connectionPair) {\n        const { overlayY, originX, originY } = connectionPair;\n        let newPosition;\n        // If the overlay is in the middle along the Y axis,\n        // it means that it's either before or after.\n        if (overlayY === 'center') {\n            // Note that since this information is used for styling, we want to\n            // resolve `start` and `end` to their real values, otherwise consumers\n            // would have to remember to do it themselves on each consumption.\n            if (this._dir && this._dir.value === 'rtl') {\n                newPosition = originX === 'end' ? 'left' : 'right';\n            }\n            else {\n                newPosition = originX === 'start' ? 'left' : 'right';\n            }\n        }\n        else {\n            newPosition = overlayY === 'bottom' && originY === 'top' ? 'above' : 'below';\n        }\n        if (newPosition !== this._currentPosition) {\n            const overlayRef = this._overlayRef;\n            if (overlayRef) {\n                const classPrefix = `${this._cssClassPrefix}-${PANEL_CLASS}-`;\n                overlayRef.removePanelClass(classPrefix + this._currentPosition);\n                overlayRef.addPanelClass(classPrefix + newPosition);\n            }\n            this._currentPosition = newPosition;\n        }\n    }\n    /** Binds the pointer events to the tooltip trigger. */\n    _setupPointerEnterEventsIfNeeded() {\n        // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n        if (this._disabled ||\n            !this.message ||\n            !this._viewInitialized ||\n            this._passiveListeners.length) {\n            return;\n        }\n        // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n        // first tap from firing its click event or can cause the tooltip to open for clicks.\n        if (this._platformSupportsMouseEvents()) {\n            this._passiveListeners.push([\n                'mouseenter',\n                event => {\n                    this._setupPointerExitEventsIfNeeded();\n                    let point = undefined;\n                    if (event.x !== undefined && event.y !== undefined) {\n                        point = event;\n                    }\n                    this.show(undefined, point);\n                },\n            ]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            this._passiveListeners.push([\n                'touchstart',\n                event => {\n                    const touch = event.targetTouches?.[0];\n                    const origin = touch ? { x: touch.clientX, y: touch.clientY } : undefined;\n                    // Note that it's important that we don't `preventDefault` here,\n                    // because it can prevent click events from firing on the element.\n                    this._setupPointerExitEventsIfNeeded();\n                    clearTimeout(this._touchstartTimeout);\n                    this._touchstartTimeout = setTimeout(() => this.show(undefined, origin), LONGPRESS_DELAY);\n                },\n            ]);\n        }\n        this._addListeners(this._passiveListeners);\n    }\n    _setupPointerExitEventsIfNeeded() {\n        if (this._pointerExitEventsInitialized) {\n            return;\n        }\n        this._pointerExitEventsInitialized = true;\n        const exitListeners = [];\n        if (this._platformSupportsMouseEvents()) {\n            exitListeners.push([\n                'mouseleave',\n                event => {\n                    const newTarget = event.relatedTarget;\n                    if (!newTarget || !this._overlayRef?.overlayElement.contains(newTarget)) {\n                        this.hide();\n                    }\n                },\n            ], ['wheel', event => this._wheelListener(event)]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            const touchendListener = () => {\n                clearTimeout(this._touchstartTimeout);\n                this.hide(this._defaultOptions.touchendHideDelay);\n            };\n            exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);\n        }\n        this._addListeners(exitListeners);\n        this._passiveListeners.push(...exitListeners);\n    }\n    _addListeners(listeners) {\n        listeners.forEach(([event, listener]) => {\n            this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n        });\n    }\n    _platformSupportsMouseEvents() {\n        return !this._platform.IOS && !this._platform.ANDROID;\n    }\n    /** Listener for the `wheel` event on the element. */\n    _wheelListener(event) {\n        if (this._isTooltipVisible()) {\n            const elementUnderPointer = this._document.elementFromPoint(event.clientX, event.clientY);\n            const element = this._elementRef.nativeElement;\n            // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it\n            // won't fire if the user scrolls away using the wheel without moving their cursor. We\n            // work around it by finding the element under the user's cursor and closing the tooltip\n            // if it's not the trigger.\n            if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {\n                this.hide();\n            }\n        }\n    }\n    /** Disables the native browser gestures, based on how the tooltip has been configured. */\n    _disableNativeGesturesIfNecessary() {\n        const gestures = this.touchGestures;\n        if (gestures !== 'off') {\n            const element = this._elementRef.nativeElement;\n            const style = element.style;\n            // If gestures are set to `auto`, we don't disable text selection on inputs and\n            // textareas, because it prevents the user from typing into them on iOS Safari.\n            if (gestures === 'on' || (element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA')) {\n                style.userSelect =\n                    style.msUserSelect =\n                        style.webkitUserSelect =\n                            style.MozUserSelect =\n                                'none';\n            }\n            // If we have `auto` gestures and the element uses native HTML dragging,\n            // we don't set `-webkit-user-drag` because it prevents the native behavior.\n            if (gestures === 'on' || !element.draggable) {\n                style.webkitUserDrag = 'none';\n            }\n            style.touchAction = 'none';\n            style.webkitTapHighlightColor = 'transparent';\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatTooltipBase, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: _MatTooltipBase, inputs: { position: [\"matTooltipPosition\", \"position\"], positionAtOrigin: [\"matTooltipPositionAtOrigin\", \"positionAtOrigin\"], disabled: [\"matTooltipDisabled\", \"disabled\"], showDelay: [\"matTooltipShowDelay\", \"showDelay\"], hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"], touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"], message: [\"matTooltip\", \"message\"], tooltipClass: [\"matTooltipClass\", \"tooltipClass\"] }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatTooltipBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i1.Overlay }, { type: i0.ElementRef }, { type: i1.ScrollDispatcher }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i2.Platform }, { type: i3.AriaDescriber }, { type: i3.FocusMonitor }, { type: undefined }, { type: i4.Directionality }, { type: undefined }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; }, propDecorators: { position: [{\n                type: Input,\n                args: ['matTooltipPosition']\n            }], positionAtOrigin: [{\n                type: Input,\n                args: ['matTooltipPositionAtOrigin']\n            }], disabled: [{\n                type: Input,\n                args: ['matTooltipDisabled']\n            }], showDelay: [{\n                type: Input,\n                args: ['matTooltipShowDelay']\n            }], hideDelay: [{\n                type: Input,\n                args: ['matTooltipHideDelay']\n            }], touchGestures: [{\n                type: Input,\n                args: ['matTooltipTouchGestures']\n            }], message: [{\n                type: Input,\n                args: ['matTooltip']\n            }], tooltipClass: [{\n                type: Input,\n                args: ['matTooltipClass']\n            }] } });\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nclass MatTooltip extends _MatTooltipBase {\n    constructor(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document) {\n        super(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document);\n        this._tooltipComponent = TooltipComponent;\n        this._cssClassPrefix = 'mat-mdc';\n        this._viewportMargin = MIN_VIEWPORT_TOOLTIP_THRESHOLD;\n    }\n    _addOffset(position) {\n        const offset = UNBOUNDED_ANCHOR_GAP;\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        if (position.originY === 'top') {\n            position.offsetY = -offset;\n        }\n        else if (position.originY === 'bottom') {\n            position.offsetY = offset;\n        }\n        else if (position.originX === 'start') {\n            position.offsetX = isLtr ? -offset : offset;\n        }\n        else if (position.originX === 'end') {\n            position.offsetX = isLtr ? offset : -offset;\n        }\n        return position;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTooltip, deps: [{ token: i1.Overlay }, { token: i0.ElementRef }, { token: i1.ScrollDispatcher }, { token: i0.ViewContainerRef }, { token: i0.NgZone }, { token: i2.Platform }, { token: i3.AriaDescriber }, { token: i3.FocusMonitor }, { token: MAT_TOOLTIP_SCROLL_STRATEGY }, { token: i4.Directionality, optional: true }, { token: MAT_TOOLTIP_DEFAULT_OPTIONS, optional: true }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatTooltip, selector: \"[matTooltip]\", host: { properties: { \"class.mat-mdc-tooltip-disabled\": \"disabled\" }, classAttribute: \"mat-mdc-tooltip-trigger\" }, exportAs: [\"matTooltip\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTooltip, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTooltip]',\n                    exportAs: 'matTooltip',\n                    host: {\n                        'class': 'mat-mdc-tooltip-trigger',\n                        '[class.mat-mdc-tooltip-disabled]': 'disabled',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i1.Overlay }, { type: i0.ElementRef }, { type: i1.ScrollDispatcher }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i2.Platform }, { type: i3.AriaDescriber }, { type: i3.FocusMonitor }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n                }] }, { type: i4.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\nclass _TooltipComponentBase {\n    constructor(_changeDetectorRef, animationMode) {\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Whether interactions on the page should close the tooltip */\n        this._closeOnInteraction = false;\n        /** Whether the tooltip is currently visible. */\n        this._isVisible = false;\n        /** Subject for notifying that the tooltip has been hidden from the view */\n        this._onHide = new Subject();\n        this._animationsDisabled = animationMode === 'NoopAnimations';\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param delay Amount of milliseconds to the delay showing the tooltip.\n     */\n    show(delay) {\n        // Cancel the delayed hide if it is scheduled\n        if (this._hideTimeoutId != null) {\n            clearTimeout(this._hideTimeoutId);\n        }\n        this._showTimeoutId = setTimeout(() => {\n            this._toggleVisibility(true);\n            this._showTimeoutId = undefined;\n        }, delay);\n    }\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param delay Amount of milliseconds to delay showing the tooltip.\n     */\n    hide(delay) {\n        // Cancel the delayed show if it is scheduled\n        if (this._showTimeoutId != null) {\n            clearTimeout(this._showTimeoutId);\n        }\n        this._hideTimeoutId = setTimeout(() => {\n            this._toggleVisibility(false);\n            this._hideTimeoutId = undefined;\n        }, delay);\n    }\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden() {\n        return this._onHide;\n    }\n    /** Whether the tooltip is being displayed. */\n    isVisible() {\n        return this._isVisible;\n    }\n    ngOnDestroy() {\n        this._cancelPendingAnimations();\n        this._onHide.complete();\n        this._triggerElement = null;\n    }\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     */\n    _handleBodyInteraction() {\n        if (this._closeOnInteraction) {\n            this.hide(0);\n        }\n    }\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     */\n    _markForCheck() {\n        this._changeDetectorRef.markForCheck();\n    }\n    _handleMouseLeave({ relatedTarget }) {\n        if (!relatedTarget || !this._triggerElement.contains(relatedTarget)) {\n            if (this.isVisible()) {\n                this.hide(this._mouseLeaveHideDelay);\n            }\n            else {\n                this._finalizeAnimation(false);\n            }\n        }\n    }\n    /**\n     * Callback for when the timeout in this.show() gets completed.\n     * This method is only needed by the mdc-tooltip, and so it is only implemented\n     * in the mdc-tooltip, not here.\n     */\n    _onShow() { }\n    /** Event listener dispatched when an animation on the tooltip finishes. */\n    _handleAnimationEnd({ animationName }) {\n        if (animationName === this._showAnimation || animationName === this._hideAnimation) {\n            this._finalizeAnimation(animationName === this._showAnimation);\n        }\n    }\n    /** Cancels any pending animation sequences. */\n    _cancelPendingAnimations() {\n        if (this._showTimeoutId != null) {\n            clearTimeout(this._showTimeoutId);\n        }\n        if (this._hideTimeoutId != null) {\n            clearTimeout(this._hideTimeoutId);\n        }\n        this._showTimeoutId = this._hideTimeoutId = undefined;\n    }\n    /** Handles the cleanup after an animation has finished. */\n    _finalizeAnimation(toVisible) {\n        if (toVisible) {\n            this._closeOnInteraction = true;\n        }\n        else if (!this.isVisible()) {\n            this._onHide.next();\n        }\n    }\n    /** Toggles the visibility of the tooltip element. */\n    _toggleVisibility(isVisible) {\n        // We set the classes directly here ourselves so that toggling the tooltip state\n        // isn't bound by change detection. This allows us to hide it even if the\n        // view ref has been detached from the CD tree.\n        const tooltip = this._tooltip.nativeElement;\n        const showClass = this._showAnimation;\n        const hideClass = this._hideAnimation;\n        tooltip.classList.remove(isVisible ? hideClass : showClass);\n        tooltip.classList.add(isVisible ? showClass : hideClass);\n        this._isVisible = isVisible;\n        // It's common for internal apps to disable animations using `* { animation: none !important }`\n        // which can break the opening sequence. Try to detect such cases and work around them.\n        if (isVisible && !this._animationsDisabled && typeof getComputedStyle === 'function') {\n            const styles = getComputedStyle(tooltip);\n            // Use `getPropertyValue` to avoid issues with property renaming.\n            if (styles.getPropertyValue('animation-duration') === '0s' ||\n                styles.getPropertyValue('animation-name') === 'none') {\n                this._animationsDisabled = true;\n            }\n        }\n        if (isVisible) {\n            this._onShow();\n        }\n        if (this._animationsDisabled) {\n            tooltip.classList.add('_mat-animation-noopable');\n            this._finalizeAnimation(isVisible);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _TooltipComponentBase, deps: [{ token: i0.ChangeDetectorRef }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: _TooltipComponentBase, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _TooltipComponentBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }]; } });\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\nclass TooltipComponent extends _TooltipComponentBase {\n    constructor(changeDetectorRef, _elementRef, animationMode) {\n        super(changeDetectorRef, animationMode);\n        this._elementRef = _elementRef;\n        /* Whether the tooltip text overflows to multiple lines */\n        this._isMultiline = false;\n        this._showAnimation = 'mat-mdc-tooltip-show';\n        this._hideAnimation = 'mat-mdc-tooltip-hide';\n    }\n    _onShow() {\n        this._isMultiline = this._isTooltipMultiline();\n        this._markForCheck();\n    }\n    /** Whether the tooltip text has overflown to the next line */\n    _isTooltipMultiline() {\n        const rect = this._elementRef.nativeElement.getBoundingClientRect();\n        return rect.height > MIN_HEIGHT && rect.width >= MAX_WIDTH;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: TooltipComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: TooltipComponent, selector: \"mat-tooltip-component\", host: { attributes: { \"aria-hidden\": \"true\" }, listeners: { \"mouseleave\": \"_handleMouseLeave($event)\" }, properties: { \"style.zoom\": \"isVisible() ? 1 : null\" } }, viewQueries: [{ propertyName: \"_tooltip\", first: true, predicate: [\"tooltip\"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<div\\n  #tooltip\\n  class=\\\"mdc-tooltip mdc-tooltip--shown mat-mdc-tooltip\\\"\\n  [ngClass]=\\\"tooltipClass\\\"\\n  (animationend)=\\\"_handleAnimationEnd($event)\\\"\\n  [class.mdc-tooltip--multiline]=\\\"_isMultiline\\\">\\n  <div class=\\\"mdc-tooltip__surface mdc-tooltip__surface-animation\\\">{{message}}</div>\\n</div>\\n\", styles: [\".mdc-tooltip__surface{word-break:break-all;word-break:var(--mdc-tooltip-word-break, normal);overflow-wrap:anywhere}.mdc-tooltip--showing-transition .mdc-tooltip__surface-animation{transition:opacity 150ms 0ms cubic-bezier(0, 0, 0.2, 1),transform 150ms 0ms cubic-bezier(0, 0, 0.2, 1)}.mdc-tooltip--hide-transition .mdc-tooltip__surface-animation{transition:opacity 75ms 0ms cubic-bezier(0.4, 0, 1, 1)}.mdc-tooltip{position:fixed;display:none;z-index:9}.mdc-tooltip-wrapper--rich{position:relative}.mdc-tooltip--shown,.mdc-tooltip--showing,.mdc-tooltip--hide{display:inline-flex}.mdc-tooltip--shown.mdc-tooltip--rich,.mdc-tooltip--showing.mdc-tooltip--rich,.mdc-tooltip--hide.mdc-tooltip--rich{display:inline-block;left:-320px;position:absolute}.mdc-tooltip__surface{line-height:16px;padding:4px 8px;min-width:40px;max-width:200px;min-height:24px;max-height:40vh;box-sizing:border-box;overflow:hidden;text-align:center}.mdc-tooltip__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-tooltip__surface::before{border-color:CanvasText}}.mdc-tooltip--rich .mdc-tooltip__surface{align-items:flex-start;display:flex;flex-direction:column;min-height:24px;min-width:40px;max-width:320px;position:relative}.mdc-tooltip--multiline .mdc-tooltip__surface{text-align:left}[dir=rtl] .mdc-tooltip--multiline .mdc-tooltip__surface,.mdc-tooltip--multiline .mdc-tooltip__surface[dir=rtl]{text-align:right}.mdc-tooltip__surface .mdc-tooltip__title{margin:0 8px}.mdc-tooltip__surface .mdc-tooltip__content{max-width:calc(200px - (2 * 8px));margin:8px;text-align:left}[dir=rtl] .mdc-tooltip__surface .mdc-tooltip__content,.mdc-tooltip__surface .mdc-tooltip__content[dir=rtl]{text-align:right}.mdc-tooltip--rich .mdc-tooltip__surface .mdc-tooltip__content{max-width:calc(320px - (2 * 8px));align-self:stretch}.mdc-tooltip__surface .mdc-tooltip__content-link{text-decoration:none}.mdc-tooltip--rich-actions,.mdc-tooltip__content,.mdc-tooltip__title{z-index:1}.mdc-tooltip__surface-animation{opacity:0;transform:scale(0.8);will-change:transform,opacity}.mdc-tooltip--shown .mdc-tooltip__surface-animation{transform:scale(1);opacity:1}.mdc-tooltip--hide .mdc-tooltip__surface-animation{transform:scale(1)}.mdc-tooltip__caret-surface-top,.mdc-tooltip__caret-surface-bottom{position:absolute;height:24px;width:24px;transform:rotate(35deg) skewY(20deg) scaleX(0.9396926208)}.mdc-tooltip__caret-surface-top .mdc-elevation-overlay,.mdc-tooltip__caret-surface-bottom .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}.mdc-tooltip__caret-surface-bottom{box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);outline:1px solid rgba(0,0,0,0);z-index:-1}@media screen and (forced-colors: active){.mdc-tooltip__caret-surface-bottom{outline-color:CanvasText}}.mat-mdc-tooltip{--mdc-plain-tooltip-container-shape:4px;--mdc-plain-tooltip-supporting-text-line-height:16px}.mat-mdc-tooltip .mdc-tooltip__surface{background-color:var(--mdc-plain-tooltip-container-color)}.mat-mdc-tooltip .mdc-tooltip__surface{border-radius:var(--mdc-plain-tooltip-container-shape)}.mat-mdc-tooltip .mdc-tooltip__caret-surface-top,.mat-mdc-tooltip .mdc-tooltip__caret-surface-bottom{border-radius:var(--mdc-plain-tooltip-container-shape)}.mat-mdc-tooltip .mdc-tooltip__surface{color:var(--mdc-plain-tooltip-supporting-text-color)}.mat-mdc-tooltip .mdc-tooltip__surface{font-family:var(--mdc-plain-tooltip-supporting-text-font);line-height:var(--mdc-plain-tooltip-supporting-text-line-height);font-size:var(--mdc-plain-tooltip-supporting-text-size);font-weight:var(--mdc-plain-tooltip-supporting-text-weight);letter-spacing:var(--mdc-plain-tooltip-supporting-text-tracking)}.mat-mdc-tooltip{position:relative;transform:scale(0)}.mat-mdc-tooltip::before{content:\\\"\\\";top:0;right:0;bottom:0;left:0;z-index:-1;position:absolute}.mat-mdc-tooltip-panel-below .mat-mdc-tooltip::before{top:-8px}.mat-mdc-tooltip-panel-above .mat-mdc-tooltip::before{bottom:-8px}.mat-mdc-tooltip-panel-right .mat-mdc-tooltip::before{left:-8px}.mat-mdc-tooltip-panel-left .mat-mdc-tooltip::before{right:-8px}.mat-mdc-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.mat-mdc-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-mdc-tooltip-show{0%{opacity:0;transform:scale(0.8)}100%{opacity:1;transform:scale(1)}}@keyframes mat-mdc-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(0.8)}}.mat-mdc-tooltip-show{animation:mat-mdc-tooltip-show 150ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-mdc-tooltip-hide{animation:mat-mdc-tooltip-hide 75ms cubic-bezier(0.4, 0, 1, 1) forwards}\"], dependencies: [{ kind: \"directive\", type: i5.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: TooltipComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-tooltip-component', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n                        // won't be rendered if the animations are disabled or there is no web animations polyfill.\n                        '[style.zoom]': 'isVisible() ? 1 : null',\n                        '(mouseleave)': '_handleMouseLeave($event)',\n                        'aria-hidden': 'true',\n                    }, template: \"<div\\n  #tooltip\\n  class=\\\"mdc-tooltip mdc-tooltip--shown mat-mdc-tooltip\\\"\\n  [ngClass]=\\\"tooltipClass\\\"\\n  (animationend)=\\\"_handleAnimationEnd($event)\\\"\\n  [class.mdc-tooltip--multiline]=\\\"_isMultiline\\\">\\n  <div class=\\\"mdc-tooltip__surface mdc-tooltip__surface-animation\\\">{{message}}</div>\\n</div>\\n\", styles: [\".mdc-tooltip__surface{word-break:break-all;word-break:var(--mdc-tooltip-word-break, normal);overflow-wrap:anywhere}.mdc-tooltip--showing-transition .mdc-tooltip__surface-animation{transition:opacity 150ms 0ms cubic-bezier(0, 0, 0.2, 1),transform 150ms 0ms cubic-bezier(0, 0, 0.2, 1)}.mdc-tooltip--hide-transition .mdc-tooltip__surface-animation{transition:opacity 75ms 0ms cubic-bezier(0.4, 0, 1, 1)}.mdc-tooltip{position:fixed;display:none;z-index:9}.mdc-tooltip-wrapper--rich{position:relative}.mdc-tooltip--shown,.mdc-tooltip--showing,.mdc-tooltip--hide{display:inline-flex}.mdc-tooltip--shown.mdc-tooltip--rich,.mdc-tooltip--showing.mdc-tooltip--rich,.mdc-tooltip--hide.mdc-tooltip--rich{display:inline-block;left:-320px;position:absolute}.mdc-tooltip__surface{line-height:16px;padding:4px 8px;min-width:40px;max-width:200px;min-height:24px;max-height:40vh;box-sizing:border-box;overflow:hidden;text-align:center}.mdc-tooltip__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-tooltip__surface::before{border-color:CanvasText}}.mdc-tooltip--rich .mdc-tooltip__surface{align-items:flex-start;display:flex;flex-direction:column;min-height:24px;min-width:40px;max-width:320px;position:relative}.mdc-tooltip--multiline .mdc-tooltip__surface{text-align:left}[dir=rtl] .mdc-tooltip--multiline .mdc-tooltip__surface,.mdc-tooltip--multiline .mdc-tooltip__surface[dir=rtl]{text-align:right}.mdc-tooltip__surface .mdc-tooltip__title{margin:0 8px}.mdc-tooltip__surface .mdc-tooltip__content{max-width:calc(200px - (2 * 8px));margin:8px;text-align:left}[dir=rtl] .mdc-tooltip__surface .mdc-tooltip__content,.mdc-tooltip__surface .mdc-tooltip__content[dir=rtl]{text-align:right}.mdc-tooltip--rich .mdc-tooltip__surface .mdc-tooltip__content{max-width:calc(320px - (2 * 8px));align-self:stretch}.mdc-tooltip__surface .mdc-tooltip__content-link{text-decoration:none}.mdc-tooltip--rich-actions,.mdc-tooltip__content,.mdc-tooltip__title{z-index:1}.mdc-tooltip__surface-animation{opacity:0;transform:scale(0.8);will-change:transform,opacity}.mdc-tooltip--shown .mdc-tooltip__surface-animation{transform:scale(1);opacity:1}.mdc-tooltip--hide .mdc-tooltip__surface-animation{transform:scale(1)}.mdc-tooltip__caret-surface-top,.mdc-tooltip__caret-surface-bottom{position:absolute;height:24px;width:24px;transform:rotate(35deg) skewY(20deg) scaleX(0.9396926208)}.mdc-tooltip__caret-surface-top .mdc-elevation-overlay,.mdc-tooltip__caret-surface-bottom .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}.mdc-tooltip__caret-surface-bottom{box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);outline:1px solid rgba(0,0,0,0);z-index:-1}@media screen and (forced-colors: active){.mdc-tooltip__caret-surface-bottom{outline-color:CanvasText}}.mat-mdc-tooltip{--mdc-plain-tooltip-container-shape:4px;--mdc-plain-tooltip-supporting-text-line-height:16px}.mat-mdc-tooltip .mdc-tooltip__surface{background-color:var(--mdc-plain-tooltip-container-color)}.mat-mdc-tooltip .mdc-tooltip__surface{border-radius:var(--mdc-plain-tooltip-container-shape)}.mat-mdc-tooltip .mdc-tooltip__caret-surface-top,.mat-mdc-tooltip .mdc-tooltip__caret-surface-bottom{border-radius:var(--mdc-plain-tooltip-container-shape)}.mat-mdc-tooltip .mdc-tooltip__surface{color:var(--mdc-plain-tooltip-supporting-text-color)}.mat-mdc-tooltip .mdc-tooltip__surface{font-family:var(--mdc-plain-tooltip-supporting-text-font);line-height:var(--mdc-plain-tooltip-supporting-text-line-height);font-size:var(--mdc-plain-tooltip-supporting-text-size);font-weight:var(--mdc-plain-tooltip-supporting-text-weight);letter-spacing:var(--mdc-plain-tooltip-supporting-text-tracking)}.mat-mdc-tooltip{position:relative;transform:scale(0)}.mat-mdc-tooltip::before{content:\\\"\\\";top:0;right:0;bottom:0;left:0;z-index:-1;position:absolute}.mat-mdc-tooltip-panel-below .mat-mdc-tooltip::before{top:-8px}.mat-mdc-tooltip-panel-above .mat-mdc-tooltip::before{bottom:-8px}.mat-mdc-tooltip-panel-right .mat-mdc-tooltip::before{left:-8px}.mat-mdc-tooltip-panel-left .mat-mdc-tooltip::before{right:-8px}.mat-mdc-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.mat-mdc-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-mdc-tooltip-show{0%{opacity:0;transform:scale(0.8)}100%{opacity:1;transform:scale(1)}}@keyframes mat-mdc-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(0.8)}}.mat-mdc-tooltip-show{animation:mat-mdc-tooltip-show 150ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-mdc-tooltip-hide{animation:mat-mdc-tooltip-hide 75ms cubic-bezier(0.4, 0, 1, 1) forwards}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }]; }, propDecorators: { _tooltip: [{\n                type: ViewChild,\n                args: ['tooltip', {\n                        // Use a static query here since we interact directly with\n                        // the DOM which can happen before `ngAfterViewInit`.\n                        static: true,\n                    }]\n            }] } });\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nconst matTooltipAnimations = {\n    /** Animation that transitions a tooltip in and out. */\n    tooltipState: trigger('state', [\n        // TODO(crisbeto): these values are based on MDC's CSS.\n        // We should be able to use their styles directly once we land #19432.\n        state('initial, void, hidden', style({ opacity: 0, transform: 'scale(0.8)' })),\n        state('visible', style({ transform: 'scale(1)' })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => hidden', animate('75ms cubic-bezier(0.4, 0, 1, 1)')),\n    ]),\n};\n\nclass MatTooltipModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTooltipModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTooltipModule, declarations: [MatTooltip, TooltipComponent], imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule], exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTooltipModule, providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule, MatCommonModule, CdkScrollableModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTooltipModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule],\n                    exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n                    declarations: [MatTooltip, TooltipComponent],\n                    providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, _MatTooltipBase, _TooltipComponentBase, getMatTooltipInvalidPositionError, matTooltipAnimations };\n","import * as i1 from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, EventEmitter, Directive, Optional, Inject, ContentChildren, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i2 from '@angular/material/core';\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/**\n * Injection token that can be used to reference instances of `MatButtonToggleGroup`.\n * It serves as alternative token to the actual `MatButtonToggleGroup` class which\n * could cause unnecessary retention of the class and its component metadata.\n */\nconst MAT_BUTTON_TOGGLE_GROUP = new InjectionToken('MatButtonToggleGroup');\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nconst MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatButtonToggleGroup),\n    multi: true,\n};\n// Counter used to generate unique IDs.\nlet uniqueIdCounter = 0;\n/** Change event object emitted by button toggle. */\nclass MatButtonToggleChange {\n    constructor(\n    /** The button toggle that emits the event. */\n    source, \n    /** The value assigned to the button toggle. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\nclass MatButtonToggleGroup {\n    /** `name` attribute for the underlying `input` element. */\n    get name() {\n        return this._name;\n    }\n    set name(value) {\n        this._name = value;\n        this._markButtonsForCheck();\n    }\n    /** Whether the toggle group is vertical. */\n    get vertical() {\n        return this._vertical;\n    }\n    set vertical(value) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n    /** Value of the toggle group. */\n    get value() {\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        if (this.multiple) {\n            return selected.map(toggle => toggle.value);\n        }\n        return selected[0] ? selected[0].value : undefined;\n    }\n    set value(newValue) {\n        this._setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n    /** Selected button toggles in the group. */\n    get selected() {\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        return this.multiple ? selected : selected[0] || null;\n    }\n    /** Whether multiple button toggles can be selected. */\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n        this._markButtonsForCheck();\n    }\n    /** Whether multiple button toggle group is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._markButtonsForCheck();\n    }\n    constructor(_changeDetector, defaultOptions) {\n        this._changeDetector = _changeDetector;\n        this._vertical = false;\n        this._multiple = false;\n        this._disabled = false;\n        /**\n         * The method to be called in order to update ngModel.\n         * Now `ngModel` binding is not supported in multiple selection mode.\n         */\n        this._controlValueAccessorChangeFn = () => { };\n        /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n        this._onTouched = () => { };\n        this._name = `mat-button-toggle-group-${uniqueIdCounter++}`;\n        /**\n         * Event that emits whenever the value of the group changes.\n         * Used to facilitate two-way data binding.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /** Event emitted when the group's value changes. */\n        this.change = new EventEmitter();\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    }\n    ngAfterContentInit() {\n        this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent(toggle) {\n        const event = new MatButtonToggleChange(toggle, this.value);\n        this._rawValue = event.value;\n        this._controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     * @param deferEvents Whether to defer emitting the change events.\n     */\n    _syncButtonToggle(toggle, select, isUserInput = false, deferEvents = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            this.selected.checked = false;\n        }\n        if (this._selectionModel) {\n            if (select) {\n                this._selectionModel.select(toggle);\n            }\n            else {\n                this._selectionModel.deselect(toggle);\n            }\n        }\n        else {\n            deferEvents = true;\n        }\n        // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n        // the side-effect is that we may end up updating the model value out of sequence in others\n        // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n        if (deferEvents) {\n            Promise.resolve().then(() => this._updateModelValue(toggle, isUserInput));\n        }\n        else {\n            this._updateModelValue(toggle, isUserInput);\n        }\n    }\n    /** Checks whether a button toggle is selected. */\n    _isSelected(toggle) {\n        return this._selectionModel && this._selectionModel.isSelected(toggle);\n    }\n    /** Determines whether a button toggle should be checked on init. */\n    _isPrechecked(toggle) {\n        if (typeof this._rawValue === 'undefined') {\n            return false;\n        }\n        if (this.multiple && Array.isArray(this._rawValue)) {\n            return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n        }\n        return toggle.value === this._rawValue;\n    }\n    /** Updates the selection state of the toggles in the group based on a value. */\n    _setSelectionByValue(value) {\n        this._rawValue = value;\n        if (!this._buttonToggles) {\n            return;\n        }\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n            this._clearSelection();\n            value.forEach((currentValue) => this._selectValue(currentValue));\n        }\n        else {\n            this._clearSelection();\n            this._selectValue(value);\n        }\n    }\n    /** Clears the selected toggles. */\n    _clearSelection() {\n        this._selectionModel.clear();\n        this._buttonToggles.forEach(toggle => (toggle.checked = false));\n    }\n    /** Selects a value if there's a toggle that corresponds to it. */\n    _selectValue(value) {\n        const correspondingOption = this._buttonToggles.find(toggle => {\n            return toggle.value != null && toggle.value === value;\n        });\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this._selectionModel.select(correspondingOption);\n        }\n    }\n    /** Syncs up the group's value with the model and emits the change event. */\n    _updateModelValue(toggle, isUserInput) {\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this._emitChangeEvent(toggle);\n        }\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n    /** Marks all of the child button toggles to be checked. */\n    _markButtonsForCheck() {\n        this._buttonToggles?.forEach(toggle => toggle._markForCheck());\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatButtonToggleGroup, deps: [{ token: i0.ChangeDetectorRef }, { token: MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatButtonToggleGroup, selector: \"mat-button-toggle-group\", inputs: { appearance: \"appearance\", name: \"name\", vertical: \"vertical\", value: \"value\", multiple: \"multiple\", disabled: \"disabled\" }, outputs: { valueChange: \"valueChange\", change: \"change\" }, host: { attributes: { \"role\": \"group\" }, properties: { \"attr.aria-disabled\": \"disabled\", \"class.mat-button-toggle-vertical\": \"vertical\", \"class.mat-button-toggle-group-appearance-standard\": \"appearance === \\\"standard\\\"\" }, classAttribute: \"mat-button-toggle-group\" }, providers: [\n            MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n            { provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup },\n        ], queries: [{ propertyName: \"_buttonToggles\", predicate: i0.forwardRef(function () { return MatButtonToggle; }), descendants: true }], exportAs: [\"matButtonToggleGroup\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatButtonToggleGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-button-toggle-group',\n                    providers: [\n                        MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n                        { provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup },\n                    ],\n                    host: {\n                        'role': 'group',\n                        'class': 'mat-button-toggle-group',\n                        '[attr.aria-disabled]': 'disabled',\n                        '[class.mat-button-toggle-vertical]': 'vertical',\n                        '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n                    },\n                    exportAs: 'matButtonToggleGroup',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n                }] }]; }, propDecorators: { _buttonToggles: [{\n                type: ContentChildren,\n                args: [forwardRef(() => MatButtonToggle), {\n                        // Note that this would technically pick up toggles\n                        // from nested groups, but that's not a case that we support.\n                        descendants: true,\n                    }]\n            }], appearance: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], vertical: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], valueChange: [{\n                type: Output\n            }], multiple: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], change: [{\n                type: Output\n            }] } });\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nconst _MatButtonToggleBase = mixinDisableRipple(class {\n});\n/** Single button inside of a toggle group. */\nclass MatButtonToggle extends _MatButtonToggleBase {\n    /** Unique ID for the underlying `button` element. */\n    get buttonId() {\n        return `${this.id}-button`;\n    }\n    /** The appearance style of the button. */\n    get appearance() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n    }\n    set appearance(value) {\n        this._appearance = value;\n    }\n    /** Whether the button is checked. */\n    get checked() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n    }\n    set checked(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Whether the button is disabled. */\n    get disabled() {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, defaultTabIndex, defaultOptions) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._checked = false;\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._disabled = false;\n        /** Event emitted when the group value changes. */\n        this.change = new EventEmitter();\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;\n        this.buttonToggleGroup = toggleGroup;\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    ngOnInit() {\n        const group = this.buttonToggleGroup;\n        this.id = this.id || `mat-button-toggle-${uniqueIdCounter++}`;\n        if (group) {\n            if (group._isPrechecked(this)) {\n                this.checked = true;\n            }\n            else if (group._isSelected(this) !== this._checked) {\n                // As side effect of the circular dependency between the toggle group and the button,\n                // we may end up in a state where the button is supposed to be checked on init, but it\n                // isn't, because the checked value was assigned too early. This can happen when Ivy\n                // assigns the static input value before the `ngOnInit` has run.\n                group._syncButtonToggle(this, this._checked);\n            }\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._elementRef, true);\n    }\n    ngOnDestroy() {\n        const group = this.buttonToggleGroup;\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group._isSelected(this)) {\n            group._syncButtonToggle(this, false, false, true);\n        }\n    }\n    /** Focuses the button. */\n    focus(options) {\n        this._buttonElement.nativeElement.focus(options);\n    }\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    _onButtonClick() {\n        const newChecked = this._isSingleSelector() ? true : !this._checked;\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup._onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new MatButtonToggleChange(this, this.value));\n    }\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Gets the name that should be assigned to the inner DOM node. */\n    _getButtonName() {\n        if (this._isSingleSelector()) {\n            return this.buttonToggleGroup.name;\n        }\n        return this.name || null;\n    }\n    /** Whether the toggle is in single selection mode. */\n    _isSingleSelector() {\n        return this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatButtonToggle, deps: [{ token: MAT_BUTTON_TOGGLE_GROUP, optional: true }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i1.FocusMonitor }, { token: 'tabindex', attribute: true }, { token: MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatButtonToggle, selector: \"mat-button-toggle\", inputs: { disableRipple: \"disableRipple\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], id: \"id\", name: \"name\", value: \"value\", tabIndex: \"tabIndex\", appearance: \"appearance\", checked: \"checked\", disabled: \"disabled\" }, outputs: { change: \"change\" }, host: { attributes: { \"role\": \"presentation\" }, listeners: { \"focus\": \"focus()\" }, properties: { \"class.mat-button-toggle-standalone\": \"!buttonToggleGroup\", \"class.mat-button-toggle-checked\": \"checked\", \"class.mat-button-toggle-disabled\": \"disabled\", \"class.mat-button-toggle-appearance-standard\": \"appearance === \\\"standard\\\"\", \"attr.aria-label\": \"null\", \"attr.aria-labelledby\": \"null\", \"attr.id\": \"id\", \"attr.name\": \"null\" }, classAttribute: \"mat-button-toggle\" }, viewQueries: [{ propertyName: \"_buttonElement\", first: true, predicate: [\"button\"], descendants: true }], exportAs: [\"matButtonToggle\"], usesInheritance: true, ngImport: i0, template: \"<button #button class=\\\"mat-button-toggle-button mat-focus-indicator\\\"\\n        type=\\\"button\\\"\\n        [id]=\\\"buttonId\\\"\\n        [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n        [attr.aria-pressed]=\\\"checked\\\"\\n        [disabled]=\\\"disabled || null\\\"\\n        [attr.name]=\\\"_getButtonName()\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        (click)=\\\"_onButtonClick()\\\">\\n  <span class=\\\"mat-button-toggle-label-content\\\">\\n    <ng-content></ng-content>\\n  </span>\\n</button>\\n\\n<span class=\\\"mat-button-toggle-focus-overlay\\\"></span>\\n<span class=\\\"mat-button-toggle-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"button\\\"\\n     [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\">\\n</span>\\n\", styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{--mat-legacy-button-toggle-height:36px;--mat-legacy-button-toggle-shape:2px;--mat-legacy-button-toggle-focus-state-layer-opacity:1;position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;-webkit-tap-highlight-color:rgba(0,0,0,0);transform:translateZ(0);border-radius:var(--mat-legacy-button-toggle-shape)}.mat-button-toggle-standalone:not([class*=mat-elevation-z]),.mat-button-toggle-group:not([class*=mat-elevation-z]){box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12)}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{--mat-standard-button-toggle-shape:4px;--mat-standard-button-toggle-hover-state-layer-opacity:0.04;--mat-standard-button-toggle-focus-state-layer-opacity:0.12;border-radius:var(--mat-standard-button-toggle-shape);border:solid 1px var(--mat-standard-button-toggle-divider-color)}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard:not([class*=mat-elevation-z]),.mat-button-toggle-group-appearance-standard:not([class*=mat-elevation-z]){box-shadow:none}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative;color:var(--mat-legacy-button-toggle-text-color);font-family:var(--mat-legacy-button-toggle-text-font)}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:var(--mat-legacy-button-toggle-focus-state-layer-opacity)}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle-checked{color:var(--mat-legacy-button-toggle-selected-state-text-color);background-color:var(--mat-legacy-button-toggle-selected-state-background-color)}.mat-button-toggle-disabled{color:var(--mat-legacy-button-toggle-disabled-state-text-color);background-color:var(--mat-legacy-button-toggle-disabled-state-background-color)}.mat-button-toggle-disabled.mat-button-toggle-checked{background-color:var(--mat-legacy-button-toggle-disabled-selected-state-background-color)}.mat-button-toggle-appearance-standard{--mat-standard-button-toggle-shape:4px;--mat-standard-button-toggle-hover-state-layer-opacity:0.04;--mat-standard-button-toggle-focus-state-layer-opacity:0.12;color:var(--mat-standard-button-toggle-text-color);background-color:var(--mat-standard-button-toggle-background-color);font-family:var(--mat-standard-button-toggle-text-font)}.mat-button-toggle-group-appearance-standard .mat-button-toggle-appearance-standard+.mat-button-toggle-appearance-standard{border-left:solid 1px var(--mat-standard-button-toggle-divider-color)}[dir=rtl] .mat-button-toggle-group-appearance-standard .mat-button-toggle-appearance-standard+.mat-button-toggle-appearance-standard{border-left:none;border-right:solid 1px var(--mat-standard-button-toggle-divider-color)}.mat-button-toggle-group-appearance-standard.mat-button-toggle-vertical .mat-button-toggle-appearance-standard+.mat-button-toggle-appearance-standard{border-left:none;border-right:none;border-top:solid 1px var(--mat-standard-button-toggle-divider-color)}.mat-button-toggle-appearance-standard.mat-button-toggle-checked{color:var(--mat-standard-button-toggle-selected-state-text-color);background-color:var(--mat-standard-button-toggle-selected-state-background-color)}.mat-button-toggle-appearance-standard.mat-button-toggle-disabled{color:var(--mat-standard-button-toggle-disabled-state-text-color);background-color:var(--mat-standard-button-toggle-disabled-state-background-color)}.mat-button-toggle-appearance-standard.mat-button-toggle-disabled.mat-button-toggle-checked{color:var(--mat-standard-button-toggle-disabled-selected-state-text-color);background-color:var(--mat-standard-button-toggle-disabled-selected-state-background-color)}.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{background-color:var(--mat-standard-button-toggle-state-layer-color)}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:var(--mat-standard-button-toggle-hover-state-layer-opacity)}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:var(--mat-standard-button-toggle-focus-state-layer-opacity)}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;user-select:none;display:inline-block;padding:0 16px;line-height:var(--mat-legacy-button-toggle-height);position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px;line-height:var(--mat-standard-button-toggle-height)}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;pointer-events:none;opacity:0;background-color:var(--mat-legacy-button-toggle-state-layer-color)}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 500px;opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked:hover .mat-button-toggle-focus-overlay{opacity:.6}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\"], dependencies: [{ kind: \"directive\", type: i2.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatButtonToggle, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-button-toggle', encapsulation: ViewEncapsulation.None, exportAs: 'matButtonToggle', changeDetection: ChangeDetectionStrategy.OnPush, inputs: ['disableRipple'], host: {\n                        '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n                        '[class.mat-button-toggle-checked]': 'checked',\n                        '[class.mat-button-toggle-disabled]': 'disabled',\n                        '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n                        'class': 'mat-button-toggle',\n                        '[attr.aria-label]': 'null',\n                        '[attr.aria-labelledby]': 'null',\n                        '[attr.id]': 'id',\n                        '[attr.name]': 'null',\n                        '(focus)': 'focus()',\n                        'role': 'presentation',\n                    }, template: \"<button #button class=\\\"mat-button-toggle-button mat-focus-indicator\\\"\\n        type=\\\"button\\\"\\n        [id]=\\\"buttonId\\\"\\n        [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n        [attr.aria-pressed]=\\\"checked\\\"\\n        [disabled]=\\\"disabled || null\\\"\\n        [attr.name]=\\\"_getButtonName()\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        (click)=\\\"_onButtonClick()\\\">\\n  <span class=\\\"mat-button-toggle-label-content\\\">\\n    <ng-content></ng-content>\\n  </span>\\n</button>\\n\\n<span class=\\\"mat-button-toggle-focus-overlay\\\"></span>\\n<span class=\\\"mat-button-toggle-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"button\\\"\\n     [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\">\\n</span>\\n\", styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{--mat-legacy-button-toggle-height:36px;--mat-legacy-button-toggle-shape:2px;--mat-legacy-button-toggle-focus-state-layer-opacity:1;position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;-webkit-tap-highlight-color:rgba(0,0,0,0);transform:translateZ(0);border-radius:var(--mat-legacy-button-toggle-shape)}.mat-button-toggle-standalone:not([class*=mat-elevation-z]),.mat-button-toggle-group:not([class*=mat-elevation-z]){box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12)}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{--mat-standard-button-toggle-shape:4px;--mat-standard-button-toggle-hover-state-layer-opacity:0.04;--mat-standard-button-toggle-focus-state-layer-opacity:0.12;border-radius:var(--mat-standard-button-toggle-shape);border:solid 1px var(--mat-standard-button-toggle-divider-color)}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard:not([class*=mat-elevation-z]),.mat-button-toggle-group-appearance-standard:not([class*=mat-elevation-z]){box-shadow:none}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative;color:var(--mat-legacy-button-toggle-text-color);font-family:var(--mat-legacy-button-toggle-text-font)}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:var(--mat-legacy-button-toggle-focus-state-layer-opacity)}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle-checked{color:var(--mat-legacy-button-toggle-selected-state-text-color);background-color:var(--mat-legacy-button-toggle-selected-state-background-color)}.mat-button-toggle-disabled{color:var(--mat-legacy-button-toggle-disabled-state-text-color);background-color:var(--mat-legacy-button-toggle-disabled-state-background-color)}.mat-button-toggle-disabled.mat-button-toggle-checked{background-color:var(--mat-legacy-button-toggle-disabled-selected-state-background-color)}.mat-button-toggle-appearance-standard{--mat-standard-button-toggle-shape:4px;--mat-standard-button-toggle-hover-state-layer-opacity:0.04;--mat-standard-button-toggle-focus-state-layer-opacity:0.12;color:var(--mat-standard-button-toggle-text-color);background-color:var(--mat-standard-button-toggle-background-color);font-family:var(--mat-standard-button-toggle-text-font)}.mat-button-toggle-group-appearance-standard .mat-button-toggle-appearance-standard+.mat-button-toggle-appearance-standard{border-left:solid 1px var(--mat-standard-button-toggle-divider-color)}[dir=rtl] .mat-button-toggle-group-appearance-standard .mat-button-toggle-appearance-standard+.mat-button-toggle-appearance-standard{border-left:none;border-right:solid 1px var(--mat-standard-button-toggle-divider-color)}.mat-button-toggle-group-appearance-standard.mat-button-toggle-vertical .mat-button-toggle-appearance-standard+.mat-button-toggle-appearance-standard{border-left:none;border-right:none;border-top:solid 1px var(--mat-standard-button-toggle-divider-color)}.mat-button-toggle-appearance-standard.mat-button-toggle-checked{color:var(--mat-standard-button-toggle-selected-state-text-color);background-color:var(--mat-standard-button-toggle-selected-state-background-color)}.mat-button-toggle-appearance-standard.mat-button-toggle-disabled{color:var(--mat-standard-button-toggle-disabled-state-text-color);background-color:var(--mat-standard-button-toggle-disabled-state-background-color)}.mat-button-toggle-appearance-standard.mat-button-toggle-disabled.mat-button-toggle-checked{color:var(--mat-standard-button-toggle-disabled-selected-state-text-color);background-color:var(--mat-standard-button-toggle-disabled-selected-state-background-color)}.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{background-color:var(--mat-standard-button-toggle-state-layer-color)}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:var(--mat-standard-button-toggle-hover-state-layer-opacity)}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:var(--mat-standard-button-toggle-focus-state-layer-opacity)}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;user-select:none;display:inline-block;padding:0 16px;line-height:var(--mat-legacy-button-toggle-height);position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px;line-height:var(--mat-standard-button-toggle-height)}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;pointer-events:none;opacity:0;background-color:var(--mat-legacy-button-toggle-state-layer-color)}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 500px;opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked:hover .mat-button-toggle-focus-overlay{opacity:.6}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\"] }]\n        }], ctorParameters: function () { return [{ type: MatButtonToggleGroup, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_BUTTON_TOGGLE_GROUP]\n                }] }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i1.FocusMonitor }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n                }] }]; }, propDecorators: { ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], _buttonElement: [{\n                type: ViewChild,\n                args: ['button']\n            }], id: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], tabIndex: [{\n                type: Input\n            }], appearance: [{\n                type: Input\n            }], checked: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], change: [{\n                type: Output\n            }] } });\n\nclass MatButtonToggleModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatButtonToggleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: MatButtonToggleModule, declarations: [MatButtonToggleGroup, MatButtonToggle], imports: [MatCommonModule, MatRippleModule], exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatButtonToggleModule, imports: [MatCommonModule, MatRippleModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatButtonToggleModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatRippleModule],\n                    exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n                    declarations: [MatButtonToggleGroup, MatButtonToggle],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggle, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleModule };\n","import { JsonFieldMetadata, JsonMetadata } from './json-metadata';\n\nexport type JsonField<T> = {\n  name: string;\n  data: T;\n  metadata: JsonFieldMetadata<T>;\n};\n\nexport function getFields<T extends object>(\n  data: T,\n  metadata?: JsonMetadata<T>\n): Array<JsonField<T>> {\n  const dataFields = Object.entries(data) as Array<[keyof T, T[keyof T]]>;\n\n  return dataFields.map(([key, value]) => {\n    return {\n      name: key,\n      data: value,\n      metadata: metadata?.[key],\n    };\n  }) as any;\n}\n\nexport function isObject<T extends object>(value: T | T[]): value is T {\n  return typeof value === 'object' && value !== null;\n}\n\nexport function isArray<T extends object>(value: T | T[]): value is Array<T> {\n  return Array.isArray(value);\n}\n","<span class=\"field-name\" [matTooltip]=\"metadata?.genericDescription ?? ''\">{{\n  name\n}}</span\n>:\n<ng-container *ngIf=\"isObject\">\n  {{ \"{\" }}\n  <app-field\n    *ngFor=\"let field of objectFields; trackBy: fieldName\"\n    [name]=\"field.name\"\n    [data]=\"field.data\"\n    [metadata]=\"field.metadata\"\n  ></app-field>\n  {{ \"}\" }},\n</ng-container>\n\n<ng-container *ngIf=\"isArray\">\n  [\n  <ng-container *ngFor=\"let item of arrayFields; trackBy: index\">\n    <div class=\"array-item\">\n      {{ \"{\" }}\n      <app-field\n        *ngFor=\"let field of item; trackBy: fieldName\"\n        [name]=\"field.name\"\n        [data]=\"field.data\"\n        [metadata]=\"field.metadata\"\n      ></app-field>\n      {{ \"}\" }},\n    </div>\n  </ng-container>\n  ]\n</ng-container>\n\n<ng-container *ngIf=\"isPrimitive\"> {{ data }} </ng-container>\n<br />\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { JsonFieldMetadata } from './json-metadata';\nimport { JsonField, getFields, isArray, isObject } from './utils';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-field',\n  templateUrl: './field.component.html',\n  styleUrls: ['./field.component.scss'],\n  imports: [CommonModule, MatTooltipModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n})\nexport class FieldComponent<T extends object> {\n  @Input({ required: true }) name!: string;\n  @Input({ required: true }) data!: T | T[];\n  @Input({ required: true }) metadata?: JsonFieldMetadata<T>;\n\n  get isObject() {\n    return !isArray(this.data) && isObject(this.data);\n  }\n\n  get isArray() {\n    return isArray(this.data);\n  }\n\n  get isPrimitive() {\n    return !this.isObject && !this.isArray;\n  }\n\n  get objectFields() {\n    if (!isObject(this.data)) {\n      return [];\n    }\n\n    return getFields(this.data, this.metadata?.fields as any);\n  }\n\n  get arrayFields() {\n    if (!isArray(this.data)) {\n      return [];\n    }\n\n    return this.data.map((item) =>\n      getFields(item, this.metadata?.fields as any)\n    );\n  }\n\n  fieldName(_: number, field: JsonField<T>) {\n    return field.name;\n  }\n\n  index(index: number) {\n    return index;\n  }\n}\n","{{ \"{\" }}\n<ng-container *ngFor=\"let field of fields; trackBy: fieldName\">\n  <app-field\n    [name]=\"field.name\"\n    [data]=\"field.data\"\n    [metadata]=\"field.metadata\"\n  ></app-field>\n</ng-container>\n{{ \"}\" }}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { JsonMetadata } from './json-metadata';\nimport { CommonModule } from '@angular/common';\nimport { FieldComponent } from './field.component';\nimport { JsonField, getFields } from './utils';\n\n@Component({\n  selector: 'app-pretty-json',\n  templateUrl: './pretty-json.component.html',\n  styleUrls: ['./pretty-json.component.scss'],\n  imports: [CommonModule, FieldComponent],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n})\nexport class PrettyJsonComponent<T extends object> {\n  @Input({ required: true }) data!: T;\n  @Input({ required: true }) metadata!: JsonMetadata<T>;\n\n  get fields() {\n    const fields = getFields(this.data, this.metadata);\n    return fields;\n  }\n\n  fieldName(_: number, field: JsonField<T>) {\n    return field.name;\n  }\n}\n","import { JsonMetadata } from '../../../pretty-json/json-metadata';\nimport { DecodedWebAuthnCreateChallengeResponse } from '../../../types/webauthn-challenge-response';\n\nexport const WebAuthnCreateMetadata: JsonMetadata<DecodedWebAuthnCreateChallengeResponse> =\n  {\n    method: {\n      genericDescription: 'This is a method used to create a new passkey',\n      fields: undefined,\n    },\n    options: {\n      fields: {\n        publicKey: {\n          genericDescription: 'WebAuthn options object',\n          fields: {\n            attestation: {\n              genericDescription: 'Attestation type',\n              fields: undefined,\n            },\n            authenticatorSelection: {\n              genericDescription: 'Authenticator selection',\n              fields: {\n                authenticatorAttachment: {\n                  genericDescription: 'Authenticator attachment',\n                  fields: undefined,\n                },\n                requireResidentKey: {\n                  genericDescription: 'Require resident key',\n                  fields: undefined,\n                },\n                userVerification: {\n                  genericDescription: 'User verification',\n                  fields: undefined,\n                },\n              },\n            },\n            challenge: {\n              genericDescription: 'Challenge',\n              fields: undefined,\n            },\n            excludeCredentials: {\n              genericDescription: 'Exclude credentials',\n              fields: {\n                id: {\n                  genericDescription: 'ID',\n                  fields: undefined,\n                },\n                transports: {\n                  genericDescription: 'Transports',\n                  fields: undefined,\n                },\n                type: {\n                  genericDescription: 'Type',\n                  fields: undefined,\n                },\n                alg: {\n                  genericDescription: 'Algorithm',\n                  fields: undefined,\n                },\n              },\n            },\n            extensions: {\n              genericDescription: 'Extensions',\n              fields: {},\n            },\n            pubKeyCredParams: {\n              genericDescription: 'Public key credential parameters',\n              fields: {\n                type: {\n                  genericDescription: 'Type',\n                  fields: undefined,\n                },\n                id: {\n                  genericDescription: 'ID',\n                  fields: undefined,\n                },\n                alg: {\n                  genericDescription: 'Algorithm',\n                  fields: undefined,\n                },\n                transports: {\n                  genericDescription: 'Transports',\n                  fields: undefined,\n                },\n              },\n            },\n            rp: {\n              genericDescription: `This member contains a name and an identifier for the Relying Party responsible for the request. Its value’s name member is REQUIRED. See § 5.4.1 Public Key Entity Description (dictionary PublicKeyCredentialEntity) for further details. Its value’s id member specifies the RP ID the credential should be scoped to. If omitted, its value will be the CredentialsContainer object’s relevant settings object's origin's effective domain. See § 5.4.2 Relying Party Parameters for Credential Generation (dictionary PublicKeyCredentialRpEntity) for further details.`,\n              fields: {\n                id: {\n                  genericDescription: 'ID',\n                  fields: undefined,\n                },\n                name: {\n                  genericDescription: 'Name',\n                  fields: undefined,\n                },\n              },\n            },\n            timeout: {\n              genericDescription: 'Timeout',\n              fields: undefined,\n            },\n            user: {\n              genericDescription: 'User',\n              fields: {\n                displayName: {\n                  genericDescription: 'Display name',\n                  fields: undefined,\n                },\n                id: {\n                  genericDescription: 'ID',\n                  fields: undefined,\n                },\n                name: {\n                  genericDescription: 'Name',\n                  fields: undefined,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    response: undefined as any,\n  };\n","<div class=\"page-container container-md\">\n  <h1>Step 2: Data analysis</h1>\n  <p class=\"lead\">Transfer collected data here to start the analysis</p>\n\n  <mat-expansion-panel [(expanded)]=\"panelExpanded\">\n    <mat-expansion-panel-header>\n      <mat-panel-title>Data input</mat-panel-title>\n    </mat-expansion-panel-header>\n\n    <p>Paste data here to begin analysis</p>\n    <mat-form-field>\n      <textarea matInput (input)=\"readData($event)\"></textarea>\n    </mat-form-field>\n  </mat-expansion-panel>\n\n  <ng-container *ngIf=\"data$ | async as data\">\n    <div class=\"data-header\">\n      <h2>Data</h2>\n      <mat-button-toggle-group name=\"display-mode\" [(ngModel)]=\"displayMode\">\n        <mat-button-toggle\n          value=\"raw\"\n          matTooltip=\"Displays the raw captured data with minimal processing and no highlighting\"\n          >Raw</mat-button-toggle\n        >\n        <mat-button-toggle\n          value=\"decoded\"\n          matTooltip=\"Decodes the binary values into a human readable JSON format\"\n          >Decoded</mat-button-toggle\n        >\n        <mat-button-toggle\n          value=\"pretty\"\n          matTooltip=\"[WIP] Adds data highlighting with descriptions and explanations for each field\"\n          >Pretty</mat-button-toggle\n        >\n      </mat-button-toggle-group>\n    </div>\n    <pre *ngIf=\"displayMode == 'raw'\"><code>{{ data.raw | json }}</code></pre>\n    <pre\n      *ngIf=\"displayMode == 'decoded' && data.decoded\"\n    ><code>{{ data.decoded | json }}</code></pre>\n    <app-pretty-json\n      *ngIf=\"displayMode == 'pretty' && data.decoded\"\n      [data]=\"data.decoded\"\n      [metadata]=\"getMetadata(data.decoded)\"\n    ></app-pretty-json>\n    <ng-container *ngIf=\"data.decoded == undefined\">\n      Unable to decode input\n    </ng-container>\n  </ng-container>\n</div>\n","import { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { ActivatedRoute } from '@angular/router';\nimport { Component, OnDestroy, OnInit, inject } from '@angular/core';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\n\nimport { ReplaySubject, Subject, takeUntil } from 'rxjs';\nimport {\n  DecodedWebAuthnChallengeResponse,\n  WebAuthnChallengeResponse,\n  WebAuthnCreateChallengeResponse,\n  WebAuthnGetChallengeResponse,\n} from '../../../types/webauthn-challenge-response';\nimport { OptionsComponent } from '../../../options/options.component';\nimport { PrettyJsonComponent } from '../../../pretty-json/pretty-json.component';\nimport { JsonMetadata } from '../../../pretty-json/json-metadata';\nimport { WebAuthnCreateMetadata } from './metadata';\nimport { exampleData } from './example.data';\nimport { decodeCreate } from './decode-create';\nimport { decodeGet } from './decode-get';\n\n@Component({\n  templateUrl: './analyze.component.html',\n  styleUrls: ['./analyze.component.scss'],\n  imports: [\n    CommonModule,\n    FormsModule,\n    MatExpansionModule,\n    MatInputModule,\n    MatTooltipModule,\n    MatButtonToggleModule,\n    OptionsComponent,\n    PrettyJsonComponent,\n  ],\n  standalone: true,\n})\nexport class AnalyzeComponent implements OnInit, OnDestroy {\n  private activatedRoute = inject(ActivatedRoute);\n  private onDestroy$ = new Subject<void>();\n\n  protected data$ = new ReplaySubject<{\n    raw: WebAuthnChallengeResponse;\n    decoded: DecodedWebAuthnChallengeResponse | undefined;\n  }>(1);\n  protected panelExpanded = true;\n  protected displayMode: 'raw' | 'decoded' | 'pretty' = 'decoded';\n\n  ngOnInit(): void {\n    this.data$.pipe(takeUntil(this.onDestroy$)).subscribe(() => {\n      this.panelExpanded = false;\n    });\n\n    this.activatedRoute.queryParams\n      .pipe(takeUntil(this.onDestroy$))\n      .subscribe((params) => {\n        if ('example' in params) {\n          const raw = read(exampleData);\n          const decoded = decode(raw);\n          this.data$.next({ raw, decoded });\n          this.displayMode = 'pretty';\n        }\n      });\n  }\n\n  readData(data: Event) {\n    if (\n      !data.target ||\n      !('value' in data.target) ||\n      typeof data.target.value !== 'string'\n    ) {\n      return;\n    }\n\n    try {\n      const raw = read(data.target.value.replaceAll(' ', ''));\n      const decoded = decode(raw);\n      this.data$.next({ raw, decoded });\n    } catch {}\n  }\n\n  getMetadata(\n    data: DecodedWebAuthnChallengeResponse\n  ): JsonMetadata<DecodedWebAuthnChallengeResponse> {\n    if (data.method === 'navigator.credentials.create') {\n      return WebAuthnCreateMetadata;\n    }\n\n    if (data.method === 'navigator.credentials.get') {\n      return {\n        method: {\n          genericDescription: 'This is a method used to authenticate',\n          fields: undefined,\n        },\n        options: {\n          fields: {\n            publicKey: {\n              genericDescription: 'WebAuthn options object',\n              fields: {} as any,\n            },\n          },\n        },\n      } as any; // not implemented yet\n    } else {\n      return {} as any;\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.onDestroy$.next();\n    this.onDestroy$.complete();\n  }\n}\n\nfunction read(input: string): WebAuthnChallengeResponse {\n  const decoded = atob(input);\n  const parsed = JSON.parse(decoded);\n  return parsed;\n}\n\nfunction decode(\n  input: WebAuthnChallengeResponse\n): DecodedWebAuthnChallengeResponse | undefined {\n  try {\n    if (input.method === 'navigator.credentials.create') {\n      return decodeCreate(input);\n    }\n\n    return decodeGet(input);\n  } catch (error) {\n    console.error(error);\n    return undefined;\n  }\n}\n","// Yubikey with Attestation\nexport const exampleData =\n  '';\n\n// Yubikey assertion\n// export const exampleData =\n//   'ewogICJtZXRob2QiOiAibmF2aWdhdG9yLmNyZWRlbnRpYWxzLmdldCIsCiAgIm9wdGlvbnMiOiB7CiAgICAicHVibGljS2V5IjogewogICAgICAiYWxsb3dDcmVkZW50aWFscyI6IFsKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAib3cvUTlBaG1rTmtQYXVndjJnWE5jRnBsTnl2U2tZSmo1Q1NEanpMUU1jSnhaSXdsSFEvTEIvMCtXQ2hyWjcvYUNrVytjV0VrNHNnWURENHhrSE9yMXc9PSIsCiAgICAgICAgICAidHlwZSI6ICJwdWJsaWMta2V5IgogICAgICAgIH0KICAgICAgXSwKICAgICAgImNoYWxsZW5nZSI6ICJLcy9pZjJSVUJtb0ZRQlFub2Z2UFpNMXBvSnhBZjBoS2p5aTIvbXVhdndnPSIsCiAgICAgICJycElkIjogImRlbW8ueXViaWNvLmNvbSIsCiAgICAgICJ0aW1lb3V0IjogOTAwMDAsCiAgICAgICJ1c2VyVmVyaWZpY2F0aW9uIjogImRpc2NvdXJhZ2VkIgogICAgfSwKICAgICJzaWduYWwiOiB7CiAgICAgICJ0aHJvd0lmQWJvcnRlZCI6IG51bGwsCiAgICAgICJhYm9ydGVkIjogZmFsc2UsCiAgICAgICJyZWFzb24iOiBudWxsLAogICAgICAib25hYm9ydCI6IG51bGwsCiAgICAgICJhZGRFdmVudExpc3RlbmVyIjogbnVsbCwKICAgICAgInJlbW92ZUV2ZW50TGlzdGVuZXIiOiBudWxsLAogICAgICAiZGlzcGF0Y2hFdmVudCI6IG51bGwKICAgIH0sCiAgICAibWVkaWF0aW9uIjogbnVsbAogIH0sCiAgInJlc3BvbnNlIjogewogICAgInZhbHVlIjogewogICAgICAiZ2V0Q2xpZW50RXh0ZW5zaW9uUmVzdWx0cyI6IHt9LAogICAgICAidG9KU09OIjogewogICAgICAgICJjbGllbnRFeHRlbnNpb25SZXN1bHRzIjoge30sCiAgICAgICAgImlkIjogIm93X1E5QWhta05rUGF1Z3YyZ1hOY0ZwbE55dlNrWUpqNUNTRGp6TFFNY0p4Wkl3bEhRX0xCXzAtV0Noclo3X2FDa1ctY1dFazRzZ1lERDR4a0hPcjF3IiwKICAgICAgICAicmF3SWQiOiAib3dfUTlBaG1rTmtQYXVndjJnWE5jRnBsTnl2U2tZSmo1Q1NEanpMUU1jSnhaSXdsSFFfTEJfMC1XQ2hyWjdfYUNrVy1jV0VrNHNnWURENHhrSE9yMXciLAogICAgICAgICJyZXNwb25zZSI6IHsKICAgICAgICAgICJhdXRoZW50aWNhdG9yRGF0YSI6ICJ4R3p2Z3EwYlZHUjNXUjBBaXdoMW5zUG0wdXkwODVSMHYtcHBhWkpkQTdjQkFBQUFDQSIsCiAgICAgICAgICAiY2xpZW50RGF0YUpTT04iOiAiZXlKamFHRnNiR1Z1WjJVaU9pSkxjMTlwWmpKU1ZVSnRiMFpSUWxGdWIyWjJVRnBOTVhCdlNuaEJaakJvUzJwNWFUSmZiWFZoZG5kbklpd2liM0pwWjJsdUlqb2lhSFIwY0hNNkx5OWtaVzF2TG5sMVltbGpieTVqYjIwaUxDSjBlWEJsSWpvaWQyVmlZWFYwYUc0dVoyVjBJbjAiLAogICAgICAgICAgInNpZ25hdHVyZSI6ICJNRVlDSVFDT0hWUE4yTDJLUkhCRXltdEt4YXVFZ1ZMVl9VV1RmZTNJaWU4ZVAxNmlMd0loQUtBeDBRQWhCbG1tYktrNm9vNDhPcWk2UG1WRnpyNFZLRlR2bkVKWUw5dWkiCiAgICAgICAgfSwKICAgICAgICAidHlwZSI6ICJwdWJsaWMta2V5IgogICAgICB9LAogICAgICAicmF3SWQiOiAib3cvUTlBaG1rTmtQYXVndjJnWE5jRnBsTnl2U2tZSmo1Q1NEanpMUU1jSnhaSXdsSFEvTEIvMCtXQ2hyWjcvYUNrVytjV0VrNHNnWURENHhrSE9yMXc9PSIsCiAgICAgICJyZXNwb25zZSI6IHsKICAgICAgICAiYXV0aGVudGljYXRvckRhdGEiOiAieEd6dmdxMGJWR1IzV1IwQWl3aDFuc1BtMHV5MDg1UjB2K3BwYVpKZEE3Y0JBQUFBQ0E9PSIsCiAgICAgICAgInNpZ25hdHVyZSI6ICJNRVlDSVFDT0hWUE4yTDJLUkhCRXltdEt4YXVFZ1ZMVi9VV1RmZTNJaWU4ZVAxNmlMd0loQUtBeDBRQWhCbG1tYktrNm9vNDhPcWk2UG1WRnpyNFZLRlR2bkVKWUw5dWkiLAogICAgICAgICJ1c2VySGFuZGxlIjogbnVsbCwKICAgICAgICAiY2xpZW50RGF0YUpTT04iOiAiZXlKamFHRnNiR1Z1WjJVaU9pSkxjMTlwWmpKU1ZVSnRiMFpSUWxGdWIyWjJVRnBOTVhCdlNuaEJaakJvUzJwNWFUSmZiWFZoZG5kbklpd2liM0pwWjJsdUlqb2lhSFIwY0hNNkx5OWtaVzF2TG5sMVltbGpieTVqYjIwaUxDSjBlWEJsSWpvaWQyVmlZWFYwYUc0dVoyVjBJbjA9IgogICAgICB9LAogICAgICAiaWQiOiAib3dfUTlBaG1rTmtQYXVndjJnWE5jRnBsTnl2U2tZSmo1Q1NEanpMUU1jSnhaSXdsSFFfTEJfMC1XQ2hyWjdfYUNrVy1jV0VrNHNnWURENHhrSE9yMXciLAogICAgICAidHlwZSI6ICJwdWJsaWMta2V5IgogICAgfQogIH0KfQ==';\n\n// Yubikey with PRF\n// export const exampleData =\n//   'ewogICJtZXRob2QiOiAibmF2aWdhdG9yLmNyZWRlbnRpYWxzLmNyZWF0ZSIsCiAgIm9wdGlvbnMiOiB7CiAgICAicHVibGljS2V5IjogewogICAgICAiY2hhbGxlbmdlIjogImxGQkYxckcwbjBTNFUzQ3FxbXhjREE9PSIsCiAgICAgICJwdWJLZXlDcmVkUGFyYW1zIjogW10sCiAgICAgICJhdXRoZW50aWNhdG9yU2VsZWN0aW9uIjogewogICAgICAgICJhdXRoZW50aWNhdG9yQXR0YWNobWVudCI6IG51bGwsCiAgICAgICAgInJlc2lkZW50S2V5IjogbnVsbAogICAgICB9LAogICAgICAicnAiOiB7CiAgICAgICAgIm5hbWUiOiAiUFJGIERlbW8iCiAgICAgIH0sCiAgICAgICJ1c2VyIjogewogICAgICAgICJuYW1lIjogIlBSRiBEZW1vIFVzZXIiLAogICAgICAgICJkaXNwbGF5TmFtZSI6ICJQUkYgRGVtbyBVc2VyIiwKICAgICAgICAiaWQiOiAiQVFJREJBVUdCd2dKIgogICAgICB9LAogICAgICAidXNlclZlcmlmaWNhdGlvbiI6ICJkaXNjb3VyYWdlZCIsCiAgICAgICJleHRlbnNpb25zIjogewogICAgICAgICJwcmYiOiB7fQogICAgICB9CiAgICB9CiAgfSwKICAicmVzcG9uc2UiOiB7CiAgICAidmFsdWUiOiB7CiAgICAgICJyYXdJZCI6ICJGZGErL0kyaXZveG4yUCtSTnMyZ1FLRzBJRkt2QmdEdWdVWXp0M1drK1RBRXdqL3hMN3RBcXFsMktoN0xwVWY2bU56STVtalJHWHg1c1N2OTJMRTM1QT09IiwKICAgICAgInJlc3BvbnNlIjogewogICAgICAgICJhdHRlc3RhdGlvbk9iamVjdCI6ICJvMk5tYlhSa2JtOXVaV2RoZEhSVGRHMTBvR2hoZFhSb1JHRjBZVmpTbXBvdjViU2U0SUtkZDA0N0ZLSjdVOFBVL29GdGd5L1JFSkFUaGVjRkdnN0ZBQUFBQXdBQUFBQUFBQUFBQUFBQUFBQUFBQUFBUUJYV3Z2eU5vcjZNWjlqL2tUYk5vRUNodENCU3J3WUE3b0ZHTTdkMXBQa3dCTUkvOFMrN1FLcXBkaW9leTZWSCtwamN5T1pvMFJsOGViRXIvZGl4TitTbEFRSURKaUFCSVZnZ28weUNKd054V3NXZDhiSTYwWE5NT0tXdVRnZktEdWZaS0NNekhva1ZDVTRpV0NBSUwvRXN4eE5RK25rcUFHajFSK2YvcU53QVBhOFNlMWhmejdiKzlzUXExS0ZyYUcxaFl5MXpaV055WlhUMSIsCiAgICAgICAgImdldEF1dGhlbnRpY2F0b3JEYXRhIjogIm1wb3Y1YlNlNElLZGQwNDdGS0o3VThQVS9vRnRneS9SRUpBVGhlY0ZHZzdGQUFBQUF3QUFBQUFBQUFBQUFBQUFBQUFBQUFBQVFCWFd2dnlOb3I2TVo5ai9rVGJOb0VDaHRDQlNyd1lBN29GR003ZDFwUGt3Qk1JLzhTKzdRS3FwZGlvZXk2VkgrcGpjeU9abzBSbDhlYkVyL2RpeE4rU2xBUUlESmlBQklWZ2dvMHlDSndOeFdzV2Q4Ykk2MFhOTU9LV3VUZ2ZLRHVmWktDTXpIb2tWQ1U0aVdDQUlML0VzeHhOUStua3FBR2oxUitmL3FOd0FQYThTZTFoZno3Yis5c1FxMUtGcmFHMWhZeTF6WldOeVpYVDEiLAogICAgICAgICJnZXRQdWJsaWNLZXkiOiAiTUZrd0V3WUhLb1pJemowQ0FRWUlLb1pJemowREFRY0RRZ0FFbzB5Q0p3TnhXc1dkOGJJNjBYTk1PS1d1VGdmS0R1ZlpLQ016SG9rVkNVNElML0VzeHhOUStua3FBR2oxUitmL3FOd0FQYThTZTFoZno3Yis5c1FxMUE9PSIsCiAgICAgICAgImdldFB1YmxpY0tleUFsZ29yaXRobSI6IC03LAogICAgICAgICJnZXRUcmFuc3BvcnRzIjogWwogICAgICAgICAgIm5mYyIsCiAgICAgICAgICAidXNiIgogICAgICAgIF0sCiAgICAgICAgImNsaWVudERhdGFKU09OIjogImV5SjBlWEJsSWpvaWQyVmlZWFYwYUc0dVkzSmxZWFJsSWl3aVkyaGhiR3hsYm1kbElqb2liRVpDUmpGeVJ6QnVNRk0wVlRORGNYRnRlR05FUVNJc0ltOXlhV2RwYmlJNkltaDBkSEJ6T2k4dlkyOXliMmwxTG1kcGRHaDFZaTVwYnlJc0ltTnliM056VDNKcFoybHVJanBtWVd4elpYMD0iCiAgICAgIH0sCiAgICAgICJhdXRoZW50aWNhdG9yQXR0YWNobWVudCI6ICJjcm9zcy1wbGF0Zm9ybSIsCiAgICAgICJnZXRDbGllbnRFeHRlbnNpb25SZXN1bHRzIjogewogICAgICAgICJwcmYiOiB7CiAgICAgICAgICAiZW5hYmxlZCI6IHRydWUKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJpZCI6ICJGZGEtX0kyaXZveG4yUC1STnMyZ1FLRzBJRkt2QmdEdWdVWXp0M1drLVRBRXdqX3hMN3RBcXFsMktoN0xwVWY2bU56STVtalJHWHg1c1N2OTJMRTM1QSIsCiAgICAgICJ0eXBlIjogInB1YmxpYy1rZXkiCiAgICB9CiAgfQp9';\n","import {\n  DecodedWebAuthnGetChallengeResponse,\n  WebAuthnGetChallengeResponse,\n} from '../../../types/webauthn-challenge-response';\nimport {\n  BufferReader,\n  decodeAuthenticatorData,\n  decodeBase64Url,\n  decodePublicKeyAlgorithm,\n  decodeWebAuthnOptionsPubKeyCredParam,\n  recursiveConvertArrayBufferToHexString,\n  toHexString,\n  toUuidStandardFormat,\n  tryDecode,\n} from './decode-common';\n\nexport function decodeGet(\n  input: WebAuthnGetChallengeResponse\n): DecodedWebAuthnGetChallengeResponse {\n  return {\n    ...input,\n    options: {\n      ...input.options,\n      publicKey: {\n        ...input.options.publicKey,\n        allowCredentials: tryDecode(() =>\n          input.options.publicKey.allowCredentials?.map(\n            decodeWebAuthnOptionsPubKeyCredParam\n          )\n        ),\n      },\n    },\n    response: {\n      value: {\n        id: input.response.value.id,\n        rawId: toHexString(decodeBase64Url(input.response.value.rawId)),\n        type: input.response.value.type,\n        getClientExtensionResults:\n          input.response.value.getClientExtensionResults,\n        authenticatorAttachment: input.response.value.authenticatorAttachment,\n        response: {\n          authenticatorData: tryDecode(() =>\n            decodeAuthenticatorData(\n              input.response.value.response.authenticatorData\n            )\n          ),\n          clientDataJSON: tryDecode(() =>\n            JSON.parse(atob(input.response.value.response.clientDataJSON))\n          ),\n          signature: tryDecode(() =>\n            toHexString(\n              decodeBase64Url(input.response.value.response.signature)\n            )\n          ),\n          userHandle: tryDecode(() =>\n            toHexString(\n              decodeBase64Url(input.response.value.response.userHandle)\n            )\n          ),\n        },\n      },\n    },\n  };\n}\n"],"x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]}